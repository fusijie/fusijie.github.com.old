<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jacky's Blog]]></title>
  <link href="http://www.jacky.tk/atom.xml" rel="self"/>
  <link href="http://www.jacky.tk/"/>
  <updated>2013-11-11T17:31:23+08:00</updated>
  <id>http://www.jacky.tk/</id>
  <author>
    <name><![CDATA[FuSijie]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之十七】cocos2d-x中文显示]]></title>
    <link href="http://www.jacky.tk/blog/2013/10/25/play-cocos2dx-17/"/>
    <updated>2013-10-25T16:53:00+08:00</updated>
    <id>http://www.jacky.tk/blog/2013/10/25/play-cocos2dx-17</id>
    <content type="html"><![CDATA[<p>原创作品，转载请标明：<a href="http://blog.csdn.net/jackystudio/article/details/13014883">http://blog.csdn.net/jackystudio</a></p>

<p>cocos2d-x的中文显示其实就是一个UTF-8编码在作怪而已，一种简单的方法就是把文本保存为UTF-8编码即可（注意不是UTF-8 + BOM），建议使用UE，Sublime Text或者EditPlus之类的本文编辑器。这里介绍另一种方法：通过读取xml文件显示中文，这种方法更利于软件的国际化，demo顺便实现了中英文切换。</p>

<!-- more -->


<h3>1.xml文件</h3>

<p>先写好一个xml文件（CHN_Strings.xml）。注意记得要以UTF-8编码保存。格式很简单，一个key对应一个string的键值对。如下：</p>

<pre><code>&lt;dict&gt;  
    &lt;key&gt;language&lt;/key&gt;  
    &lt;string&gt;English&lt;/string&gt;  
    &lt;key&gt;username&lt;/key&gt;  
    &lt;string&gt;偶尔e网事&lt;/string&gt;  
    &lt;key&gt;website&lt;/key&gt;  
    &lt;string&gt;CSDN博客：http://blog.csdn.net/jackystudio&lt;/string&gt;  
&lt;/dict&gt;  
</code></pre>

<h3>2.通过CCDictionary读取xml</h3>

<p>CCDictionary是利用哈希表算法来进行CCObject管理的一个类。这里不再对它的API及内部实现进行说明了。</p>

<p><strong>2.1.创建词典类实例</strong>
[cpp] view plaincopy
CCDictionary *chnStrings = CCDictionary::createWithContentsOfFile(&ldquo;CHN_Strings.xml&rdquo;);</p>

<p><strong>2.2.通过键（key）获取值（value）</strong></p>

<pre><code>const char *username = ((CCString*)chnStrings-&gt;objectForKey("username"))-&gt;m_sString.c_str();  
</code></pre>

<p><strong>2.3.使用value</strong></p>

<pre><code>CCLabelTTF* pLabel = CCLabelTTF::create(username, "Arial", 24);//这里创建一个文本  
pLabel-&gt;setPosition(ccp(origin.x + visibleSize.width/2,origin.y + visibleSize.height - pLabel-&gt;getContentSize().height));  
this-&gt;addChild(pLabel, 1);  
</code></pre>

<h3>3.效果</h3>

<p>这里我用了2个xml，一个是中文，一个是英文，设置了一个菜单，点击即可调用不同的xml进行中英文的切换，效果如下图。</p>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_17/1.jpg" alt="" border="0" title="效果1" /><br></br></div>


<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_17/2.jpg" alt="" border="0" title="效果2" /><br></br></div>


<h3>4.源码下载</h3>

<p><a href="http://download.csdn.net/detail/jackyvincefu/6442201">源码下载</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之十六】滚动字幕和公告]]></title>
    <link href="http://www.jacky.tk/blog/2013/10/24/play-cocos2dx-16/"/>
    <updated>2013-10-24T16:38:00+08:00</updated>
    <id>http://www.jacky.tk/blog/2013/10/24/play-cocos2dx-16</id>
    <content type="html"><![CDATA[<p>原创作品，转载请标明：<a href="http://blog.csdn.net/jackystudio/article/details/12991977">http://blog.csdn.net/jackystudio</a></p>

<p>滚动字幕和公告是游戏中经常使用到的元素，本文大致写一下实现方法，至于例子中具体的坐标值，请不要纠结。。。这和美工关系还是蛮大的。我PS技术太搓了。。。</p>

<h3>1.原理</h3>

<p>其实它们的实现都是简单的通过调用update来更新位置达到的移动效果，和背景滚动有点类似，一旦滚动结束就重置为起点，开始新的滚动。只是为了达到在某个区域内滚动而不至于超出这个区域，有时候会用一些前景图来做遮盖，所以这个时候其实字幕或者公告是有在后面滚动的，但是被遮住了，因此看起来就像是只在某个区域内滚动。以垂直字幕滚动为例说明，如下图。</p>

<!-- more -->




<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_16/1.jpg" alt="" border="0" title="原理" /><br></br></div>


<h3>2.实现</h3>

<p>不要纠结以下各精灵的坐标位置：）</p>

<pre><code>bool CTestLayer::init()  
{  
    bool bRet=false;  
    do   
    {  
        CC_BREAK_IF(!CCLayer::init());  

        CCSize visibleSize=CCDirector::sharedDirector()-&gt;getVisibleSize();  
        CCSpriteFrameCache::sharedSpriteFrameCache()-&gt;addSpriteFramesWithFile("ui_serverlist.plist");  

        //垂直滚动字幕  
        CCSprite* listbase=CCSprite::createWithSpriteFrame(CCSpriteFrameCache::sharedSpriteFrameCache()-&gt;spriteFrameByName("login_listbase.png"));//bottom底图  
        listbase-&gt;setPosition(ccp(visibleSize.width/2,visibleSize.height/2+10));  
        this-&gt;addChild(listbase);  
        text1=CCLabelTTF::create("1.Hi! Welcome to JackyStudio,\nMy Blog is\nblog.csdn.net/jackystudio!\n2.Hi! Welcome to JackyStudio,\nMy Blog is\nblog.csdn.net/jackystudio!\n3.Hi! Welcome to JackyStudio,\nMy Blog is\nblog.csdn.net/jackystudio!\n4.Hi! Welcome to JackyStudio,\nMy Blog is\nblog.csdn.net/jackystudio!","Arial",12);//middle文本  
        text1-&gt;setHorizontalAlignment(kCCTextAlignmentLeft);//左对齐  
        text1-&gt;setAnchorPoint(ccp(0.5,1));  
        text1-&gt;setPosition(ccp(visibleSize.width/2,visibleSize.height/2-55));  
        this-&gt;addChild(text1);  
        CCSprite* fg=CCSprite::create("fg.png");//top前景  
        fg-&gt;setPosition(ccp(visibleSize.width/2,visibleSize.height/2));  
        this-&gt;addChild(fg);  

        //水平滚动公告  
        CCSprite* textbase=CCSprite::createWithSpriteFrame(CCSpriteFrameCache::sharedSpriteFrameCache()-&gt;spriteFrameByName("login_textbase.png"));  
        textbase-&gt;setPosition(ccp(visibleSize.width/2,50));  
        textbase-&gt;setScaleX(2.5f);  
        this-&gt;addChild(textbase);  
        text2=CCLabelTTF::create("Hi! Welcome to JackyStudio,My Blog is blog.csdn.net/jackystudio!","Arial",12);  
        text2-&gt;setPosition(ccp(visibleSize.width+text2-&gt;getContentSize().width/2,50));  
        text2-&gt;setColor(ccc3(255,0,0));//红色字体  
        this-&gt;addChild(text2);  

        this-&gt;scheduleUpdate();//执行更新  

        bRet=true;  
    } while (0);  
    return bRet;  
}  

void CTestLayer::update(float delta)  
{  
    CCSize visibleSize=CCDirector::sharedDirector()-&gt;getVisibleSize();  

    int newY=text1-&gt;getPositionY()+1;  
    if (newY==500)//如果滚动到这个位置，重置  
    {  
        newY=visibleSize.height/2-55;  
    }  
    text1-&gt;setPositionY(newY);  

    int newX=text2-&gt;getPositionX()-1;  
    if (newX&lt;=-text2-&gt;getContentSize().width/2)//如果滚动到这个位置，重置  
    {  
        newX=visibleSize.width+text2-&gt;getContentSize().width/2;  
    }  
    text2-&gt;setPositionX(newX);  
}  
</code></pre>

<h3>3.效果</h3>

<p>这个效果有点小bug，就是文字覆盖到边框上了，这是因为没有把边框做在top层上导致的，实际使用注意这个问题即可。</p>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_16/2.jpg" alt="" border="0" title="字幕滚动和公告" /><br></br></div>


<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_16/3.jpg" alt="" border="0" title="字幕滚动和公告" /><br></br></div>


<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_16/4.jpg" alt="" border="0" title="字幕滚动和公告" /><br></br></div>


<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_16/5.jpg" alt="" border="0" title="字幕滚动和公告" /><br></br></div>


<h3>4.源码下载</h3>

<p><a href="http://download.csdn.net/detail/jackyvincefu/6434549">源码下载</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之十五】关卡选择的设计]]></title>
    <link href="http://www.jacky.tk/blog/2013/10/23/play-cocos2dx-15/"/>
    <updated>2013-10-23T16:26:00+08:00</updated>
    <id>http://www.jacky.tk/blog/2013/10/23/play-cocos2dx-15</id>
    <content type="html"><![CDATA[<p>原创作品，转载请标明：<a href="http://blog.csdn.net/jackystudio/article/details/12966993">http://blog.csdn.net/jackystudio</a></p>

<p>这节介绍一下游戏中帮助界面和关卡选择的设计，其实都是一样的，关键在于美工。这里采用自定义TableView层来实现。</p>

<h3>1.导入头文件和设定空间</h3>

<p>因为TableView相关的类是在扩展包里面，所以必须先声明</p>

<pre><code>#include "cocos-ext.h"  
USING_NS_CC_EXT;  
</code></pre>

<!-- more -->


<h3>2.继承的实现</h3>

<p>自定义TableView继承于CCLayer，因此可以捕获触摸，同时继承于扩展包的CCTableViewDataSource和CCTableViewDelegate。前者是TableView的数据源，包含了一系列和TableView数据单元相关的操作，后者则是继承于CCScrollViewDelegate抽象类，声明了一些和滚动，放大，触摸回调之类的接口，然后在内部包含了一个CCTableView，这用起来有点像Android的Adapter。当然分别继承几个类使用也是一样的。</p>

<p>先看一下要实现的接口吧。</p>

<pre><code>class TableViewTestLayer : public cocos2d::CCLayer, public cocos2d::extension::CCTableViewDataSource, public cocos2d::extension::CCTableViewDelegate  
{  
    public:  
    virtual bool init();    

    CREATE_FUNC(TableViewTestLayer);  

    virtual void scrollViewDidScroll(cocos2d::extension::CCScrollView* view){}//滚动时调用，空实现，因为继承了抽象类所以必须重写  
    virtual void scrollViewDidZoom(cocos2d::extension::CCScrollView* view){}//缩放时调用，空实现，同上  
    virtual void tableCellTouched(cocos2d::extension::CCTableView* table, cocos2d::extension::CCTableViewCell* cell);//触摸单元时回调  
    virtual cocos2d::CCSize tableCellSizeForIndex(cocos2d::extension::CCTableView *table, unsigned int idx);//设定单元所占大小  
    virtual cocos2d::extension::CCTableViewCell* tableCellAtIndex(cocos2d::extension::CCTableView *table, unsigned int idx);//设定单元内容  
    virtual unsigned int numberOfCellsInTableView(cocos2d::extension::CCTableView *table);//返回单元数  
};  
</code></pre>

<p>当然还有一些其他功能，如高亮，循环，看情况重载。</p>

<h3>3.自定义TabView层各模块的实现</h3>

<p><strong>3.1.初始化函数init</strong></p>

<pre><code>CCSize winSize = CCDirector::sharedDirector()-&gt;getWinSize();  
CCTableView* tableView = CCTableView::create(this, winSize);//创建一个CCTableView  
tableView-&gt;setDirection(kCCScrollViewDirectionHorizontal);//设置方向  
tableView-&gt;setPosition(ccp(0,winSize.height/2-50));  
tableView-&gt;setDelegate(this);//这句话很重要，把taleView和当前类绑到一起，所以后面的调用主体都是tableView  
this-&gt;addChild(tableView);  
tableView-&gt;reloadData();  
</code></pre>

<p><strong>3.2.触摸回调tableCellTouched</strong></p>

<pre><code>void TableViewTestLayer::tableCellTouched(CCTableView* table, CCTableViewCell* cell)  
{  
    CCLOG("cell touched at index: %i", cell-&gt;getIdx());//cell为当前选择单元  
}  
</code></pre>

<p><strong>3.3.单元大小tableCellSizeForIndex</strong></p>

<pre><code>CCSize TableViewTestLayer::tableCellSizeForIndex(CCTableView *table, unsigned int idx)  
{  
    //if (idx == 2) {  
    //    return CCSizeMake(100, 100);//第2个大小为100，100  
    //}  
    return CCSizeMake(120, 120);其余为120，120  
}  
</code></pre>

<p><strong>3.4.设置数据源tableCellAtIndex</strong></p>

<pre><code>CCTableViewCell* TableViewTestLayer::tableCellAtIndex(CCTableView *table, unsigned int idx)  
{  
    CCString *string = CCString::createWithFormat("%d", idx);  
    CCTableViewCell *cell = table-&gt;dequeueCell();  
    if (!cell) {  
        cell = new CCTableViewCell();//创建单元，如果要自定义单元效果，需继承CCTableViewCell，并重载draw函数  
        cell-&gt;autorelease();  
        CCSprite *sprite = CCSprite::create("HelloWorld.png");  
        sprite-&gt;setScale(0.2f);  
        sprite-&gt;setPosition(ccp(60, 60));  
        sprite-&gt;setTag(123);  
        cell-&gt;addChild(sprite);//添加到cell  
        CCLabelTTF *label = CCLabelTTF::create(string-&gt;getCString(), "Helvetica", 20.0);  
        label-&gt;setPosition(ccp(60,10));  
        label-&gt;setTag(456);  
        cell-&gt;addChild(label);//添加到cell  
    }  
    else  
    {  
        CCLabelTTF *label = (CCLabelTTF*)cell-&gt;getChildByTag(456);  
        label-&gt;setString(string-&gt;getCString());  
    }  
    return cell;  
}  
</code></pre>

<p><strong>3.5.单元数numberOfCellsInTableView</strong></p>

<pre><code>unsigned int TableViewTestLayer::numberOfCellsInTableView(CCTableView *table)  
{  
    return 20;//直接返回设定单元数  
}  
</code></pre>

<h3>4.效果图</h3>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_15/1.jpg" alt="" border="0" title="关卡1" /><br></br></div>


<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_15/2.jpg" alt="" border="0" title="关卡2" /><br></br></div>


<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_15/3.jpg" alt="" border="0" title="关卡3" /><br></br></div>


<h3>5.源码下载地址</h3>

<p><a href="http://download.csdn.net/detail/jackyvincefu/6422401">下载地址</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之十四】菜单选项卡的实现]]></title>
    <link href="http://www.jacky.tk/blog/2013/10/22/play-cocos2dx-14/"/>
    <updated>2013-10-22T10:34:00+08:00</updated>
    <id>http://www.jacky.tk/blog/2013/10/22/play-cocos2dx-14</id>
    <content type="html"><![CDATA[<p>原创作品，转载请标明：<a href="http://blog.csdn.net/jackystudio/article/details/12940733">http://blog.csdn.net/jackystudio</a></p>

<p>有时候，我们希望实现一个选项卡功能，就是切换tab选项，场景中的内容会跟着改变，但是tab选项卡不动。这是用切换场景的方式没办法做到的。
这里我们就可以使用CCLayerMultiplex来实现这个功能。</p>

<h3>1.创建布景</h3>

<p>这里创建3个布景来做示范。分别是Laye1，Layer2和Layer3。代码就不贴了，布景内容可以直接使用HelloWorld的代码。</p>

<!-- more -->


<h3>2.创建主场景</h3>

<p>主场景的初始化函数如下：</p>

<pre><code>bool CCMainScene::init()  
{  
    bool bRet=false;  
    do   
    {  
        CC_BREAK_IF(!CCScene::init());  

        _layer1=CCLayer1::create();//创建3个层的实例  
        _layer2=CCLayer2::create();  
        _layer3=CCLayer3::create();  

        _layerMuticomplex=CCLayerMultiplex::create(_layer1,_layer2,_layer3,NULL);//创建多层布景层  
        this-&gt;addChild(_layerMuticomplex);//添加到场景，默认显示第一个布景  

        CCSize visibleSize = CCDirector::sharedDirector()-&gt;getVisibleSize();  
        CCPoint origin = CCDirector::sharedDirector()-&gt;getVisibleOrigin();  

        CCMenuItemImage *pCloseItem1 = CCMenuItemImage::create(//创建3个tab菜单，用于切换布景  
            "w_b.png",  
            "w_b.png",  
            this,  
            menu_selector(CCMainScene::menuCallback));  

        CCMenuItemImage *pCloseItem2 = CCMenuItemImage::create(  
            "r_b.png",  
            "r_b.png",  
            this,  
            menu_selector(CCMainScene::menuCallback));  

        CCMenuItemImage *pCloseItem3 = CCMenuItemImage::create(  
            "g_b.png",  
            "g_b.png",  
            this,  
            menu_selector(CCMainScene::menuCallback));  

        // create menu, it's an autorelease object  
        pCloseItem1-&gt;setTag(0);//给tab按钮设置tag，方便回调函数中的获取  
        pCloseItem2-&gt;setTag(1);  
        pCloseItem3-&gt;setTag(2);  
        CCMenu* pMenu = CCMenu::create(pCloseItem1, pCloseItem2, pCloseItem3, NULL);//创建菜单  
        pMenu-&gt;alignItemsHorizontallyWithPadding(-1);//设置菜单项间隔  
        pMenu-&gt;setPosition(visibleSize.width/2,25);  
        this-&gt;addChild(pMenu, 1);//注意哦，菜单要在场景中添加而不是在布景中了！而且z轴要高于多层布景，保证可见。  
        bRet=true;  
    } while (0);  
    return bRet;  
}  
</code></pre>

<p>回调函数如下：</p>

<pre><code>void CCMainScene::menuCallback(CCObject* pSender)  
{  
    int item=((CCMenuItemImage*)pSender)-&gt;getTag();//获取选择项  
    if (item!=curLayerPos)  
    {  
        _layerMuticomplex-&gt;switchTo(item);//切换布景，如果使用switchToAndReleaseMe会释放掉当前布景  
        curLayerPos=item;  
    }  
}  
</code></pre>

<h3>3.效果</h3>

<p>为了让效果明显一点，我让3个布景稍微有点区别。当然菜单是可以做normal，pressed，disable三态的，这里略去。点击不同的选项卡就可以切换到不同的布景层。当然CCLayerMultiplex还可以嵌套使用。</p>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_14/1.jpg" alt="" border="0" title="效果" /><br></br></div>


<h3>4.源码下载地址</h3>

<p><a href="http://download.csdn.net/detail/jackyvincefu/6421801">下载地址</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之十三】CCMenu的布局]]></title>
    <link href="http://www.jacky.tk/blog/2013/10/21/play-cocos2dx-13/"/>
    <updated>2013-10-21T10:23:00+08:00</updated>
    <id>http://www.jacky.tk/blog/2013/10/21/play-cocos2dx-13</id>
    <content type="html"><![CDATA[<p>原创作品，转载请标明：<a href="http://blog.csdn.net/jackystudio/article/details/12904705">http://blog.csdn.net/jackystudio</a></p>

<p>前两天写个游戏，发现CCMenu的布局还是比较有意思的，这里总结一下，以便后用。</p>

<h3>1.概况</h3>

<p>CCMenu是cocos2d-x的菜单类，但它本身并不具备菜单具体属性，而是作为一个父节点，将一些具体类型的菜单添加进去来达到菜单目的的。我们正常会这么使用它：先创建子菜单项CCMenuItem，然后将子菜单项CCMenuItem加入菜单CCMenu，最后把CCMenu加入当前层CCLayer。</p>

<p>如果直接在层中添加CCMenuItem会怎样？其实显示也是会正常，但是无法响应回调，因为CCMenu是继承至CCLayer，也就继承了触摸的相关事件，而CCMenuItem只是从CCNode继承而来，并不响应触摸，因此无法调用回调函数。</p>

<!-- more -->


<h3>2.菜单CCMenu</h3>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_13/1.jpg" alt="" border="0" title="CCMenu" /><br></br></div>


<h3>3.子菜单项CCMenuItem</h3>

<p>子菜单项可以是用精灵，图片，标签文本，或者开关都可以，这里不具体解释。请看：</p>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_13/2.jpg" alt="" border="0" title="CCMenuItem" /><br></br></div>


<h3>4.锚点</h3>

<p>CCMenu继承于CCLayer，所以它具有忽略锚点的属性。而CCMenuItem的锚点是正常的(0.5,0.5)。</p>

<p>（1）看一下自带的HelloCpp这个工程，在添加退出按钮的时候，是不是有这么一句：</p>

<pre><code>pMenu-&gt;setPosition(CCPointZero);
</code></pre>

<p>这句话的作用就是把Menu放在原点的位置，假设Menu有大小，那就是下图1。</p>

<p>（2）现在再做点改变，把MenuItem指定的位置去掉，也就是让它默认在(0,0)位置上。</p>

<pre><code>//pCloseItem-&gt;setPosition(ccp(origin.x + visibleSize.width - pCloseItem-&gt;getContentSize().width/2 ,origin.y + pCloseItem-&gt;getContentSize().height/2));  
</code></pre>

<p>那么再看一下效果，如图2，抽象出来就是图3，因为CCMenuItem的锚点是(0.5,0.5)。</p>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_13/3.jpg" alt="" border="0" title="" /><br></br></div>


<p>（3）所以现在可以理解HelloCpp中为什么定义的是CCMenuItem的位置，而不是定义CCMenu的位置了吧。CCMenu包含了多个子菜单项，每个子菜单的位置都不一样，如果定义了CCMenu的位置，那它作为父节点会影响到所有的子菜单的位置，因此我们一般把它设置在原点处，然后通过设置子菜单的位置（也就是相对父节点的偏移量）来定位整个菜单。</p>

<h3>5.多子菜单的排列</h3>

<p><em>（1）横向排列，纵向排列，可以指定间隔</em></p>

<pre><code>CCMenuItemImage *pCloseItem1 = CCMenuItemImage::create(  
    "CloseNormal.png",  
    "CloseSelected.png",  
    this,  
    menu_selector(HelloWorld::menuCloseCallback));  
CCMenuItemImage *pCloseItem2 = CCMenuItemImage::create(  
    "CloseNormal.png",  
    "CloseSelected.png",  
    this,  
    menu_selector(HelloWorld::menuCloseCallback));  

CCMenu* pMenu = CCMenu::create(pCloseItem1,pCloseItem2,NULL);  
pMenu-&gt;alignItemsHorizontally();//默认间隔是kDefaultPadding=5  
//pMenu-&gt;alignItemsHorizontallyWithPadding(20);//指定间隔  
//pMenu-&gt;alignItemsVertically();//默认间隔也是kDefaultPadding=5  
//pMenu-&gt;alignItemsVerticallyWithPadding(20);//指定间隔  
this-&gt;addChild(pMenu, 1);  
</code></pre>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_13/4.jpg" alt="" border="0" title="" /><br></br></div>


<p><em>（2）按行排列，按列排列，不能指定间隔，只能自己实现。希望下一版本有这个功能。</em></p>

<pre><code>CCMenuItemImage *pCloseItem1 = CCMenuItemImage::create(  
    "CloseNormal.png",  
    "CloseSelected.png",  
    this,  
    menu_selector(HelloWorld::menuCloseCallback));  
...  
CCMenuItemImage *pCloseItem6 = CCMenuItemImage::create(  
    "CloseNormal.png",  
    "CloseSelected.png",  
    this,  
    menu_selector(HelloWorld::menuCloseCallback));  
CCMenu* pMenu = CCMenu::create(pCloseItem1,pCloseItem2,pCloseItem3,pCloseItem4,pCloseItem5,pCloseItem6,NULL);  
pMenu-&gt;alignItemsInRows(3,2,1,NULL);  
//pMenu-&gt;alignItemsInColumns(3,2,1,NULL);  
this-&gt;addChild(pMenu, 1);  
</code></pre>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_13/5.jpg" alt="" border="0" title="" /><br></br></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之十二】plist解析工具：Anti_TexturePacker]]></title>
    <link href="http://www.jacky.tk/blog/2013/10/19/play-cocos2dx-12/"/>
    <updated>2013-10-19T09:49:00+08:00</updated>
    <id>http://www.jacky.tk/blog/2013/10/19/play-cocos2dx-12</id>
    <content type="html"><![CDATA[<p>原创作品，转载请标明：<a href="http://blog.csdn.net/jackystudio/article/details/12867863">http://blog.csdn.net/jackystudio</a></p>

<p>之前拿了一些别人的图片素材，是用TexturePacker打包合成的，结果写程序的时候不知道每个合成前小png图的名字是什么，只能一个一个从plist文件中找，然后猜测对应的名字，再进行显示，如果不对，还要继续猜。。。坑爹啊，效率大大降低了，时间都耗在找图片名字上了。后来决定动手写一个解析plist的软件，就叫它Anti_TexturePacker吧。</p>

<p>Anti_TexurePacker软件基于VS 2008 MFC Dialog。</p>

<h3>1.PNG图的显示</h3>

<p>这个还好，VS2008提供了GDI+，所以可以直接用它显示。关键是屏幕尺寸有限，如果打包后的PNG图很大的话，不能直接显示，又懒得做滚动条，所以直接采用缩放的方式了。缩放比例较大的话，可能会出现捕获点计算不精确，不过效果还是不错的，没有尺寸限制。</p>

<!-- more -->


<pre><code>CDC* pDC =GetDC();  
Graphics graphics( pDC-&gt;m_hDC);  
Image image(m_PNGFileName.GetString(), FALSE);  
graphics.DrawImage(&amp;image,ORIGIN_DRAW_X,ORIGIN_DRAW_Y,(int)(m_RealWidth*m_ScaleRatio),(int)(m_RealHeight*m_ScaleRatio)); 
</code></pre>

<p>要注意PNG图的显示要放在OnPaint中执行，这样窗口进行重绘的时候才会保证PNG图的正常显示。</p>

<h3>2.plist文件的读取</h3>

<p>看一下plist的格式：</p>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_12/7.jpg" alt="" border="0" title="xml" /><br></br></div>


<p>这样一看，就知道了标准的plist文件中，我们需要的是第7，10，14，20，23，27&hellip;行。抓出规律，读取到CStringArray。我没有采用xml的解析库，而是直接无耻的这么做了，用起来倒是没什么问题，但是不要学啊。。。</p>

<pre><code>    int i=1;
    int needName=7;
    int needConfig=10;
    int needrotate=14;
    if(!bFileExist)//如果文件存在且可读
    {
        return FALSE;
    }
    CString strline;
    FileContainer.RemoveAll();
    //将PlistFile文件数据读到FileContainer
    while(PlistFile.ReadString(strline))
    {
        if (i==needName)
        {
            FileContainer.Add(strline);
            needName+=13;
        }
        if (i==needConfig)
        {
            FileContainer.Add(strline);
            needConfig+=13;
        }
        if (i==needrotate)
        {
            FileContainer.Add(strline);
            needrotate+=13;
        }
        i++;
    }
    PlistFile.Close();
</code></pre>

<p>然后再解析出CCStringArray中的名字和对应的坐标，尺寸，是否旋转赋值到一个结构体（包含Name，Width，Height，OriginX，OriginY，isRotate）。创建一个CList来储存这些结构体。</p>

<pre><code>while(i&lt;iFileLines)
{
    strline = FileContainer.GetAt(i++);
    strline.TrimLeft();//删除左边的空格
    if (i%3==1)//第1行，储存名字
    {
        str=strline.Mid(5,strline.GetLength()-11);
        t_pngcfg.strName=str;
    }
    else if(i%3==2)//第2行，储存坐标和尺寸
    {
        CString strTemp;
        str=strline.Mid(10,strline.GetLength()-21);
        AfxExtractSubString(strTemp,str,0,',');
        t_pngcfg.originX=_ttoi(strTemp);
        AfxExtractSubString(strTemp,str,1,',');
        strTemp=strTemp.Left(strTemp.GetLength()-1);
        t_pngcfg.originY=_ttoi(strTemp);
        AfxExtractSubString(strTemp,str,2,',');
        strTemp=strTemp.Right(strTemp.GetLength()-1);
        t_pngcfg.width=_ttoi(strTemp);
        AfxExtractSubString(strTemp,str,3,',');
        t_pngcfg.height=_ttoi(strTemp);
    }
    else //第3行，存储旋转属性
    {
        str=strline.Mid(1,strline.GetLength()-3);
        if (str=="true")
        {
            t_pngcfg.isRotate=true;
        }
        else if (str=="false")
        {
            t_pngcfg.isRotate=false;
        }
        m_list.AddTail(t_pngcfg);
    }
}
</code></pre>

<p>因为plist文件最后还有一个metadata字段，所以后面进行遍历的时候要对CCList的个数减1。</p>

<h3>3.随鼠标移动的PNG图片名字的获取</h3>

<p>在OnMouseMove中进行处理显示。</p>

<pre><code>CPoint ptInPNG;  
ptInPNG.x=(point.x-ORIGIN_DRAW_X)/m_ScaleRatio;  
ptInPNG.y=(point.y-ORIGIN_DRAW_Y)/m_ScaleRatio;  

int count=m_plistFile.m_list.GetCount();  
for (int i=0;i&lt;count-1;i++)  
{  
    PNGCfg t_pngcfg=m_plistFile.m_list.GetAt(m_plistFile.m_list.FindIndex(i));  
    if (isPtInRect(ptInPNG,t_pngcfg))  
    {  
        showStastus(t_pngcfg.strName);  
    }  
}  
</code></pre>

<h3>4.单击PNG图拷贝名字到剪切板</h3>

<p>在OnLButtonDown中进行处理拷贝。</p>

<pre><code>if(OpenClipboard()) //首先打开一个剪切板，如果成功则返回非0值  
{
    HANDLE hClip;//声明一个句柄  
    char *pBuf;  
    EmptyClipboard();//置空这个剪切板，且得到剪切板的所有权  
    hClip=GlobalAlloc(GMEM_MOVEABLE,t_pngcfg.strName.GetLength()+1);  
    //申请锁定一块存放数据的内存区域  
    pBuf=(char *)GlobalLock(hClip);//得到指向内存区域的第一个字节指针  
    strcpy(pBuf,(char*)_bstr_t(t_pngcfg.strName.GetBuffer()));//将文本框的值拷贝到内存中  
    GlobalUnlock(hClip);//解除内存锁定  
    SetClipboardData(CF_TEXT,hClip);//设置数据到剪切板中  
    CloseClipboard();//关闭剪切板  
}  
</code></pre>

<h3>5.PNG图的裁剪和保存</h3>

<p>创建一个新的GDI+Bitmap对象，传入图像数据和大小，进行保存即可。</p>

<pre><code>Gdiplus::Rect rcImage(x, y, width, height);  
pWrapBitmap-&gt;LockBits(&amp;rcImage, Gdiplus::ImageLockModeRead, pWrapBitmap-&gt;GetPixelFormat(), &amp;bitmapData);  
pBitmap = new Gdiplus::Bitmap(bitmapData.Width, bitmapData.Height, bitmapData.Stride, PixelFormat32bppARGB, (BYTE*)bitmapData.Scan0);  
pWrapBitmap-&gt;UnlockBits(&amp;bitmapData);  
if (pngcfg.isRotate)  
{  
    pBitmap-&gt;RotateFlip(Rotate270FlipNone);  
}  

CLSID pngClsid;   
GetEncoderClsid(L"image/png", &amp;pngClsid);   
CString strpathName=strClipDir;  
strpathName+="\\";  
strpathName+=pngcfg.strName;  
pBitmap-&gt;Save(strpathName, &amp;pngClsid, NULL);  
delete pBitmap;  
delete pWrapBitmap;  
</code></pre>

<h3>6.效果图</h3>

<p>（1）鼠标移动到小图上，右上角显示当前位置所在的PNG名。单击小图，PNG名自动复制到剪切板。</p>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_12/1.jpg" alt="" border="0" title="1" /><br></br></div>


<p>（2）在列表中选择小图名字，软件自动显示红框。包裹该小图。</p>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_12/2.jpg" alt="" border="0" title="2" /><br></br></div>


<p>（3）点击裁剪PNG，弹出保存路径，选择保存路径确定。</p>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_12/3.jpg" alt="" border="0" title="3" /><br></br></div>


<p>（4）工作线程中处理PNG图的裁剪。</p>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_12/4.jpg" alt="" border="0" title="4" /><br></br></div>


<p>（5）PNG图裁剪成功。</p>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_12/5.jpg" alt="" border="0" title="5" /><br></br></div>


<p>（6）目录下可以看到裁剪后的小图，按照原来名字命名。</p>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_12/6.jpg" alt="" border="0" title="6" /><br></br></div>


<h3>7.下载地址</h3>

<p>v.1.2版</p>

<p>更新说明：</p>

<p><em>1.增加PNG剪裁为小PNG功能</em></p>

<p><em>2.修正列表显示</em></p>

<p><a href="http://download.csdn.net/detail/jackyvincefu/6440769">下载地址</a></p>

<p>v1.1版</p>

<p>更新说明：</p>

<p><em>1.修复旋转属性显示错误bug</em></p>

<p><em>2.修复png相对路径无法显示bug</em></p>

<p><em>3.增加双击列表显示红框功能</em></p>

<p><em>4.简化操作</em></p>

<p><em>5.修改icon</em></p>

<p><a href="http://download.csdn.net/detail/jackyvincefu/6429297">下载地址</a></p>

<p>源码：<a href="https://github.com/fusijie/Anti_TexturePaker.git">https://github.com/fusijie/Anti_TexturePaker.git</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之十一】定时器schedule]]></title>
    <link href="http://www.jacky.tk/blog/2013/10/18/play-cocos2dx-11/"/>
    <updated>2013-10-18T08:08:00+08:00</updated>
    <id>http://www.jacky.tk/blog/2013/10/18/play-cocos2dx-11</id>
    <content type="html"><![CDATA[<p>原创作品，转载请标明：<a href="http://blog.csdn.net/jackystudio/article/details/12848473">http://blog.csdn.net/jackystudio</a></p>

<p>如果我们想定时执行一个动作怎么办？CCScheduler帮了我们一个大忙。</p>

<h3>1.概况</h3>

<p>CCNode内部封装了一个</p>

<pre><code>CCScheduler *m_pScheduler;  
</code></pre>

<p>正是通过它我们可以很轻松地完成一些定时功能，所以定时器是节点所具备的功能。</p>

<p>定时器分为2种，一种是更新定时器，执行的频率是每帧执行一次，另一种则是自定义回调函数的定时器（最小值是一帧），关于回调函数和函数指针的相关基础可参见<a href="http://blog.csdn.net/jackystudio/article/details/11720325">这里</a>。</p>

<!-- more -->


<h3>2.API</h3>

<pre><code>//更新定时器，每帧调用1次。每个节点只能有1个被调度的update函数  
void scheduleUpdate(void);  
//卸载更新定时器  
void unscheduleUpdate(void);  

//自定义定时器，如果重复调用，那调用间隔会更新，而不会再次调用  
//interval，调用时间间隔，如果为0，建议使用scheduleUpdate  
//repeat，回调函数会被执行repeat+1次，kCCRepeatForever是无限次调用  
//delay，第一次执行前的延时  
void schedule(SEL_SCHEDULE selector, float interval, unsigned int repeat, float delay);  
void schedule(SEL_SCHEDULE selector, float interval);  
void scheduleOnce(SEL_SCHEDULE selector, float delay);  
void schedule(SEL_SCHEDULE selector);  
//卸载自定义定时器  
void unschedule(SEL_SCHEDULE selector);  
void unscheduleAllSelectors(void);  

//恢复所有定时器和动作，OnEnter调用  
void resumeSchedulerAndActions(void);  
//暂停所有定时器和动作，OnExit调用  
void pauseSchedulerAndActions(void);  

//scheduleUpdate每帧调用  
virtual void update(float delta);  
</code></pre>

<h3>3.示例</h3>

<p><strong>3.1.更新定时器</strong></p>

<pre><code>//开启定时器  
this-&gt;scheduleUpdate();  

//虚函数update  
void HelloWorld::update(float delta)  
{  
    CCLog("%f",delta);  
}  

//输出，这里设置了60fps，调用间隔1/60s  
0.016667  
0.016676  
0.016657  
0.016669  
</code></pre>

<p><strong>3.2.自定义定时器</strong></p>

<pre><code>//开启定时器，延时2s执行，执行3+1次，执行间隔1s  
this-&gt;schedule(schedule_selector(HelloWorld::log),1,3,2);  

//回调函数  
void HelloWorld::log(float dt)  
{  
    CCLog("schedule");  
}  

//输出  
2.004532  
1.005827  
1.000238  
1.001019  
</code></pre>

<h3>4.schedule_selector和SEL_SCHEDULE</h3>

<p>看到上面的schedule_selector了吧，这又是个什么玩意？看看它的宏定义。</p>

<pre><code>#define schedule_selector(_SELECTOR) (SEL_SCHEDULE)(&amp;_SELECTOR)  
</code></pre>

<p>原来是把函数指针转化为SEL_SCHEDULE型指针，那SEL_SCHEDULE又是什么？</p>

<pre><code>typedef void (CCObject::*SEL_SCHEDULE)(float);  
</code></pre>

<p>也没啥，就是定义了一个带有float参数函数指针。所以我们在使用自定义Schedule的时候，回调函数一定要记得带上一个float参数，它记录了两次执行的间隔。如果忘了，可是会出现类型转换错误的异常。这种方式在callfunc_selector，menu_selector等也以同样的方式出现。</p>

<h3>5.谁来调用回调函数</h3>

<p>但是有没有发现，如果这个回调函数是个全局函数或者static函数也就算了，偏偏它是个成员函数，成员函数需要实例来调用，可是从调用方法来看，好像没传入调用对象？</p>

<pre><code>this-&gt;schedule(schedule_selector(HelloWorld::log),1,3,2);  
</code></pre>

<p>是的，还记得一开头说的CCNode内部封装的m_pScheduler吗？</p>

<pre><code>CCScheduler *m_pScheduler;  
</code></pre>

<p>原来CCNode帮我们实现了：</p>

<pre><code>void CCNode::schedule(SEL_SCHEDULE selector, float interval, unsigned int repeat, float delay)  
{  
    CCAssert( selector, "Argument must be non-nil");  
    CCAssert( interval &gt;=0, "Argument must be positive");  

    m_pScheduler-&gt;scheduleSelector(selector, this, interval , repeat, delay, !m_bRunning);  
}  
</code></pre>

<p>原来this这个时候被传入了，同时传入的参数还有m_bRunning，m_bRunning表示节点是否在运行中（是否在舞台上），OnEnter的时候赋值true，OnExit的时候赋值false，所以在执行定时器的时候还必须确保节点有在运行。</p>

<p>这样确实用起来怪怪的，所以在cocos2d-x v3.0版本中，参数和函数指针用一个宏打包起来了~</p>

<p>至于CCSchedule内部是怎么实现的，以及CCTimer的触发回调，有兴趣的就自己看看源码吧，我也写不来，源码有点长啊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之十】cocos2d-x坐标系]]></title>
    <link href="http://www.jacky.tk/blog/2013/10/17/play-cocos2dx-10/"/>
    <updated>2013-10-17T14:43:00+08:00</updated>
    <id>http://www.jacky.tk/blog/2013/10/17/play-cocos2dx-10</id>
    <content type="html"><![CDATA[<p>原创作品，转载请标明：<a href="http://blog.csdn.net/jackystudio/article/details/12830971">http://blog.csdn.net/jackystudio</a></p>

<p>cocos2d-x采用的是笛卡尔平面坐标系，也就是平面上两条垂直线构成的坐标系，平面上任意一点都可以用（x，y）来表示。</p>

<p><em>（1）就坐标系方向而言，cocos2d-x分为屏幕坐标系和OpenGL坐标系。</em></p>

<p><em>（2）就节点本身而言，cocos2d-x分为绝对坐标系和相对坐标系。</em></p>

<h3>1.屏幕坐标系</h3>

<p>屏幕坐标系，也叫UIKit坐标系，原点在屏幕左上，x轴向右，y轴向下。cocos2d-x的屏幕触摸事件传入的位置坐标就是采用了屏幕坐标系。以320*480的屏幕为例，如图坐标值为屏幕坐标系。</p>

<!-- more -->




<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_10/1.jpg" alt="" border="0" title="屏幕坐标系" /><br></br></div>


<h3>2.OpenGL坐标系</h3>

<p>OpenGL坐标系原点在屏幕的左下，x轴向右，y轴向上。cocos2d-x的元素采用的就是OpenGL坐标系。同样的上例，如图坐标值为OpenGL坐标系。</p>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_10/2.jpg" alt="" border="0" title="OpenGL坐标系" /><br></br></div>


<h3>3.屏幕坐标系和OpenGL坐标系的转换</h3>

<p>它们的转换导演类（CCDirector）已经封装好了两个函数供我们使用。</p>

<pre><code>//UIKit To OpenGL  
CCPoint convertToGL(const CCPoint&amp; obPoint);  
//OpenGL To UIKit  
CCPoint convertToUI(const CCPoint&amp; obPoint);  
</code></pre>

<h3>4.绝对坐标系</h3>

<p>绝对坐标系也叫世界坐标系，从名字可以看来，绝对坐标系是一个恒坐标系，不参考也不依赖于其他坐标系。在cocos2d-x中它使用的是OpenGL坐标系。不过因为我们多在CCLayer上放置游戏元素，所以一般比较少直接用到绝对坐标系。</p>

<h3>5.相对坐标系</h3>

<p>cocos2d-x元素是有层次关系的，节点使用的是相对父节点的位置坐标，也就是相对坐标系（也叫本地坐标系），屏幕绘制的时候，cocos2d-x会自动将相对坐标系转换为绝对坐标系，渲染到屏幕的绝对位置上。</p>

<h3>6.锚点</h3>

<p>在举例之前有必要先了解一下锚点这个概念。锚点是对节点而言的，它是节点的一个属性，表明了节点位置的一个参考基准点，同样放置一个物体在(300,300)这个位置，不同的锚点会产生不同的效果。节点的默认锚点位置在(0.5,0.5)。锚点和节点的位置值没有关系，锚点只是影响了节点在屏幕上渲染的位置。如下图，虽然精灵的在屏幕上渲染的位置不一样，但是它们的position值是一样的，都是(300,300)。锚点只会影响它本身在父节点中的渲染位置，而不会影响其子节点的相对它本身的位置。</p>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_10/3.jpg" alt="" border="0" title="锚点" /><br></br></div>


<h3>7.绝对坐标系和相对坐标系的关系</h3>

<p>我们先看一个例子，为了方便演示，节点的锚点都设置为(0,0)。</p>

<pre><code>CCSprite* big=CCSprite::create("big.png");  
big-&gt;setAnchorPoint(ccp(0,0));  
big-&gt;setPosition(ccp(50,50));//设置在相对父节点的(50,50)位置  
this-&gt;addChild(big);//屏幕是父节点  
CCSprite* little=CCSprite::create("little.png");  
little-&gt;setAnchorPoint(ccp(0,0));  
little-&gt;setPosition(ccp(50,50));//设置在相对父节点的(50,50)位置  
big-&gt;addChild(little);//big是父节点  
</code></pre>

<p>效果如下：</p>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_10/4.jpg" alt="" border="0" title="绝对坐标系和相对坐标系的关系" /><br></br></div>


<h3>7.绝对坐标系和相对坐标系的转换</h3>

<p>CCNode提供给我们相对坐标系和绝对坐标系的转换函数。</p>

<pre><code>CCPoint convertToNodeSpace(const CCPoint&amp; worldPoint);  //将世界坐标转换为对象节点内坐标，忽略锚点，以当前父节点左下角坐标为标准  
CCPoint convertToWorldSpace(const CCPoint&amp; nodePoint);  //将对象节点内坐标转换为事件坐标，忽略锚点，以当前父节点左下角坐标为标准  
CCPoint convertToNodeSpaceAR(const CCPoint&amp; worldPoint);//将世界坐标转换为基于锚点的对象节点内坐标
CCPoint convertToWorldSpaceAR(const CCPoint&amp; nodePoint);//将局域锚点的对象节点内坐标转换为世界坐标  
</code></pre>

<p>如果要获取big和little的绝对坐标</p>

<pre><code>CCPoint wp1=this-&gt;convertToWorldSpace(big-&gt;getPosition());//wp1(50,50)  
CCPoint wp2=big-&gt;convertToWorldSpace(little-&gt;getPosition());//wp2(100,100)  
</code></pre>

<p>如果要把绝对坐标转换为big和little的相对坐标</p>

<pre><code>CCPoint np1=big-&gt;convertToNodeSpace(ccp(200,200));//np1(150,150)  
CCPoint np2=little-&gt;convertToNodeSpace(ccp(200,200));//np2(100,100)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之九】动作类CCAction]]></title>
    <link href="http://www.jacky.tk/blog/2013/10/16/play-cocos2dx-09/"/>
    <updated>2013-10-16T14:33:00+08:00</updated>
    <id>http://www.jacky.tk/blog/2013/10/16/play-cocos2dx-09</id>
    <content type="html"><![CDATA[<p>原创作品，转载请标明：<a href="http://blog.csdn.net/jackystudio/article/details/12770909">http://blog.csdn.net/jackystudio</a></p>

<p>精灵也出来了，但是不会动的精灵是木有用的。。。CCAction就是负责来解决精灵运动的问题。</p>

<h3>1.概况</h3>

<p>CCAction直接从CCObject继承而来，注意它代表的是一个动作，是动词。精灵执行了这个动作，而不是名词。CCAction本身并没有什么功能，主要是定义了一些通用函数和虚函数让子类实现多态性。</p>

<!-- more -->




<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_09/1.jpg" alt="" border="0" title="CCAction" /><br></br></div>


<h3>2.接口</h3>

<pre><code>//返回一个描述  
const char* description();  

//返回动作是否结束  
virtual bool isDone(void);  

//在动作开始前调用，需要设置目标精灵  
virtual void startWithTarget(CCNode *pTarget);  

//每帧调用，time在0~1之间，0代表动作刚开始，0.5代表动作执行一半，1代表动作结束  
virtual void update(float time);  

//返回/设置目标节点  
CCNode* getTarget(void);  
void setTarget(CCNode *pTarget);  

//获取/设置上一个节点  
CCNode* getOriginalTarget(void);  
void setOriginalTarget(CCNode *pOriginalTarget);  

//获取/设置标签  
int getTag(void);  
void setTag(int nTag);  

//创建动作静态方法  
static CCAction* create();  
</code></pre>

<h3>3.CCFollow</h3>

<p>CCFollow跟随动作，继承于CCAction，可以实现节点跟随另一个节点动作。它内部封装了一个boundary，也就是跟随范围，初始为CCRectZero。</p>

<pre><code>//创建一个CCFollow对象，create实际上调用了initWithTarget  
static CCFollow* create(CCNode *pFollowedNode, const CCRect&amp; rect = CCRectZero);  
bool initWithTarget(CCNode *pFollowedNode, const CCRect&amp; rect = CCRectZero);  
</code></pre>

<h3>4.CCSpeed</h3>

<p>CCSpeed可调整速度动作类，内部封装了一个速度值，CCSpeed使用很简单，就是传入一个动作和速度，在内部重新copy一个新的动作返回。</p>

<pre><code>//创建一个可变速度动作类，传入速度值  
static CCSpeed* create(CCActionInterval* pAction, float fSpeed);  
</code></pre>

<h3>5.CCFiniteTimeAction</h3>

<p>CCFiniteTimeAction有限次动作执行类，继承于CCAction，它有两个子类CCActionInstant和CCActionInterval，前者代表瞬时动作，也就是这个动作基本不需要时间马上就能完成，而后者代表延时，这个动作需要一段时间来运行。它的子类说明看上图吧。
相比CCAction，它多了一个m_fDuration属性，表示持续时间。</p>

<pre><code>//获取/设置动作持续时间  
float getDuration(void);  
void setDuration(float duration);  

//反转动作，类似于倒带效果，返回一个新的动作  
virtual CCFiniteTimeAction* reverse(void);  
</code></pre>

<p>好了，游戏的基本元素就写到这里，写API文档很蛋疼的说。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之八】精灵类CCSprite]]></title>
    <link href="http://www.jacky.tk/blog/2013/10/15/play-cocos2dx-08/"/>
    <updated>2013-10-15T17:17:00+08:00</updated>
    <id>http://www.jacky.tk/blog/2013/10/15/play-cocos2dx-08</id>
    <content type="html"><![CDATA[<p>精灵类CCSprite可以说是游戏的主角了，也是我们平时最常用到的类。</p>

<h3>1.概况</h3>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_08/1.jpg" alt="" border="0" title="CCSprite" /><br></br></div>


<!-- more -->


<p>CCSprite本质上就是一个二维图片，是静态的。游戏中的动画只不过是让一张张静态图片快速更换达到的动态效果。CCSprite继承于CCNodeRGBA，并实现了CCTextureProtocol的接口。因此CCNodeRGBA所具有的RGB和透明值这些属性和接口CCSprite都有，而CCTextureProtocol是一个抽象类，定义了和纹理相关的两个标准接口：</p>

<pre><code>//返回当前使用的纹理  
virtual CCTexture2D* getTexture(void) = 0;  

//设置一个新的纹理，它会被retain  
virtual void setTexture(CCTexture2D *texture) = 0;  
</code></pre>

<h3>2.常用接口</h3>

<p><strong>2.1.初始化</strong></p>

<pre><code>//初始化函数  
virtual bool init(void);  

//用CCTexture2D纹理来初始化，精灵大小即是纹理大小  
virtual bool initWithTexture(CCTexture2D *pTexture);  

///用CCTexture2D纹理和大小来初始化  
virtual bool initWithTexture(CCTexture2D *pTexture, const CCRect&amp; rect);  

//用CCTexture2D纹理，大小，旋转来初始化  
virtual bool initWithTexture(CCTexture2D *pTexture, const CCRect&amp; rect, bool rotated);  

//用CCSpriteFrame精灵帧来初始化  
virtual bool initWithSpriteFrame(CCSpriteFrame *pSpriteFrame);  

//用CCSpriteFrame精灵帧名来初始化  
virtual bool initWithSpriteFrameName(const char *pszSpriteFrameName);  

//用外部文件初始化，外部文件会先被创建为纹理，再用纹理初始化精灵  
virtual bool initWithFile(const char *pszFilename);  

//用外部文件和大小来初始化  
virtual bool initWithFile(const char *pszFilename, const CCRect&amp; rect);  
</code></pre>

<p><strong>2.2.继承自CCTextureProtocol</strong></p>

<pre><code>//设置/获取纹理  
virtual void setTexture(CCTexture2D *texture);  
virtual CCTexture2D* getTexture(void);  

//设置/获取颜色描绘时混合方案  
void setBlendFunc(ccBlendFunc blendFunc);  
ccBlendFunc getBlendFunc(void);  
</code></pre>

<p><strong>2.3.继承自CCNode</strong></p>

<p>参见CCNode。</p>

<pre><code>virtual void setScaleX(float fScaleX);  
virtual void setScaleY(float fScaleY);  
virtual void setPosition(const CCPoint&amp; pos);  
virtual void setRotation(float fRotation);  
virtual void setRotationX(float fRotationX);  
virtual void setRotationY(float fRotationY);  
virtual void setSkewX(float sx);  
virtual void setSkewY(float sy);  
virtual void removeChild(CCNode* pChild, bool bCleanup);  
virtual void removeAllChildrenWithCleanup(bool bCleanup);  
virtual void reorderChild(CCNode *pChild, int zOrder);  
virtual void addChild(CCNode *pChild);  
virtual void addChild(CCNode *pChild, int zOrder);  
virtual void addChild(CCNode *pChild, int zOrder, int tag);  
virtual void sortAllChildren();  
virtual void setScale(float fScale);  
virtual void setVertexZ(float fVertexZ);  
virtual void setAnchorPoint(const CCPoint&amp; anchor);//默认(0.5,0.5)  
virtual void ignoreAnchorPointForPosition(bool value);  
virtual void setVisible(bool bVisible);  
virtual void draw(void);  
</code></pre>

<p><strong>2.4.继承自CCNodeRGBA</strong></p>

<pre><code>//设置颜色  
virtual void setColor(const ccColor3B&amp; color3);  

//传递颜色  
virtual void updateDisplayedColor(const ccColor3B&amp; parentColor);  

//设置透明度  
virtual void setOpacity(GLubyte opacity);  

//设置/返回透明度是否跟随颜色值变化而变化  
virtual void setOpacityModifyRGB(bool modify);  
virtual bool isOpacityModifyRGB(void);  

//传递透明度  
virtual void updateDisplayedOpacity(GLubyte parentOpacity);  
</code></pre>

<p><strong>2.5.批节点</strong></p>

<pre><code>//更新4属性：x,y,rotation,scale  
virtual void updateTransform(void);  

//如果精灵是由批节点CCSpriteBatchNode渲染的，则返回批节点  
virtual CCSpriteBatchNode* getBatchNode(void);  
//设置批节点，不推荐使用  
virtual void setBatchNode(CCSpriteBatchNode *pobSpriteBatchNode);  
</code></pre>

<p><strong>2.6.纹理</strong></p>

<pre><code>//设置纹理区域  
virtual void setTextureRect(const CCRect&amp; rect);  
virtual void setTextureRect(const CCRect&amp; rect, bool rotated, const CCSize&amp; untrimmedSize);  
virtual void setVertexRect(const CCRect&amp; rect);  
</code></pre>

<p><strong>2.7.精灵帧和动画</strong></p>

<pre><code>//设置新的精灵帧  
virtual void setDisplayFrame(CCSpriteFrame *pNewFrame);  

//返回精灵帧是否在使用  
virtual bool isFrameDisplayed(CCSpriteFrame *pFrame);  

//返回当期使用精灵帧  
virtual CCSpriteFrame* displayFrame(void);  

//设置动画和显示索引  
virtual void setDisplayFrameWithAnimationName(const char *animationName, int frameIndex);  
</code></pre>

<p><strong>2.8.Setter和Getter方法</strong></p>

<p>设置/获取CCSprite属性。</p>

<pre><code>//设置获取是否更新  
virtual bool isDirty(void);  
virtual void setDirty(bool bDirty);  

//返回坐标、顶点、颜色信息  
ccV3F_C4B_T2F_Quad getQuad(void);  

//返回纹理旋转  
bool isTextureRectRotated(void);  

//返回/设置地图集索引  
unsigned int getAtlasIndex(void);  
void setAtlasIndex(unsigned int uAtlasIndex);  

//返回精灵区域，单位为点  
const CCRect&amp; getTextureRect(void);  

//如果采用批渲染，返回/设置纹理地图集  
CCTextureAtlas* getTextureAtlas(void);  
inline void setTextureAtlas(CCTextureAtlas *pobTextureAtlas);  

//获取偏移  
const CCPoint&amp; getOffsetPosition(void);  

//设置返回翻转  
bool isFlipX(void);  
void setFlipX(bool bFlipX);  
bool isFlipY(void);  
void setFlipY(bool bFlipY);  
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之七】场景类CCScene和布景类CCLayer]]></title>
    <link href="http://www.jacky.tk/blog/2013/10/14/play-cocos2dx-07/"/>
    <updated>2013-10-14T22:21:00+08:00</updated>
    <id>http://www.jacky.tk/blog/2013/10/14/play-cocos2dx-07</id>
    <content type="html"><![CDATA[<p>原创作品，转载请标明：<a href="http://blog.csdn.net/jackystudio/article/details/12708811">http://blog.csdn.net/jackystudio</a></p>

<p>场景类CCScene和布景类CCLayer都是作为一个容器来使用，这里简单地看下它们的实现：</p>

<h3>1.场景类：CCScene</h3>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_07/1.jpg" alt="" border="0" title="CCScene" /><br></br></div>




<!-- more -->


<p>CCScene类继承于CCNode，它的实现很简单，就是基本上没添加什么内容。。。它只是作为一个容器（父节点）的抽象概念存在。对比CCNode差别有：</p>

<p>（1）构造函数中设置了不使用锚点定位，而是使用了坐标原点，即使设置了锚点也不起作用。</p>

<p>m_bIgnoreAnchorPointForPosition是CCNode的属性，用于CCScene和CCLayer。</p>

<pre><code>m_bIgnoreAnchorPointForPosition = true;  
</code></pre>

<p>（2）在init中设置场景的大小。节点的初始化大小为CCSizeZero，也就是没有大小。CCScene初始化时设置了场景的大小，即窗口大小。</p>

<pre><code>this-&gt;setContentSize(pDirector-&gt;getWinSize());  
</code></pre>

<h3>2.布景类：CCLayer</h3>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_07/2.jpg" alt="" border="0" title="CCLayer" /><br></br></div>


<p>CCLayer相对CCScene而言会比较麻烦一点，因为他不仅要作为容器使用，而且还要实现一些游戏功能，所以它继承了CCTouchDelegate，CCAccelerometerDelegate和CCKeypadDelegate，这三个类是用来处理触摸事件，重力感应事件和键盘事件的，默认初始化都是不可用，需要手动设置开启。</p>

<p>（1）CCLayer和CCScene的初始化差不多，也是构造函数中设置不使用锚点定位，init函数中设置了层的大小，即窗口大小。</p>

<p>（2）常用接口：</p>

<pre><code>//初始化函数，添加精灵就在这里进行  
virtual bool init();  

//分配内存，标记autoRelease  
static CCLayer *create(void);  

//层进入回调  
virtual void onEnter();  
//层退出回调  
virtual void onExit();  
//如果层进入带效果，效果完成时回调  
virtual void onEnterTransitionDidFinish();  

//触摸事件(单点和多点)  
virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);  
virtual void ccTouchMoved(CCTouch *pTouch, CCEvent *pEvent);  
virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);  
virtual void ccTouchCancelled(CCTouch *pTouch, CCEvent *pEvent);  
virtual void ccTouchesBegan(CCSet *pTouches, CCEvent *pEvent);  
virtual void ccTouchesMoved(CCSet *pTouches, CCEvent *pEvent);  
virtual void ccTouchesEnded(CCSet *pTouches, CCEvent *pEvent);  
virtual void ccTouchesCancelled(CCSet *pTouches, CCEvent *pEvent);  

//重力感应相关  
virtual void didAccelerate(CCAcceleration* pAccelerationValue);  
void registerScriptAccelerateHandler(int nHandler);  
void unregisterScriptAccelerateHandler(void);  

//注册触摸分发，默认是addStandardDelegate  
virtual void registerWithTouchDispatcher(void);  

//设置/获取释放触摸可用  
virtual bool isTouchEnabled();  
virtual void setTouchEnabled(bool value);  

//设置/获取触摸模式  
virtual void setTouchMode(ccTouchesMode mode);  
virtual int getTouchMode();  

//设置/获取触摸优先级，默认为0  
virtual void setTouchPriority(int priority);  
virtual int getTouchPriority();  

//设置/获取是否接收重力感应事件  
virtual bool isAccelerometerEnabled();  
virtual void setAccelerometerEnabled(bool value);  
virtual void setAccelerometerInterval(double interval);  

//设置/获取是否接收键盘事件  
virtual bool isKeypadEnabled();  
virtual void setKeypadEnabled(bool value);  

//返回键和菜单键的回调，需要设置接收键盘事件  
virtual void keyBackClicked(void);  
virtual void keyMenuClicked(void);  
</code></pre>

<h3>3.颜色布景层：CCLayerRGBA，CCLayerColor和CCLayerGradient</h3>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_07/3.jpg" alt="" border="0" title="颜色布景层" /><br></br></div>


<p>（1）CCLayerRGBA和CCNodeRGBA差不多，也是用于设置RGB值和Blend值，同时可以传递到子节点。它的相关接口参见CCNodeRGBA。</p>

<p>（2）CCLayerColor只是一个单纯的可以绘制颜色的层。可以带入长宽参数，绘制一个矩形的布景层。</p>

<p>（3）CCLayerGradient继承于CClayerColor，是一个带有渐变效果的布景层。</p>

<h3>4.多层布景层：CCLayerMultiplex</h3>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_07/4.jpg" alt="" border="0" title="CCLayerMultiplex" /><br></br></div>


<p>CCLayerMultiplex继承与CCLayer，相当于一个层容器，他可以包含多个层，但是同一时间只能显示一个CCLayer。《我叫MT》的第一个界面菜单那一块就是这么处理的。CCLayerMultiplex最重要的函数就是：</p>

<pre><code>//切换布景层  
pLayerMultiplex-&gt;switchTo(item-&gt;getTag());  
pLayerMultiplex-&gt;switchToAndReleaseMe(item-&gt;getTag());  
</code></pre>

<p>两者的差别在于是否释放当前处于活动的布景层。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之六】节点类CCNode]]></title>
    <link href="http://www.jacky.tk/blog/2013/10/14/play-cocos2dx-06/"/>
    <updated>2013-10-14T22:06:00+08:00</updated>
    <id>http://www.jacky.tk/blog/2013/10/14/play-cocos2dx-06</id>
    <content type="html"><![CDATA[<p>原创作品，转载请标明：<a href="http://blog.csdn.net/jackystudio/article/details/12703741">http://blog.csdn.net/jackystudio/</a></p>

<p>节点类CCNode可以说是游戏元素的祖宗了，基本上我们看得到的游戏元素都是以它为原型进行扩展的。像CCScene，CCLayer，CCSprite，CCMenu，CCSpriteBatchNode等等都是从CCNode继承而来。另外如果我们要自定义精灵，那么从CCNode继承也是一个很不错的选择。</p>

<h3>1.概况</h3>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_06/1.jpg" alt="" border="0" title="CCNode" /><br></br></div>




<!-- more -->


<p>CCNode直接从CCObject继承而来，有如下几个特点：</p>

<p><em>（1）可以包含其他CCNode节点，可以进行添加/获取/删除子节点操作。</em></p>

<p><em>（2）可以执行周期性的回调任务。</em></p>

<p><em>（3）可以执行动作。</em></p>

<p>一些子类化的节点提供了更为丰富的特性和功能。</p>

<h3>2.属性</h3>

<pre><code>Features of CCNode:  
- position   //位置，默认(0,0)  
- scale (x, y)   //缩放，默认(1,1)  
- rotation (in degrees, clockwise)   //旋转，默认为0  
- skew   //倾斜，默认为0  
- CCCamera (an interface to gluLookAt )  //CCCamera，视点转换，每个节点都有，默认指向节点中心  
- CCGridBase (to do mesh transformations)//CCGridBase，网类转变  
- anchor point   //锚点，默认(0,0)  
- size   //尺寸，默认(0,0)  
- visible//可见  
- z-order//z轴值  
- openGL z position  //OpenGL z值  
</code></pre>

<h3>3.接口</h3>

<p><strong>3.1.初始化</strong></p>

<pre><code>//初始化函数，成功返回true  
virtual bool init();  

//分配内存空间，调用init并添加autoRelease标记  
static CCNode * create(void);  

//返回描述字符串  
const char* description(void);  
</code></pre>

<p><strong>3.2.图形属性</strong></p>

<pre><code>//设置/获取Z轴顺序，Z轴大的覆盖Z轴小的  
virtual void setZOrder(int zOrder);  
virtual void _setZOrder(int z);  
virtual int getZOrder();  

//设置/获取OpenGL Z轴顶点  
virtual void setVertexZ(float vertexZ);  
virtual float getVertexZ();  

//设置/获取缩放值  
virtual void setScaleX(float fScaleX);  
virtual float getScaleX();  
virtual void setScaleY(float fScaleY);  
virtual float getScaleY();  
virtual void setScale(float scale);  
virtual float getScale();  
virtual void setScale(float fScaleX,float fScaleY);  

//设置/获取位置  
virtual void setPosition(const CCPoint &amp;position);  
virtual const CCPoint&amp; getPosition();  
virtual void setPosition(float x, float y);  
virtual void getPosition(float* x, float* y);  
virtual void  setPositionX(float x);  
virtual float getPositionX(void);  
virtual void  setPositionY(float y);  
virtual float getPositionY(void);  

//设置/获取倾斜角度  
virtual void setSkewX(float fSkewX);  
virtual float getSkewX();  
virtual void setSkewY(float fSkewY);  
virtual float getSkewY();  

//设置/获取锚点  
virtual void setAnchorPoint(const CCPoint&amp; anchorPoint);  
virtual const CCPoint&amp; getAnchorPoint();  
virtual const CCPoint&amp; getAnchorPointInPoints();  

//设置/获取大小  
virtual void setContentSize(const CCSize&amp; contentSize);  
virtual const CCSize&amp; getContentSize() const;  

//设置/获取可见性  
virtual void setVisible(bool visible);  
virtual bool isVisible();  

//设置/获取旋转角度  
virtual void setRotation(float fRotation);  
virtual float getRotation();  
virtual void setRotationX(float fRotaionX);  
virtual float getRotationX();  
virtual void setRotationY(float fRotationY);  
virtual float getRotationY();  
</code></pre>

<p><strong>3.3.节点操作</strong></p>

<pre><code>//添加/获取子节点，可以带Z轴顺序（默认为0）和标签  
virtual void addChild(CCNode * child);  
virtual void addChild(CCNode * child, int zOrder);  
virtual void addChild(CCNode* child, int zOrder, int tag);  
CCNode * getChildByTag(int tag);  
virtual CCArray* getChildren();  
unsigned int getChildrenCount(void) const;  

//设置/获取父节点  
virtual void setParent(CCNode* parent);  
virtual CCNode* getParent();  

//从父节点中移除自身，默认cleanup为true  
virtual void removeFromParent();  
virtual void removeFromParentAndCleanup(bool cleanup);  

//移除子节点  
virtual void removeChild(CCNode* child);  
virtual void removeChild(CCNode* child, bool cleanup);  
virtual void removeChildByTag(int tag);  
virtual void removeChildByTag(int tag, bool cleanup);  

//移除所有节点  
virtual void removeAllChildren();  
virtual void removeAllChildrenWithCleanup(bool cleanup);  

//重新设置节点顺序  
virtual void reorderChild(CCNode * child, int zOrder);  
</code></pre>

<p><strong>3.4.标签和用户数据</strong></p>

<pre><code>//设置/获取tag  
virtual int getTag() const;  
virtual void setTag(int nTag);  

//设置/获取userdata，它是一个指针可以指向你想要的任意数据块，不过记得要释放  
virtual void* getUserData();  
virtual void setUserData(void *pUserData);  

//设置/获取CCObject，和上面一样，只是数据换成了CCObject对象  
virtual CCObject* getUserObject();  
virtual void setUserObject(CCObject *pUserObject);  
</code></pre>

<p><strong>3.5.事件回调</strong></p>

<pre><code>//事件回调
//节点开始进入触发  
virtual void onEnter();  
//节点完成进入触发  
virtual void onEnterTransitionDidFinish();  
//节点退出触发  
virtual void onExit();  
//如果节点退出有过渡动画，动画开始时触发  
virtual void onExitTransitionDidStart();  
//停止动画和调度器  
virtual void cleanup(void);  
</code></pre>

<p><strong>3.6.动作</strong></p>

<pre><code>//获取/设置动作管理器
virtual void setActionManager(CCActionManager* actionManager);  
virtual CCActionManager* getActionManager();  

//运行动作  
CCAction* runAction(CCAction* action);  

//停止动作  
void stopAllActions(void);  
void stopAction(CCAction* action);  
void stopActionByTag(int tag);  
CCAction* getActionByTag(int tag);  

//获取正在运行动作数  
unsigned int numberOfRunningActions(void);  
</code></pre>

<p><strong>3.7.调度器和定时器</strong></p>

<pre><code>//获取/设置调度器  
virtual void setScheduler(CCScheduler* scheduler);  
virtual CCScheduler* getScheduler();  

//检测某个调度器是否有在运行  
bool isScheduled(SEL_SCHEDULE selector);  

//开启update调度  
void scheduleUpdate(void);  
//设置调度优先级  
void scheduleUpdateWithPriority(int priority);  
//关闭update调度器  
void unscheduleUpdate(void);  

//开启/关闭/恢复/暂停调度器  
void schedule(SEL_SCHEDULE selector, float interval, unsigned int repeat, float delay);  
void schedule(SEL_SCHEDULE selector, float interval);  
void scheduleOnce(SEL_SCHEDULE selector, float delay);  
void schedule(SEL_SCHEDULE selector);  
void unschedule(SEL_SCHEDULE selector);  
void unscheduleAllSelectors(void);  
void resumeSchedulerAndActions(void);  
void pauseSchedulerAndActions(void);  

//每帧调用函数  
virtual void update(float delta);  
</code></pre>

<p><strong>3.8.坐标转换</strong></p>

<pre><code>//坐标转换相关，这一部分后面再介绍  
CCPoint convertToNodeSpace(const CCPoint&amp; worldPoint);  
CCPoint convertToWorldSpace(const CCPoint&amp; nodePoint);  
CCPoint convertToNodeSpaceAR(const CCPoint&amp; worldPoint);  
CCPoint convertToWorldSpaceAR(const CCPoint&amp; nodePoint);  
CCPoint convertTouchToNodeSpace(CCTouch * touch);  
CCPoint convertTouchToNodeSpaceAR(CCTouch * touch);  
</code></pre>

<p><strong>3.9.其他</strong></p>

<pre><code>//获取/设置着色程序  
virtual CCGLProgram* getShaderProgram();  
virtual void setShaderProgram(CCGLProgram *pShaderProgram);  

//获取CCCamera对象  
virtual CCCamera* getCamera();  

//节点是否在运行  
virtual bool isRunning();  

//绘制节点  
virtual void draw(void);  
//递归访问节点  
virtual void visit(void);  

//返回所占矩形，节点坐标系  
CCRect boundingBox(void);  
</code></pre>

<h3>4.CCNodeRGBA</h3>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_06/2.jpg" alt="" border="0" title="CCNodeRGBA" /><br></br></div>


<p>CCNodeRGBA继承于CCNode，所以它拥有CCNode的所有特性，并且它也继承于CCRGBAProtocol。从名字看来我们就知道它是一个带有颜色和透明度的节点。</p>

<p>所以它比起CCNode就多了2个特性，Opacity和RGB值。</p>

<p>如果要给子节点传递透明度属性，那么需要设置setCascadeOpacityEnabled(true)，如果传递的过程中遇到了CCNode，那么传递会中断。颜色值的传递也是一样的道理。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之五】导演类CCDirector]]></title>
    <link href="http://www.jacky.tk/blog/2013/10/12/play-cocos2dx-05/"/>
    <updated>2013-10-12T21:49:00+08:00</updated>
    <id>http://www.jacky.tk/blog/2013/10/12/play-cocos2dx-05</id>
    <content type="html"><![CDATA[<p>原创作品，转载请标明：<a href="http://blog.csdn.net/jackystudio/article/details/12646337">http://blog.csdn.net/jackystudio</a></p>

<p>既然cocos2d-x都帮我们封装好了，使得开发与平台无关，那接下来我们就单纯地开始好好玩游戏吧！这几篇是对cocos2d-x一些基本且重要的元素进行解释和API介绍，之前没有系统的看过API，有时候某些功能引擎都已经提供好了，不知道还是会自己去写。所以全面地了解一下是必须的。</p>

<h3>1.概况</h3>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_05/1.jpg" alt="" border="0" title="CCDirector" /><br></br></div>




<!-- more -->


<p>导演类CCDirector是cocos2d-x引擎中非常重要的一个类，它是一个抽象类（mainloop空实现），主要完成以下工作：</p>

<p>（1）初始化游戏和销毁游戏</p>

<p>（2）管理调度场景</p>

<p>（3）调整设置openGL信息</p>

<p>（4）获取、设置游戏的相关细节</p>

<p>CCDirector是单例类，直接从CCObject继承而来，它在cocos2d-x中的首次创建位置在上一篇已经介绍了。因此后面的CCDirector调用可采用如下方式：</p>

<pre><code>CCDirector::sharedDirector()-&gt;methodname;
</code></pre>

<h3>2.常用接口</h3>

<p><strong>2.1.属性</strong></p>

<pre><code>//获得当前运行场景，cocos2dx同时只能运行一个场景  
CCScene* getRunningScene(void);  

//获取fps  
double getAnimationInterval(void);  
//设置fps  
virtual void setAnimationInterval(double dValue);  

//是否显示fps  
bool isDisplayStats(void);  
//设置是否显示fps  
void setDisplayStats(bool bDisplayStats);  

//每帧秒数  
float getSecondsPerFrame();  

//获取openGLView  
CCEGLView* getOpenGLView(void);  
//设置openGLView  
void setOpenGLView(CCEGLView *pobOpenGLView);  

//释放暂停  
bool isPaused(void);  

//获取调用到现在的所有帧数  
unsigned int getTotalFrames(void);  

//是否接收到cleanup事件，replace会，而push不会  
bool isSendCleanupToScene(void);  
</code></pre>

<p><strong>2.2.窗口</strong></p>

<pre><code>//返回openGLView的大小，单位为点  
CCSize getWinSize(void);  

//返回openGLView的大小，单位为像素  
CCSize getWinSizeInPixels(void);  

//返回可见区域的大小，单位为点，如果没调用setDesignResolutionSize，就和getWinSize是一样的  
CCSize getVisibleSize();  

//返回可见区域的原点  
CCPoint getVisibleOrigin();  

//将UIKit坐标体系转换成OpenGL坐标体系  
CCPoint convertToGL(const CCPoint&amp; obPoint);  

//将OpenGL坐标体系转换成UIKit坐标体系
CCPoint convertToUI(const CCPoint&amp; obPoint);  
</code></pre>

<p><strong>2.3.场景管理</strong></p>

<pre><code>//调用第一个场景，当前不能有场景运行  
void runWithScene(CCScene *pScene);  

//场景入栈，当前必须有场景  
void pushScene(CCScene *pScene);  

//场景出栈，删除当前场景，当前必须有场景  
void popScene(void);  

//弹出所有场景，直至根场景  
void popToRootScene(void);  

//弹出至指定场景  
void popToSceneStackLevel(int level);  

//用新场景替代旧场景  
void replaceScene(CCScene *pScene);  

//结束运行，释放场景，必须手动调用  
void end(void);  

//暂停场景  
void pause(void);  

//恢复场景  
void resume(void);  

//暂停所有动画  
virtual void stopAnimation(void);  

//开始所有动画  
virtual void startAnimation(void);  
</code></pre>

<p><strong>2.4.内存和OpenGL</strong></p>

<pre><code>//移除所有cocos2dx缓冲数据  
void purgeCachedData(void);  

//设置默认值  
void setDefaultValues(void);  

//设置OpenGL默认值  
void setGLDefaultValues(void);  

//开关OpenGL alpha混合通道  
void setAlphaBlending(bool bOn);  

//设置景深测试  
void setDepthTest(bool bOn);  
</code></pre>

<h3>3.CCDisplayLinkDirector</h3>

<p>CCDisplayLinkDirector继承于CCDirector，它实现了mainloop函数，是一个以显示刷新速度同步定时器的Director，也就是可以自动刷新的导演类，它支持60，30，15三种帧数。我们平时使用的也就是它。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之四】cocos2d-x怎么实现跨平台]]></title>
    <link href="http://www.jacky.tk/blog/2013/10/11/play-cocos2dx-04/"/>
    <updated>2013-10-11T21:23:00+08:00</updated>
    <id>http://www.jacky.tk/blog/2013/10/11/play-cocos2dx-04</id>
    <content type="html"><![CDATA[<p>原创作品，转载请标明：<a href="http://blog.csdn.net/jackystudio/article/details/12610287">http://blog.csdn.net/jackystudio</a></p>

<p>cocos2d-x到底是怎样实现跨平台的呢？这里以Win32和Android为例。</p>

<h3>1.跨平台项目目录结构</h3>

<p>先看一下一个项目创建后的目录结构吧！这还是以HelloCpp为例。</p>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_04/1.jpg" alt="" border="0" title="跨平台项目目录结构" /><br></br></div>


<!-- more -->


<p>从左边目录可以看到，Classes和Resource已经平台无关了，而Classes中包含了AppDelegate类，因此我们可以认为AppDelegate是与平台最接近的类，在它以上就要区分平台了。</p>

<h3>2.Win32下的实现</h3>

<p>在前一篇就介绍了Win32怎么开始cocos2dx，Win32平台下main.cpp就是程序入口：</p>

<pre><code>int APIENTRY _tWinMain(HINSTANCE hInstance,  
   HINSTANCE hPrevInstance,  
   LPTSTRlpCmdLine,  
   int   nCmdShow)  
{  
    UNREFERENCED_PARAMETER(hPrevInstance);  
    UNREFERENCED_PARAMETER(lpCmdLine);  

    // create the application instance  
    AppDelegate app;//创建应用实例  
    CCEGLView* eglView = CCEGLView::sharedOpenGLView();  
    eglView-&gt;setViewName("HelloCpp");  
    eglView-&gt;setFrameSize(2048, 1536);  
    eglView-&gt;setFrameZoomFactor(0.4f);  
    return CCApplication::sharedApplication()-&gt;run();//运行程序  
}  
</code></pre>

<p>Win32下的实现比较简单，就是正常的创建实例，运行就可以了。</p>

<h3>3.Android下的实现</h3>

<p><strong>3.1.cocos2d-x程序入口</strong></p>

<p>我们先看一下Android下cocos2d-x程序入口点在哪，我们知道Android是采用Java编写的，而cocos2d-x是c++编写的，所以如果要在Java中调用c++代码，那就需要采用JNI技术，看起来好像高端大气上档次，其实程序就是函数调用，也就是输入→处理→输出，所以JNI实际上简单抽象出来就这么回事：</p>

<p>java输入→Jni→c++输入→c++处理（API实现）→c++输出→Jni→java输出</p>

<p>在\proj.android\jni\hellocpp文件夹下可以找到main.cpp，这就是cocos2d-x的入口：</p>

<pre><code>jint JNI_OnLoad(JavaVM *vm, void *reserved)  
{  
    JniHelper::setJavaVM(vm);  

    return JNI_VERSION_1_4;  
}  

void Java_org_cocos2dx_lib_Cocos2dxRenderer_nativeInit(JNIEnv*  env, jobject thiz, jint w, jint h)  
{  
    if (!CCDirector::sharedDirector()-&gt;getOpenGLView())  
    {  
        CCEGLView *view = CCEGLView::sharedOpenGLView();  
        view-&gt;setFrameSize(w, h);  

        AppDelegate *pAppDelegate = new AppDelegate();  
        CCApplication::sharedApplication()-&gt;run();  
    }  
    else  
    {  
        ccGLInvalidateStateCache();  
        CCShaderCache::sharedShaderCache()-&gt;reloadDefaultShaders();  
        ccDrawInit();  
        CCTextureCache::reloadAllTextures();  
        CCNotificationCenter::sharedNotificationCenter()-&gt;postNotification(EVENT_COME_TO_FOREGROUND, NULL);  
        CCDirector::sharedDirector()-&gt;setGLDefaultValues();   
    }  
}
</code></pre>

<p>里面包含了2个函数，JNI_OnLoad和Java_org_cocos2dx_lib_Cocos2dxRenderer_nativeInit。我们看一下功能而先不管它在哪里被调用。</p>

<p><em>（1）JNI_OnLoad，</em>这个函数主要是用来高速Android VM当前使用的是什么版本是Jni，如果不提供此函数，则默认使用Jni1.1版本。</p>

<p><em>（2）Java_org_cocos2dx_lib_Cocos2dxRenderer_nativeInit，</em>这个函数很明显就是运行一个cocos2d-x的应用实例了，这和Win32是一样的，当然它多了一个openGlView的检测。一旦调用了它那么cocos2d-x游戏启动。
接下来再看看它们是在哪里被调用的。</p>

<p><strong>3.2.JNI_OnLoad的调用</strong></p>

<p>在proj.android\src\org\cocos2dx\hellocpp目录下，可以看到Android的入口Activity，也就是HelloCpp，它继承自Cocos2dxActivity。</p>

<pre><code>public class HelloCpp extends Cocos2dxActivity{  

    protected void onCreate(Bundle savedInstanceState){  
    super.onCreate(savedInstanceState);  
    }  

static {  
     System.loadLibrary("hellocpp");  
    }  
}  
</code></pre>

<p>很简单的代码，因为功能都被封装到Cocos2dxActivity中了，所以OnCreate中调用了父类的OnCreate就把功能都实现了，而system.LoadLibrary就是载入编译出来的.so文件，此时就会执行JNI_OnLoad。</p>

<p><strong>3.3.Java_org_cocos2dx_lib_Cocos2dxRenderer_nativeInit的调用</strong></p>

<p>那最重要的Java_org_cocos2dx_lib_Cocos2dxRenderer_nativeInit是在哪调用呢？这就比较麻烦了，先大致了解一下Cocos2dxActivity做了一些什么事。</p>

<p>直接进入Cocos2dxActivity的OnCreate函数，它调用了一个init初始化函数：</p>

<pre><code>public void init() {  

    // 设置布局，是一个FrameLayout  
    ViewGroup.LayoutParams framelayout_params =  
    new ViewGroup.LayoutParams(ViewGroup.LayoutParams.FILL_PARENT,  
                                   ViewGroup.LayoutParams.FILL_PARENT);  
    FrameLayout framelayout = new FrameLayout(this);  
    framelayout.setLayoutParams(framelayout_params);  

    // 设置Cocos2dxEditText布局，这一个跟GLSurfaceView兼容的edittext  
    ViewGroup.LayoutParams edittext_layout_params =  
    new ViewGroup.LayoutParams(ViewGroup.LayoutParams.FILL_PARENT,  
                               ViewGroup.LayoutParams.WRAP_CONTENT);  
    Cocos2dxEditText edittext = new Cocos2dxEditText(this);  
    edittext.setLayoutParams(edittext_layout_params);  

    // 添加到framelaout  
    framelayout.addView(edittext);  

    // 创建Cocos2dxGLSurfaceView  
    this.mGLSurfaceView = this.onCreateView();  

    // 添加到framelaout  
    framelayout.addView(this.mGLSurfaceView);  

    // Switch to supported OpenGL (ARGB888) mode on emulator  
    if (isAndroidEmulator())  
       this.mGLSurfaceView.setEGLConfigChooser(8 , 8, 8, 8, 16, 0);  

    //设置Cocos2dxRenderer和Cocos2dxEditText  
    this.mGLSurfaceView.setCocos2dxRenderer(new Cocos2dxRenderer());  
    this.mGLSurfaceView.setCocos2dxEditText(edittext);  

    // 设置framelayout作为内容视图  
    setContentView(framelayout);  
} 
</code></pre>

<p>在这里Cocos2dxActivity做的就是创建Cocos2dxGLSurfaceView，并设置了Cocos2dxRenderer和Cocos2dxEditText，然后添加到FramLayout。具体的各部分实现这里就不贴代码了，画了个图：</p>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_04/2.jpg" alt="" border="0" title="Android调用流程" /><br></br></div>


<p>好了，就这样吧。因为我对Android界面开发，特别是OpenGLView这块也不熟，所以只能大概推出是这样子了，有什么错误，还请指出。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之三】cocos2d-x游戏是怎么跑起来的]]></title>
    <link href="http://www.jacky.tk/blog/2013/10/10/play-cocos2dx-03/"/>
    <updated>2013-10-10T10:01:00+08:00</updated>
    <id>http://www.jacky.tk/blog/2013/10/10/play-cocos2dx-03</id>
    <content type="html"><![CDATA[<p>原创作品，转载请标明：<a href="http://blog.csdn.net/jackystudio/article/details/12554167">http://blog.csdn.net/jackystudio</a></p>

<p>虽然cocos2d-x v3.0 alpha版已经出来了，也改进了不少，有兴趣的可以去尝尝鲜。因为后面可能还会配合cocoStudio写一下博客，而现在v1.0.0.0版本需要配合cocos2d-x v2.2.0使用。所以这里选择了V2.2.0版的cocos2d-x。</p>

<p>一个新的东西，从头开始吧！从HelloWorld出发看一下一个cocos2d-x游戏是怎么跑起来的。先看看它的结构。</p>

<!-- more -->




<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_03/1.jpg" alt="" border="0" title="结构" /><br></br></div>


<h3>1.main函数</h3>

<p>还是原来配方还是熟悉的味道。。。霸气的main函数依然是程序的入口点：</p>

<pre><code>//main.cpp  
int APIENTRY _tWinMain(HINSTANCE hInstance,  
   HINSTANCE hPrevInstance,  
   LPTSTRlpCmdLine,  
   int   nCmdShow)  
{  
UNREFERENCED_PARAMETER(hPrevInstance);//该宏用于通知编译器不用检测变量是否使用，如果你喜欢用LV4级的警告。  
UNREFERENCED_PARAMETER(lpCmdLine);  

// create the application instance  
AppDelegate app;//创建AppDelegate实例  
CCEGLView* eglView = CCEGLView::sharedOpenGLView();//获取CCEGLView的单一实例，因为还未创建，所以这里会进行创建  
eglView-&gt;setViewName("HelloCpp");//设置eglView属性  
eglView-&gt;setFrameSize(2048, 1536);  
eglView-&gt;setFrameZoomFactor(0.4f);  
return CCApplication::sharedApplication()-&gt;run();//调用run运行程序  
} 
</code></pre>

<p>其中：</p>

<p>（1）AppDelegate继承于CCApplication，是整个游戏的程序类，如果有用过MFC的就很清楚，类似于CxxxApp。</p>

<p>（2）CCEGLView封装了使用openGL作为显示底层API的一个基本的Windows窗体的创建和控制。
可以简单的认为，一个控制了程序的逻辑，而另一个负责游戏的显示。</p>

<h3>2.CCEGLView类</h3>

<p>我们先看看上一步的CCEGLView::sharedOpenGLView()做了什么。</p>

<pre><code>CCEGLView* CCEGLView::sharedOpenGLView()  
{
    if (s_pEglView == NULL)//s_pEglView是一个CCEGLView指针，静态成员变量  
    {  
        s_pEglView = new CCEGLView();  
        if(!s_pEglView-&gt;Create())//main中调用时，会执行这一步  
        {
            delete s_pEglView;  
            s_pEglView = NULL;  
        }
    }
return s_pEglView;  
}  
</code></pre>

<p>再看看，create做了什么</p>

<pre><code>//...  
m_hWnd = CreateWindowEx(   // 创建窗体  
WS_EX_APPWINDOW | WS_EX_WINDOWEDGE,// Extended Style For The Window  
kWindowClassName,// Class Name  
wszBuf,// Window Title  
WS_CAPTION | WS_POPUPWINDOW | WS_MINIMIZEBOX,// Defined Window Style  
0, 0,// Window Position  
1000,   // Window Width  
1000,   // Window Height  
NULL,// No Parent Window  
NULL,// No Menu  
hInstance,// Instance  
NULL );  
</code></pre>

<p>看到上面这一步了吧，使用Win32写过窗体的童鞋，就知道创建一个窗体需要哪些动作：</p>

<p><em>（1）填充窗口类结构WNDCLASS</em></p>

<p><em>（2）注册窗口</em></p>

<p><em>（3）创建窗口</em></p>

<p><em>（4）显示窗口</em>（这一步没有在CCEGLView中实现，而是在后面的CCApplication中实现，因为这里窗口的属性还没有进行设置）</p>

<p>一样的，创建一个cocos2d-x的win32窗口也是要经过这些步骤。具体的就看源码吧，这里不逐句解释了。就是要注意有个WinProc函数，是用于处理主窗口消息。</p>

<h3>3.CCApplication类</h3>

<p>我们再看看CCApplication::sharedApplication()&ndash;>run()执行的又是什么东西。</p>

<pre><code>int CCApplication::run()  
{  
    PVRFrameEnableControlWindow(false);  

    // Main message loop:  
    MSG msg;  
    LARGE_INTEGER nFreq;  
    LARGE_INTEGER nLast;  
    LARGE_INTEGER nNow;  

    QueryPerformanceFrequency(&amp;nFreq);//获取当前系统频率和计数  
    QueryPerformanceCounter(&amp;nLast);  

    // Initialize instance and cocos2d.  
    if (!applicationDidFinishLaunching())//虚函数，调用子类的重载，这里也会设置一些显示窗口的属性  
    {  
        return 0;  
    }  

    CCEGLView* pMainWnd = CCEGLView::sharedOpenGLView();获取CCEGLView的单一实例  
    pMainWnd-&gt;centerWindow();  
    ShowWindow(pMainWnd-&gt;getHWnd(), SW_SHOW);//这里显示窗口  

    while (1)//消息循环  
    {  
        if (! PeekMessage(&amp;msg, NULL, 0, 0, PM_REMOVE))  
        {  
            // 获取当前的计数  
            QueryPerformanceCounter(&amp;nNow);  

            // 判断时间流逝，是否该绘制下一帧  
            if (nNow.QuadPart - nLast.QuadPart &gt; m_nAnimationInterval.QuadPart)  
            {  
                nLast.QuadPart = nNow.QuadPart;  
                CCDirector::sharedDirector()-&gt;mainLoop();//渲染场景（清除显示设备，重绘场景）  
            }  
            else  
            {  
                Sleep(0);  
            }  
            continue;  
        }  

        if (WM_QUIT == msg.message)//获取退出消息，跳出循环  
        {  
            // Quit message loop.  
            break;  
        }  

        // 处理Windows消息  
        if (! m_hAccelTable || ! TranslateAccelerator(msg.hwnd, m_hAccelTable, &amp;msg))  
        {  
            TranslateMessage(&amp;msg);  
            DispatchMessage(&amp;msg);  
        }  
    }
    return (int) msg.wParam;  
}  
</code></pre>

<p>好了，解释的应该算比较清楚了，虽然没有每一个函数都进去。。。这里再总结一下：</p>

<p>（1）首先先获取当前系统的频率和计数。这是一个很大的值，所以用了一个LARGE_INTEGER型变量来存储。</p>

<p>（2）调用子类的applicationDidFinishLaunching()，执行进入程序后的一些初始化工作。</p>

<p>（3）获取CCEGLView单例，显示窗口。</p>

<p>（4）进入循环While(1)，重绘每一帧的场景。</p>

<p>好了，更多关于CCApplication的请看源码吧。</p>

<h3>4.AppDelegate类</h3>

<p>从上面的分析我们知道CCApplication::run()函数中会调用子类（AppDelegate）的applicationDidFinishLaunching函数，而这里也就是我们要设置窗口属性和运行游戏的地方了。</p>

<pre><code>bool AppDelegate::applicationDidFinishLaunching() {  
//第一次初始化导演，导演也是个单例类  
CCDirector* pDirector = CCDirector::sharedDirector();  

//获得CCEGLView单例，设置窗口属性和fps等等  
CCEGLView* pEGLView = CCEGLView::sharedOpenGLView();  

...  

// 创建场景  
CCScene *pScene = HelloWorld::scene();  

// 进入场景  
pDirector-&gt;runWithScene(pScene);  

return true;  
}  
</code></pre>

<p>好了，最后再总结成一张图，cocos2d-x游戏就是这么跑起来的~</p>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_03/2.jpg" alt="" border="0" title="结构" /><br></br></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之二】游戏和引擎构成]]></title>
    <link href="http://www.jacky.tk/blog/2013/10/09/play-cocos2dx-02/"/>
    <updated>2013-10-09T16:53:00+08:00</updated>
    <id>http://www.jacky.tk/blog/2013/10/09/play-cocos2dx-02</id>
    <content type="html"><![CDATA[<p>原创作品，转载请标明：<a href="http://blog.csdn.net/jackystudio/article/details/12432837">http://blog.csdn.net/jackystudio</a></p>

<h3>1.游戏构成</h3>

<p>我们以超级马里奥游戏作为蓝本来描述一下一个游戏的构成。</p>

<p>1.首先我们需要一个容器来放置游戏元素，每一个关卡都是一个容器，这叫场景。</p>

<p>2.蓝天白云，各种板砖水管，这些是布景，放置在关卡中，通过布景的叠加，构成了游戏的主要背景。</p>

<p>3.主角马里奥兄弟和各种小怪兽，这些叫精灵。这是游戏互动的主要元素。</p>

<!-- more -->


<p>4.马里奥可以走路，可以跳跃，可以发射子弹。这些是精灵的动作。</p>

<p>5.过关了，要进入下一关，这些需要幕后导演的控制。</p>

<p>以上几个部分，在cocos2dx中，分别叫做<strong>CCScene</strong>，<strong>CCLayer</strong>，<strong>CCSprite</strong>，<strong>CCAction</strong>，<strong>CCDirector</strong>。而这五个部分是构成游戏的最基本元素。</p>

<p>用一张图来看看它们的关系。</p>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_02/1.jpg" alt="" border="0" title="游戏构成" /><br></br></div>


<h3>2.引擎构成</h3>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_02/2.jpg" alt="" border="0" title="引擎构成" /><br></br></div>


<p>引擎目录的具体介绍如下：</p>

<p>（1）<em>cocos2dx</em>，cocos2d-x游戏引擎核心部分，存放了引擎源码。</p>

<p>（2）<em>CocosDenshion</em>，游戏声音引擎主要文件。</p>

<p>（3）<em>Debug.win32</em>，Release.win32，win32下的项目debug/release目录。</p>

<p>（4）<em>document</em>，帮助文档目录，可以用doxygen生成项目文档。</p>

<p>（5）<em>extensions</em>，引擎扩展包，包含了一些本地存储类，网络传输类，GUI类等等。</p>

<p>（6）<em>external</em>，存放了Box2D，chipmunk物理引擎源码等第三方库。</p>

<p>（7）<em>licenses</em>，存放了一些许可文件。</p>

<p>（8）<em>plugin</em>，插件工具集，还包含了一些广告，微博调用示例。</p>

<p>（9）<em>projects</em>，开发者创建的项目。</p>

<p>（10）<em>samples</em>，引擎自带示例，目前支持C++，js和Lua。</p>

<p>（11）<em>scripting</em>，js和lua脚本的相关源文件。</p>

<p>（12）<em>template</em>，C++，js和Lua的各平台模版。</p>

<p>（13）<em>tools</em>，cocos2dx的工具集，创建项目也在里面。</p>

<p>（14）剩下一些各平台的编译文件，创建文件，以及cocos2dx的更新说明，作者说明等等。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之一】V2.2.0版本开发环境配置]]></title>
    <link href="http://www.jacky.tk/blog/2013/10/08/play-cocos2dx-01/"/>
    <updated>2013-10-08T16:18:00+08:00</updated>
    <id>http://www.jacky.tk/blog/2013/10/08/play-cocos2dx-01</id>
    <content type="html"><![CDATA[<p>原创作品，转载请标明：<a href="http://blog.csdn.net/jackystudio/article/details/12419387">http://blog.csdn.net/jackystudio</a></p>

<p>现在cocos2d-x处在上升期，各个版本的变化还是比较大的，单从环境配置来看，从v2.0到v2.2就变化了不少。今天配置了一下V2.2.0环境，创建项目，并进行交叉编译，发现比之前麻烦了不少。这里稍微记录一下。
3.0版本出来了，大概看了下目录和2.2的差不多，环境配置也基本一样。</p>

<h3>1.VS，VA，Cygwin，Java，Eclipse，ADT，SDK，NDK</h3>

<p>这里就不重复啰嗦这些了，<a href="http://blog.csdn.net/jackystudio/article/details/11516435">传送门</a>。不过这里需要使用VS2010以上版本。</p>

<p>这里强烈建议NDK版本为r8c或者r9，试过r7，r8都编译不过。。。</p>

<!-- more -->


<h3>2.安装cocos2d-x</h3>

<p>这里使用的是V2.2.0版本，<a href="http://www.cocos2d-x.org/download">传送门</a>，下载完解压即可，运行build-win32.bat进行编译。</p>

<h3>3.配置python</h3>

<p>因为之前没用过python，而现在cocos2d-x的项目创建已经取消了VS模版，改用python创建，所以相比之前用起来还是比较坑爹的。</p>

<p><strong>3.1.清除原有的VS模版</strong></p>

<p>如果之前安装过其他cocos2d-x版本，有可能在VS上会创建cocos2d-x的模版，就会造成在VS中新建项目的时候会创建旧版本的cocos2d-x模版，而使用的却是新版本的cocos2d-x引擎，导致编译出错，没注意的话还真不好找原因。</p>

<p>清除方法：</p>

<p><em>（1）进入目录，VS2010安装路径：</em></p>

<pre><code>VS2010: C:\Program Files\Microsoft Visual Studio 10.0\VC\vcprojects\  
VC2010Express: C:\Program Files\Microsoft Visual Studio 10.0\VC\Express\VCProjects. 
</code></pre>

<p><em>（2）删除cocos2d-x文件夹，删除以CCAppWiz和CCXAppWiz开头的两个文件，删除cocos2d-x的图标</em></p>

<p><strong>3.2.安装python</strong></p>

<p>我这里使用的是2.7.5版本，<a href="http://www.python.org/download/releases/2.7.5/">传送门</a>， Windows X86 msi installer。不同的python版本可能会导致后面运行出错。所以建议使用此版本。</p>

<p><strong>3.3.设置环境变量</strong></p>

<p>用过Java的都应该很熟了吧。</p>

<p>我的电脑→右键→属性→高级→环境变量→系统变量→path→加入你的python安装目录。测试一下：进入cmd，输入python，不会提示“不是外部或内部命令balabala&hellip;”就OK。</p>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_01/1.jpg" alt="" border="0" title="设置环境变量" /><br></br></div>


<h3>4.创建项目</h3>

<p>进入cocos2d-x-2.2.0\tools\project-creator目录，可以在cmd下执行：</p>

<p><code>python create_project.py -project Test -package com.jacky.test -language cpp//其中Test为工程名称，com.jacky.test为包名</code></p>

<p>也可以创建一个批处理文件.bat，放在project-creator目录下，内容为：</p>

<pre><code>@echo off  
set /p projectName=请输入项目名称：  
if "%projectName%"=="" goto inputError  
set /p packageName=请输入包标示名：  
if "%packageName%"=="" goto inputError  
create_project.py -project %projectName% -package %packageName% -language cpp  
pause  
exit  
:inputError  
@echo 项目名称或者包标示名不能为空！  
pause  
</code></pre>

<p>双击运行它就可以了。效果如下：</p>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_01/2.jpg" alt="" border="0" title="创建项目" /><br></br></div>


<p>然后在cocos2d-x目录下的project就可以看到Test文件夹，里面包含了各个平台的项目。</p>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_01/3.jpg" alt="" border="0" title="各平台项目" /><br></br></div>


<h3>5.导入eclipse，生成apk</h3>

<p><strong>5.1.使用Eclipse NDK交叉编译</strong></p>

<p>这里可以直接采用Eclipse NDK来交叉编译，具体方法为：</p>

<p>（1）导入proj.android项目。</p>

<p>（2）拷贝cocos2dx目录\cocos2dx\platform\android\java\src目录下的org包到android项目的src下。</p>

<p>（3）修改项目属性C/C++ builder的build command和build directory。分别为NDK目录下的ndk-builder和当前项目文件夹。</p>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_01/4.jpg" alt="" border="0" title="设置C++ build" /><br></br></div>


<p>（4）添加C/C++→Builder→Environment→NDK_MODULE_PATH，值为cocos2dx目录和cocos2dx目录\cocos2dx\platform\third_party\android\prebuilt。</p>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_01/5.jpg" alt="" border="0" title="设置NDK_MODULE_PATH" /><br></br></div>


<p>（5）build project ，run as andorid app即可。如果出错，clean一下。不过运行的时候程序出现了Fatal signal 11 (SIGSEGV) at 0x00000000 (code=1)异常，原因还没找到。。。有知道的吱一声。。。（先用Cygwin编译一次再到Eclipse中编译就可以了。真心不知道差别在哪。）</p>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_01/6.jpg" alt="" border="0" title="Eclipse编译" /><br></br></div>


<p><strong>5.2.Cygwin编译</strong></p>

<p>这个请参见<a href="http://blog.csdn.net/jackystudio/article/details/11516435">传送门</a>。编译完成后导入Eclipse即可。</p>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_01/7.jpg" alt="" border="0" title="CygWin编译" /><br></br></div>


<p>如果提示需要定义NDK_ROOT，那么在cygwin安装目录\home\username.bash_profile文件末尾添加：</p>

<pre><code>NDK_ROOT=/cygdrive/d/eclipse/android-ndk-r9  
export NDK_ROOT   
</code></pre>

<h3>6.本文环境</h3>

<p>（1）VS2010</p>

<p>（2）VA_X</p>

<p>（3）Cygwin</p>

<p>（4）Jdk1.7.0_11</p>

<p>（5）Eclipse Juno</p>

<p>（6）Andorid SDK2.2</p>

<p>（7）Adroid-ndk-r9</p>

<p>（8）cocos2dx-2.2.0</p>
]]></content>
  </entry>
  
</feed>
