<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jacky's Blog]]></title>
  <link href="http://fusijie.github.io/atom.xml" rel="self"/>
  <link href="http://fusijie.github.io/"/>
  <updated>2015-05-05T23:37:15+08:00</updated>
  <id>http://fusijie.github.io/</id>
  <author>
    <name><![CDATA[FuSijie]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[(译)第三部分：什么是rebase?]]></title>
    <link href="http://fusijie.github.io/blog/2014/11/18/what-is-a-rebase/"/>
    <updated>2014-11-18T23:44:00+08:00</updated>
    <id>http://fusijie.github.io/blog/2014/11/18/what-is-a-rebase</id>
    <content type="html"><![CDATA[<h3>内容提要</h3>

<ul>
<li>第一部分：<a href="http://fusijie.github.io/blog/2014/10/08/what-is-a-commit-hash/">commit hash是什么？</a></li>
<li>第二部分：<a href="http://fusijie.github.io/blog/2014/10/15/what-is-a-merge/">merge是什么？</a></li>
<li>第三部分：rebase是什么？</li>
</ul>


<p>在<a href="http://fusijie.github.io/blog/2014/10/08/what-is-a-commit-hash/">第一部分</a>中，我们讨论了什么是commit hash，其中一个很重要的特点就是commit无法被修改。hash值是根据存储在commit中的信息生成的，所以修改一个commit或者commit hash，你必须要创建一个全新的commit。我们还讨论了每一个commit存储了它的前一个commit的hash值。我们所没有讨论的是它对我们Git历史的影响。</p>

<!-- more -->


<p>实际上，commit hash是基于他们本身存储的信息生成的，而这些信息其中就包含了前一个commit的hash值，所以想修改你的commit历史基本上是不可能的。每一个commit就像是链条上的一环，紧紧连接着上一环。</p>

<p><img src="http://i.imgur.com/cXvBMnk.png" alt="" /></p>

<p>如果你有如上图一样的一条金属链，在不打断他们的前提下是不可能把前一环和后一环连接起来的。然而，在Git环境中这将会更糟。这样的类比在这里是不靠谱的，因为在一条金属链上你可以焊接一个新环来把前一环和后一环重新连接起来。但是在Git中，你无法做到这一点。</p>

<p>如果你想要在commit历史的中间删除某一个commit，那后一个commit将会指向一个不存在的commit hash。因为你无法在不改变hash的情况下来修改commit，所以你不能简单地生成一个新的commit来引用前一个commit，而后一个commit仍然引用了最原始的commit hash。</p>

<p>如果你改变了一个commit的某个属性，那生成的hash值将不再一样，后一个commit也不会引用到新的commit。结果就是你不得不去修改后一个commit来引用到新的commit hash，这同样会引起commit hash的改变，就这样一路下去直到链条的末尾。</p>

<p>这时候轮到<a href="http://git-scm.com/docs/git-rebase">rebase</a>上场了。如果你还记得<a href="http://fusijie.github.io/blog/2014/10/15/what-is-a-merge/">第二部分</a>，当我们将<code>feature1</code>分支合并到<code>master</code>分支后，有一副图展示了各个commit之间的关系。</p>

<p><img src="http://i.imgur.com/S0av3NM.png" alt="" /></p>

<p>Merge可以很好地工作，但是伴随着所有的fork和横纵交叉的commit关系，Git仓库的图形很快就会失控。下图只是一个我平时工作的Git仓库的小片段。</p>

<p><img src="http://i.imgur.com/z28Y4sX.png" alt="" /></p>

<p>如果你使用一个Git GUI软件，很有可能你也见识过类似的东西。Merge是在不同分支之间移动差异的最简单的方式，因为它避免了破坏commit历史和所引发的蛋疼。然而，一旦你对rebase的工作方式有了比较深刻的理解，你将会从中收益。举个栗子，如果我们在demo仓库中rebase <code>feature1</code>分支到<code>master</code>分支(译者注：这句话的意思是切换到<code>feature1</code>分支，执行<code>git rebase master</code>命令)，将会得到一个非常漂亮干净的历史，如图：</p>

<p><img src="http://i.imgur.com/pBvTytu.png" alt="" /></p>

<p>注意到没？现在的历史是一条直线了。Git到底是怎么做到的呢？如果你还记得的话，我们的<code>Commit 3</code>和<code>Commit 4</code>是共享<code>Commit 2</code>作为其共同父节点的，<code>Commit 3</code>引用了<code>Commit 2</code>作为其前一个commit。现在你也许会疑惑为什么看起来<code>Commit 3</code>像是将<code>Commit 4</code>作为其前一个commit。</p>

<p>还记得我刚说过的，如果想从中间打断链条，你必须从这个点上开始重现创建其之后的commit，直到结尾。没错，这实际上就是rebase做的事情。</p>

<p><img src="http://i.imgur.com/1nPXWq1.png" alt="" /></p>

<p>仔细看的话，你会发现<code>Commit 3</code>，<code>Commit 5</code>，<code>Commit 6</code>的commit hash已经全部改变了。这3个commit是在<code>feature 1</code>分支上提交的。通过将<code>feature 1</code>分支rebase操作到<code>master</code>分支上，从<code>master</code>分支分叉出来的的第一个commit开始，git重写了<code>feature 1</code>所有的commit，直到结束。它将分之上的每一个commit之间的差异存储在一个临时文件中，然后开始重写我们的分支历史。而这一次，分支是从<code>master</code>，<code>Commit 4</code>开始的。</p>

<p>Git给分支上的每一个commit创建了一个新的commit，当然跟着修改的还有commit hash值。当它创建新的commit的时候，第一个commit被改为引用到<code>master</code>分支的最新的commit（<code>Commit 4</code>），而不是原来的（<code>Commit 2</code>）了。这个重新提交你的变更作为新的commit的流程被称为“你的commits在<code>master</code>分支上的重播”。</p>

<blockquote><p>注意：不要让术语混淆。Rebase到<code>master</code>分支不会修改<code>master</code>分支本身，它的意思是你的分支commits将会紧跟着<code>master</code>分支上最新的commits（译者注：这里的<code>你的分支</code>指的是<code>feature 1</code>）。</p></blockquote>

<p><img src="http://i.imgur.com/pBvTytu.png" alt="" /></p>

<p>你会注意到上图中<code>master</code>分支仍然指向<code>Commit 4</code>，它的commit hash值是没有改变的。如果我们现在切换到<code>master</code>分支，然后把<code>feature 1</code>分支合并到<code>master</code>分支，这将不会产生一个合并commit。这仅仅是一个快进提交，意思就是git将会简单地将指向<code>master</code>分支的指针笔直地移到指向<code>feature 1</code>分支的指针位置上。</p>

<p><img src="http://i.imgur.com/rLdDgw3.png" alt="" /></p>

<p>如果不把<code>feature 1</code>分支合并到<code>master</code>分支，我们还有更多的事要做，更多的commit要提交，我们可能会再fork一个仓库。我们的下一个<code>master</code>分支的commit将会指向<code>Commit 4</code>作为它的父节点，而<code>feature 1</code>分支的第一个commit也是指向<code>Commit 4</code>作为它的父节点。为了得到一条笔直的提交历史，我们需要再切换到<code>feature1</code>分支，然后再次rebase到<code>master</code>分支。这种情况很常出现，比如你在github上提交了一个pull request然后它过期了。如果项目的维护者没有合并你 的pull request，而是在这个项目上继续做一些其他工作，那么你的pull request就需要再来一次rebase操作以获取一个干净的git历史。把你做的工作rebase到原仓库分支上才可以让这个pull request能够在合并进去的时候采用简单的快进方式。接受一个pull request只是一个简单的合并。如果在提交pull request之前就rebase了你做的工作，那么这个merge就是一个快进方式的merge，这也能保证原仓库的干净。（译者注：这里的<code>干净</code>指的是没有额外的合并信息。）</p>

<h4>危险！！！</h4>

<p>这部分内容是对rebase的使用进行一些警告，主要还是在多人协作上需要注意。因为rebase是一种改写commit的操作，所以相对比较危险，作者给出的意见是：</p>

<blockquote><p>Undoing a rebase is not easy, and often impossible so you really need to pay attention to what you&rsquo;re doing. The benefits of rebasing are great, but not if you don&rsquo;t know what you&rsquo;re doing.</p></blockquote>

<p>撤销一个rebase操作不简单，而且经常是不可能的。你必须很注意自己在干什么。rebase让人受益，当时如果你不知道你在干什么的话，别用reabse。</p>

<p>这部分内容不翻译了，有兴趣自己看原文吧。</p>

<blockquote><p>英文地址:<a href="http://codetunnel.com/merge-vs-rebase-part-3-what-is-a-rebase/">http://codetunnel.com/merge-vs-rebase-part-3-what-is-a-rebase/</a></p></blockquote>

<p class='post-footer'>&nbsp;原文地址：<a href='http://fusijie.github.io/blog/2014/11/18/what-is-a-rebase/'>http://fusijie.github.io/blog/2014/11/18/what-is-a-rebase/</a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(译)第二部分：什么是merge?]]></title>
    <link href="http://fusijie.github.io/blog/2014/10/15/what-is-a-merge/"/>
    <updated>2014-10-15T00:03:00+08:00</updated>
    <id>http://fusijie.github.io/blog/2014/10/15/what-is-a-merge</id>
    <content type="html"><![CDATA[<h4>内容提要</h4>

<ul>
<li>第一部分：<a href="http://fusijie.github.io/blog/2014/10/08/what-is-a-commit-hash/">commit hash是什么？</a></li>
<li>第二部分：merge是什么？</li>
<li>第三部分：<a href="http://fusijie.github.io/blog/2014/11/18/what-is-a-rebase/">rebase是什么？</a></li>
</ul>


<p>在<a href="http://fusijie.github.io/blog/2014/10/08/what-is-a-commit-hash/">第一部分</a>我们创建了一个小的demo仓库，它拥有着一个<code>feature1</code>分支，而且这个分支已经准备好要merge到<code>master</code>分支中了。</p>

<!-- more -->


<p><img src="http://i.imgur.com/kxDIgKl.png" alt="" /></p>

<p>此时，我们可以选择merge或者rebase <code>feature1</code>分支到<code>master</code>分支。关于rebase将会在<a href="http://fusijie.github.io/blog/2014/11/18/what-is-a-rebase/">第三部分</a>进行介绍。现在我们来看一下，采用merge的方式到底发生了什么。把分支合并到一起是非常直接的。首先需要将切换到要合并进去的分支，在这里，因为我们要将<code>feature1</code>合并到<code>master</code>分支，所以需要切换到<code>master</code>分支。</p>

<p><img src="http://i.imgur.com/S0av3NM.png" alt="" /></p>

<p>我切换到<code>master</code>分支，然后将<code>feature1</code>分支合并进去。回过头来再看一下这之中发生了什么，为什么Source Tree生成的图形是这个样子的。</p>

<p>还记得<a href="http://fusijie.github.io/blog/2014/10/08/what-is-a-commit-hash/">第一部分</a>中<code>Commit 3</code>和<code>Commit 4</code>引用着同一个先前commit吗？<code>Commit 2</code>是这两个commit共同的祖先，因为<code>Commit 3</code>是在另一个分支上创建的，而<code>Commit 4</code>是在<code>master</code>分支上创建的，所以它完全不知道<code>Commit 3</code>的存在。在<code>feature1</code>上我们添加了更多的commit。<code>Commit 5</code>直接引用了<code>Commit 3</code>，因为<code>Commit 4</code>只在<code>master</code>分支上有效，<code>Commit 6</code>直接引用了<code>Commit 5</code>。</p>

<p>当我们将<code>feature1</code>合并到<code>master</code>中，它并不是通过某种方式神奇地把这些commit都移到<code>master</code>分支上。实际上，它创建了一个包含了<code>feature1</code>分支上<strong>所有的</strong>变更的全新commit。这个commit叫<code>Merge branch 'feature1'</code>，就像这样：</p>

<p><img src="http://i.imgur.com/RECAHy7.png" alt="" /></p>

<p>如果你注意到上图中的commit差异，就会看到我添加到<code>index.txt</code>中二了吧唧的这几行。你应该会注意到这几行是通过各个commit分开地添加进去的。然而，现在你看到的是所有的这些改变都在单一的一个差异中。</p>

<p>Git所做的只是把<code>feature1</code>中所有的commit的所有差异汇聚到一个单一的commit中。这个新的commit干了一些我们之前没有讨论过的事。从上图可以看到它拥有2个祖先，也就拥有着从<code>Commit 4</code>和<code>Commit 6</code>过来的两条线。为什么呢？commit可以保存多个先前commit的索引。我现在才来讲这个话题是因为我不想太早地引起混淆。</p>

<p>当一个commit被创建的时候，它所引用的之前commit数量可以是一个，多个，甚至没有。通常只有仓库中第一个commit才会没有先前commit，而merge commit一般都拥有超过一个的先前commit。</p>

<p>如果你还记得<a href="http://fusijie.github.io/blog/2014/10/08/what-is-a-commit-hash/">第一部分</a>的话，分支，其实实际上只是一个指向一个指定commit的指针而已。</p>

<p><img src="http://i.imgur.com/S0av3NM.png" alt="" /></p>

<p>你可能会注意到<code>feature1</code>仍然指向了<code>Commit 6</code>，而<code>master</code>分支指向了新的merge commit，很简单，因为我们是将<code>feature1</code> 合并到<code>master</code>。如果我们将分支切换到<code>feature1</code>，然后再把<code>master</code>合并进来，那么Git所做的就是一个<em>fast-forward</em> marge（快进合并），这会把<code>feature1</code>的指针指向最新的commit。</p>

<p><img src="http://i.imgur.com/Ggvb3UK.png" alt="" /></p>

<p>如果我们完全删除了<code>feature1</code>分支，你可能会以为粉色的线消失，但是你错了。</p>

<p><img src="http://i.imgur.com/rcSSPFa.png" alt="" /></p>

<p>记住，Source Tree和其他的Git可视工具是通过遍历你的commit，用索引的commit hash连接各个commit来生成图形的。分支只是一个指向指定commit的指针。当你从一个远程仓库拉取更新（pull）时，Git所做的是：</p>

<ul>
<li>1.下载所有你本地机器上没有的commit</li>
<li>2.合并丢失的commit到你的本地仓库，或是通过一个merge commit，或是通过一个<em>fast-forward</em> merge，前提是你在最后一次拉取更新后没有做任何的修改。</li>
<li>3.把你的本地分支指向最新的commit。</li>
</ul>


<p>如果你曾经混淆过<code>master</code>和<code>origin/master</code>指针，那现在你应该知道它们是是啥了。<code>origin/master</code>告诉你你的<code>origin</code>远程<code>master</code>分支指向哪。如果我给这个demo仓库添加了一个远程仓库叫<code>origin</code>，然后在本地仓库上做了一些commit，Git的历史可能会像这样：</p>

<p><img src="http://i.imgur.com/hSizNJB.png" alt="" /></p>

<p>你会看到<code>master</code>分支指向了最新的commit，而<code>origin/master</code>指向了前一个merge commit。Source Tree甚至提示我们说有一个commit可以推送（push）到远程仓库。如果我们推送上去，Git将会上传丢失的commit，然后更新你的远程分支指针，此时<code>origin/master</code>已经和你的本地<code>master</code>分支指向了相同的commit。</p>

<p><img src="http://i.imgur.com/pmyLiFb.png" alt="" /></p>

<p>希望你现在对Git的合并功能有了更好的理解。跳到<a href="">第三部分</a>让我们深究下rebase，看看它和merge有什么区别吧唧。</p>

<blockquote><p>英文地址:<a href="http://codetunnel.com/merge-vs-rebase-part-2-what-is-a-merge/">http://codetunnel.com/merge-vs-rebase-part-2-what-is-a-merge/</a></p></blockquote>

<p class='post-footer'>&nbsp;原文地址：<a href='http://fusijie.github.io/blog/2014/10/15/what-is-a-merge/'>http://fusijie.github.io/blog/2014/10/15/what-is-a-merge/</a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(译)第一部分：什么是commit hash?]]></title>
    <link href="http://fusijie.github.io/blog/2014/10/08/what-is-a-commit-hash/"/>
    <updated>2014-10-08T22:25:00+08:00</updated>
    <id>http://fusijie.github.io/blog/2014/10/08/what-is-a-commit-hash</id>
    <content type="html"><![CDATA[<h4>内容提要</h4>

<ul>
<li>第一部分：commit hash是什么？</li>
<li>第二部分：<a href="http://fusijie.github.io/blog/2014/10/15/what-is-a-merge/">merge是什么？</a></li>
<li>第三部分：<a href="http://fusijie.github.io/blog/2014/11/18/what-is-a-rebase/">rebase是什么？</a></li>
</ul>


<p>最近一段时间我在学习如何使用<a href="http://git-scm.com/">Git</a>，碰到的一个难点：如何区别<a href="http://git-scm.com/docs/git-merge">merge</a>和<a href="http://git-scm.com/docs/git-rebase">rebase</a>？大部分人都能理解merge的概念，但是对于rebase就不是很清楚了。在这三篇博文中我将尽可能用最简单的方式来解释它们的异同。不过在此之前，我们需要先了解一下什么是commit hash。</p>

<!-- more -->


<p>如果你看过自己的commit历史，那么对于下面的内容肯定不会陌生：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>commit a9ca2c9f4e1e0061075aa47cbb97201a43b0f66f 
</span><span class='line'>Author: Alex Ford 
</span><span class='line'>Date: Mon Sep 8 6:49:17 2014
</span><span class='line'>
</span><span class='line'>Initial commit.</span></code></pre></td></tr></table></div></figure>


<p>你也许会认为这个由字母和数字组成的长长的字符串是一个单独commit的唯一的ID。虽然你是对的，但是你可能不知道它是一个<a href="http://en.wikipedia.org/wiki/SHA-1">SHA-1</a>生成的哈希码，用于表示一个git commit对象。如果不去深入理解git <a href="http://git-scm.com/book/en/Git-Internals-Git-Objects#Commit-Objects">commit object</a>，那顶多就只知道这是一个基于它所表示的信息直接生成的一个很大的加密字符串。改变一个commit hash的唯一方式就是改变commit的细节，本质上来说，其实是生成了一个全新的commit对象。</p>

<p>除了一些明显的信息，比如commit的作者，时间，存储的数据，commit通常还包含了在它之前的一个commit的hash，这正是你的commit历史产生的原因。每一个commit都知道紧跟它之前的commit hash。</p>

<p><img src="http://i.imgur.com/mljhFlh.png" alt="" /></p>

<p>上图可以看到我的<a href="https://www.atlassian.com/software/sourcetree/overview">SourceTree</a>窗口，打开了一个我创建的demo仓库。我做了3次commit。SourceTree相当智能，它可以读取仓库中的每一个commit，然后用图形的方式展现出commit历史。可以看到，<code>Commit 2</code>直接引用了<code>Commit 1</code>，而<code>Commit 1</code>直接引用了<code>Commit 0</code>。需要注意的是，在这里，我直接使用Commit字样作为commit描述，为的是尽可能简单地谈论这个话题。实际上，每一个commit信息都应该正确地描述它们所做的改变。</p>

<p>因为我的demo仓库master分支上只包含了这3个commit，所以SourceTree的图形从头到尾就是一条简单直线。好，现在我们就做点稍微复杂一点的事情，为了一个新的功能，我们需要创建一个独立的分支。</p>

<p><img src="http://i.imgur.com/S5o9qWL.png" alt="" /></p>

<p>从上图可以看到我创建了一个叫<code>feature1</code>的分支，但是图形仍然是一样的。这是因为在创建完新的分支后，我并没有进行任何新的commit。分支实际上只是指向一个特殊commit的指针。现在，<code>master</code>和<code>feature1</code>都指向了同一个commit。好了，我们往<code>feature1</code>分支添加一个新的commit</p>

<p><img src="http://i.imgur.com/qjIWl7F.png" alt="" /></p>

<p>可以看到，我们的<code>feature1</code>分支移动了它的指针来指向一个新的commit，<code>Commit 3</code>。你可以看到，我们的图形<em>仍然</em>是一条简单的直线。这是因为到目前为止，仅有4个commit，而每一个commit都是引用了紧跟它的前一个commit。如果我现在将<code>feature1</code>合并到<code>master</code>，只会发生一件事，就是<code>master</code>分支会直接跳到和<code>feature1</code>指向的相同commit，也就是<code>Commit 3</code>。这个叫做<em>fast-forward</em>合并（快进合并），因为它只是简单地将<code>master</code>分支的移动到指向最新的commit。</p>

<p>OK，当我们兴高采烈地在<code>feature1</code>上赶工，突然老板一个电话说一个新的Bug需要被马上解决，这是重中之重。这需要暂停<code>feature1</code>上的工作，然后马上在<code>master</code>分支上修复bug并提交。这个时候，我们不得不切换到<code>master</code>分支，然后进行一个commit。如果bug很大，可能得考虑是否要创建另一个分支，然后在这个分支上进行多个commit，现在假装bug很小，只要一个commit就能搞定。</p>

<p><img src="http://i.imgur.com/8MFZLBi.png" alt="" /></p>

<p>好了，现在看起来就有点不一样了，请注意上图的图形，<code>feature1</code>分支上的<code>Commit 3</code>在自己封闭的路径上了。原因很简单，<code>Commit 4</code>和<code>Commit 3</code>有相同的祖先。还记得commit是如何存储紧跟它之前的commit吗？当切换到<code>master</code>分支的时候，我们将会返回到<code>Commit 2</code>，因为<code>Commit 3</code>只由<code>feature1</code>分支指针引用。而<code>master</code>分支指针仍然指向<code>Commit 2</code>。因为我们的修复commit（<code>Commit 4</code>）将<code>Commit 2</code>视为它的前一个commit。</p>

<p>现在的图形告诉我们，<code>Commit 4</code>和<code>Commit 3</code>同时都引用了<code>Commit 2</code>作为他的前一个commit。在这种情况下，可以将<code>Commit 2</code>视为<code>Commit 3</code>和<code>Commit 4</code>共有的祖先。现在我们的修复已经被提交了，所以可以回到<code>feature1</code>分支继续工作了。</p>

<p><img src="http://i.imgur.com/kxDIgKl.png" alt="" /></p>

<p>现在我在<code>feature1</code>分支上创建了2个新的commit，<code>Commit 5</code>和<code>Commit 6</code>。新功能已经完成了，也是时候合并<code>feature1</code>分支到<code>master</code>分支中了。这时，我们可以选择merge <code>feature1</code>分支到<code>master</code>分支，也可以reabse <code>feature1</code>分支到<code>master</code>分支，让我们在<a href="http://fusijie.github.io/blog/2014/10/15/what-is-a-merge/">第二部分</a>中探究一下merge是什么？</p>

<blockquote><p>英文地址:<a href="http://codetunnel.com/merge-vs-rebase-part-1-what-is-a-commit-hash/">http://codetunnel.com/merge-vs-rebase-part-1-what-is-a-commit-hash/</a></p></blockquote>

<p class='post-footer'>&nbsp;原文地址：<a href='http://fusijie.github.io/blog/2014/10/08/what-is-a-commit-hash/'>http://fusijie.github.io/blog/2014/10/08/what-is-a-commit-hash/</a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Smali和逆向分析]]></title>
    <link href="http://fusijie.github.io/blog/2014/09/08/smali-introduction/"/>
    <updated>2014-09-08T20:37:00+08:00</updated>
    <id>http://fusijie.github.io/blog/2014/09/08/smali-introduction</id>
    <content type="html"><![CDATA[<p>这篇文章其实2个月前就想写了，但并不好写，就懒得写了，所以拖到现在～其实接触smali这门语法是件蛮偶然的事，接触后发现，次奥，这货在某些领域太有用了，至于为什么我想看完这篇文章应该都明白了。</p>

<p>我自己也只是接触了皮毛，大概用了2个礼拜多一点，也不是很系统的学习，写这篇的目的主要还是想把知道的东西记下来，以后好追溯。</p>

<h3>1.Smali简介</h3>

<p>Smali是Dalvik的寄存器语言，它与Java的关系，简单理解就是汇编之于C。假如你对汇编有足够的驾驭能力，那你可以通过修改汇编代码来改变C/C++代码的走向。当然，学过汇编的都清楚，汇编比<a href="http://www.muppetlabs.com/~breadbox/bf/">BrainFuck</a>还难学，更不用说去反编译修改了。</p>

<p>但是Smali有一点不一样，就是它很简单，只有一点点的语法，只要你会java，了解Android的相关知识，那你完全可以通过修改Smali代码来反向修改java代码，虽然绕了一点，但是在某些情况下你不得不这么做。还好，Smali很简单。</p>

<!-- more -->


<h3>2.apktool</h3>

<p>说了这么多，还没有说Smali哪来？没错。Smali代码是安卓APK反编译而来的，所以Smali文件和Java文件一一对应。获取Smali文件，我们需要下载一个辅助工具：<a href="https://code.google.com/p/android-apktool/downloads/list">ApkTool</a>。apktool这个命令行工具如果详细使用功能参数是比较多的，但是这里我们只需要用到2个最基础的功能：</p>

<p>一个是反编译decode：</p>

<pre><code>apktool d xxx.apk
</code></pre>

<p>另一个是打包build：</p>

<pre><code>apktool b
</code></pre>

<p>这里要注意的是路径问题，apktool如果没有加入到环境变量中，记得cd到apktool的目录去使用它。另一个是打包，如果只是简单的使用参数b，那要求是要在反编译出来的项目目录下执行，而打包好的文件会保存在这个项目目录下的dist目录。</p>

<p>这是一个HelloWorld的应用程序反编译和打包的目录结构：</p>

<div align="center"><img src="http://www-fusijie-com.qiniudn.com/smali_Screen%20Shot%202014-09-08%20at%209.42.35%20PM.png" alt="" border="0" title="" /><br></br></div>




<div align="center"><img src="http://www-fusijie-com.qiniudn.com/smali_Screen%20Shot%202014-09-08%20at%209.43.37%20PM.png" alt="" border="0" title="" /><br></br></div>


<h3>3.Smali语法</h3>

<p>这里仍然以一个默认的HelloWorld的应用程序进行解释吧。新建一个HelloWorld安卓项目，在MainActivity中只保留onCreate函数。代码如下：</p>

<figure class='code'><figcaption><span>MainActivity.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">fusijie</span><span class="o">.</span><span class="na">helloworld</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kn">import</span> <span class="nn">android.app.Activity</span><span class="o">;</span>
</span><span class='line'>  <span class="kn">import</span> <span class="nn">android.os.Bundle</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>      <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p>反编译后的Smali文件如下：</p>

<figure class='code'><figcaption><span>MainActivity.smali</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='smali'><span class='line'><span class="k">    .class</span> <span class="k">public</span> <span class="kt">L</span>com/fusijie/helloworld/<span class="nc">MainActivity</span>;
</span><span class='line'><span class="k">  .super</span> <span class="kt">L</span>android/app/<span class="nc">Activity</span>;
</span><span class='line'><span class="k">  .source</span> <span class="s">&quot;MainActivity.java&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># direct methods</span>
</span><span class='line'><span class="k">  .method</span> <span class="k">public</span> <span class="k">constructor</span> <span class="nf">&lt;init&gt;</span><span class="p">()</span><span class="kt">V</span>
</span><span class='line'><span class="k">    .locals</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="k">    .prologue</span>
</span><span class='line'><span class="k">    .line</span> <span class="mi">14</span>
</span><span class='line'>    invoke-direct <span class="p">{</span><span class="nb">p0</span><span class="p">},</span> <span class="kt">L</span>android/app/<span class="nc">Activity</span>;<span class="p">-&gt;</span><span class="nf">&lt;init&gt;</span><span class="p">()</span><span class="kt">V</span>
</span><span class='line'>
</span><span class='line'>    return-void
</span><span class='line'>  <span class="p">.</span>end method
</span><span class='line'>
</span><span class='line'>  <span class="c"># virtual methods</span>
</span><span class='line'><span class="k">  .method</span> <span class="k">protected</span> <span class="nf">onCreate</span><span class="p">(</span><span class="kt">L</span>android/os/<span class="nc">Bundle</span>;<span class="p">)</span><span class="kt">V</span>
</span><span class='line'><span class="k">    .locals</span> <span class="mi">1</span>
</span><span class='line'><span class="k">    .parameter</span> <span class="s">&quot;savedInstanceState&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">    .prologue</span>
</span><span class='line'><span class="k">    .line</span> <span class="mi">18</span>
</span><span class='line'>    invoke-super <span class="p">{</span><span class="nb">p0</span><span class="p">,</span> <span class="nb">p1</span><span class="p">},</span> <span class="kt">L</span>android/app/<span class="nc">Activity</span>;<span class="p">-&gt;</span><span class="nf">onCreate</span><span class="p">(</span><span class="kt">L</span>android/os/<span class="nc">Bundle</span>;<span class="p">)</span><span class="kt">V</span>
</span><span class='line'>
</span><span class='line'><span class="k">    .line</span> <span class="mi">19</span>
</span><span class='line'>    const/high16 <span class="nb">v0</span><span class="p">,</span> <span class="mh">0x7f03</span>
</span><span class='line'>
</span><span class='line'>    invoke-virtual <span class="p">{</span><span class="nb">p0</span><span class="p">,</span> <span class="nb">v0</span><span class="p">},</span> <span class="kt">L</span>com/fusijie/helloworld/<span class="nc">MainActivity</span>;<span class="p">-&gt;</span><span class="nf">setContentView</span><span class="p">(</span><span class="kt">I</span><span class="p">)</span><span class="kt">V</span>
</span><span class='line'>
</span><span class='line'><span class="k">    .line</span> <span class="mi">20</span>
</span><span class='line'>    return-void
</span><span class='line'>  <span class="p">.</span>end method
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p>对比一下，可以比较清楚的看出来，smali代码其实就是对java代码一个翻译，只是没有java看起来那么简单，smali把很多应该复杂的东西还原成复杂的状态了。简单解释下这段代码。</p>

<ul>
<li>前三行指明了类名，父类名，和源文件名。</li>
<li>类名以“L”开头相信熟悉Jni的童鞋都比较清楚。</li>
<li>“#”是smali中的注释。</li>
<li>“.method”和“.end method”类似于Java中的大括号，包含了方法的实现代码段。</li>
<li>方法的括号后面指明了返回类型，这同样类似与Jni的调用。</li>
<li>“.locals”指明了这个方法用到的寄存器数量，当然寄存器可以重复利用，从“V0”起算。</li>
<li>“.prologue”指定了代码开始处。</li>
<li>“.line”表明这是在java源码中的第几行，其实这个值无所谓是多少，可以任意修改，主要用于调试。</li>
<li>“invoke-direct”这是对方法的调用，可以看到这里调用了是Android.app.Activity的init方法，这在java里是隐式调用的。</li>
<li>“return-void”表明了返回类型，这和java不一样，即使没有返回值，也需要这样写。</li>
<li>接下来是onCreate方法，“.parameter”指明了参数名，但是一般没有用，需要注意的是p0代表的是this，p1开始代表函数参数，静态函数没有this，所以从p0开始就代表参数。</li>
<li>在实现里先是调用了父类的方法，然后再调用setContentView，注意这里给了一个传参。整形的传参，这个值是先赋给寄存器v0，然后再调用的使用传递进去的。smali中都是这么使用，所有的值必须通过寄存器来中转。这点和汇编很像。</li>
</ul>


<p>对比了Java代码和Smali代码，可以很清楚的看到，原本只有几行的代码到了Smali，内容被大大扩充了。Smali还原了Java隐藏的东西，同时显式地指定了很多细节。这还只是个最基本的HelloWorld的onCreate函数，如果有内部类，还会分文件显示。</p>

<p>这样看来，其实Smali只能说复杂，不能说难。我这里不打算把Smali的语法再贴一次，这里给出几个链接，算是总结的相对好一点的（其实我都没看到有系统总结的。。。如果你有好的资料，欢迎跟帖分享）</p>

<ul>
<li><a href="http://liuzhichao.com/p/tag/smali">Smali语法&mdash;数据类型、方法、字段和寄存器</a></li>
<li><a href="http://book.2cto.com/201212/12468.html">Android软件安全与逆向分析&mdash;Smali文件格式</a></li>
<li><a href="http://blog.csdn.net/wdaming1986/article/details/8299996">Smali&mdash;Dalvik虚拟机指令语言</a></li>
<li><a href="http://bbs.pediy.com/showthread.php?t=151769">看雪论坛&mdash;关于Smali语法</a></li>
</ul>


<p>这里顺便提供2个利器：</p>

<ul>
<li><a href="http://liuzhichao.com/p/1476.html">Smali Sublime Text语法高亮插件</a></li>
<li><a href="https://code.google.com/p/dex2jar/">dex2jar，配合Smali事半功倍</a></li>
</ul>


<h3>4.小试牛刀</h3>

<p>了解了Smali的基本语法，那我们要动手试一下，Smali能做什么？仍然以HelloWorld为例，假如我们没有Android项目的源代码，只有一个APK，给他加个新功能吧！</p>

<p>这个功能很简单，只是在HelloWorld中输出一个“Hello, Smali”。</p>

<p>(1)第一步还是先使用apktool来反编译HelloWorld.apk。</p>

<p>(2)打开smali下的com/fusijie/helloworld/MainActivity.smali文件。</p>

<p>(3)原本我们在Java中要写的代码是：</p>

<figure class='code'><figcaption><span>Toast</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="s">&quot;Hello, Smali&quot;</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_LONG</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>翻译成Smali就是：</p>

<figure class='code'><figcaption><span>Toast</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='smali'><span class='line'><span class="k">    .line</span> xx
</span><span class='line'>    const-string <span class="nb">v0</span><span class="p">,</span> <span class="s">&quot;Hello, Smali&quot;</span>
</span><span class='line'>
</span><span class='line'>    const/4 <span class="nb">v1</span><span class="p">,</span> <span class="mh">0x1</span>
</span><span class='line'>
</span><span class='line'>    invoke-static <span class="p">{</span><span class="nb">p0</span><span class="p">,</span> <span class="nb">v0</span><span class="p">,</span> <span class="nb">v1</span><span class="p">},</span> <span class="kt">L</span>android/widget/<span class="nc">Toast</span>;<span class="p">-&gt;</span><span class="nf">makeText</span><span class="p">(</span><span class="kt">L</span>android/content/<span class="nc">Context</span>;<span class="kt">L</span>java/lang/<span class="nc">CharSequence</span>;<span class="kt">I</span><span class="p">)</span><span class="kt">L</span>android/widget/<span class="nc">Toast</span>;
</span><span class='line'>
</span><span class='line'>    move-result-object <span class="nb">v0</span>
</span><span class='line'>
</span><span class='line'>    invoke-virtual <span class="p">{</span><span class="nb">v0</span><span class="p">},</span> <span class="kt">L</span>android/widget/<span class="nc">Toast</span>;<span class="p">-&gt;</span><span class="nf">show</span><span class="p">()</span><span class="kt">V</span>
</span></code></pre></td></tr></table></div></figure>


<p>(4)最后在插入Smali的时候，我们需要修改2个地方：</p>

<ul>
<li>“.locals 1”，因为本来只用到了v0，现在多用了一个v1，所以改为“.locals 2”。</li>
<li>“.line xx” xx随意改为一个不重复的值即可。</li>
</ul>


<p>(5)使用apktool打包成apk，因为打包完后原有的密钥会丢失，所以需要重新打上我们自己的密钥，可以参考<a href="http://www.eoeandroid.com/forum.php?mod=viewthread&amp;tid=300764">很早以前我写的一个帖子</a>。</p>

<p>(6)最后的效果是这样的。</p>

<div align="center"><img src="http://www-fusijie-com.qiniudn.com/smali_Screen%20Shot%202014-09-08%20at%2011.00.38%20PM.png" alt="" border="0" title="" /><br></br></div>


<h3>5.干点坏事</h3>

<p>从上面一个例子对Smali的用途就很清楚了，没错，Smali注入。现在常见的除了测试以外的用途，Smali注入明显是带有黑客性质的，小的如破解游戏，替换游戏广告，大的甚至利用漏洞去破解密码，偷窃个人资料，财产等等。对Smali，安卓逆向分析，安卓系统安全比较清楚的，这些事其实都不算事。</p>

<p>我这里以一个实际上线的游戏破解为例，看看我们平时在写代码时要注意哪些问题，避免辛辛苦苦写游戏，却在帮人家数钱。这里的破解不是重点，反破解才是重点。</p>

<p>以市场上很火的一款单机游戏《消灭小星星》为例，下载地址是：<a href="http://apk.91.com/Soft/Android/com.brianbaek.popstar-340.html">http://apk.91.com/Soft/Android/com.brianbaek.popstar-340.html</a></p>

<p>相同的方法反编译，在/smali/com/zplay/android/sdk/pay/ZplayPay.smali文件的dopay函数开头，注入如下代码：</p>

<figure class='code'><figcaption><span>popstar_crack</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='smali'><span class='line'>    const/4 <span class="nb">v0</span><span class="p">,</span> <span class="mh">0x1</span>  
</span><span class='line'>    invoke-static <span class="p">{</span><span class="nb">v0</span><span class="p">},</span> <span class="kt">L</span>com/zplay/iap/<span class="nc">ZplayJNI</span>;<span class="p">-&gt;</span><span class="nf">sendMessage</span><span class="p">(</span><span class="kt">I</span><span class="p">)</span><span class="kt">V</span>
</span><span class='line'>    return-void
</span></code></pre></td></tr></table></div></figure>


<p>原理很简单，这个游戏使用了Zplay的支付系统，在Java层的处理了支付逻辑，如果觉得Smali读起来费劲，那么直接使用dex2jar就能很清楚的看到，支付提醒甚至是中文的。Java层处理完支付逻辑后会给C++层丢个消息，调用C++层的代码去处理游戏逻辑，比如成功支付，那么幸运星就会相应地增加。这里使用native方法进行处理。</p>

<p>所以注入的代码是，一旦进入支付逻辑，直接返回成功，同时强制返回函数，这就实现了支付的破解。当然作为一个有节操，有逼格的游戏从业者，这里就不放出破解版了（不过说得也够明白了）。查找注入点这东西靠的是耐心，细心和运气。</p>

<p>为了方便，一般会先用正常的java写一些调试类，然后反编译出静态的smali放入目标文件夹中以供调试使用。</p>

<p>再放张图，星星用不完了：</p>

<div align="center"><img src="http://www-fusijie-com.qiniudn.com/smali_crack_popstar.jpg" alt="" border="0" title="" /><br></br></div>


<h3>6.总结</h3>

<p>就像上面说的，Smali能做的不仅仅是这些。有兴趣的可以看看这篇文章<a href="http://blog.csdn.net/hu3167343/article/details/36418063">《支付宝钱包手势密码破解实战》</a>，我没有去验证过真伪，但是如作者所描述的应该是可行无误。这里用到的一个更高级的功能是将支付宝的加密解密逻辑Smali的jar包导入自己新建的工程，进而直接在自己的程序中集成支付宝的加密解密功能。</p>

<p>在逆向分析游戏的过程中，我也发现了几个重要的点能帮助开发者提高自己程序的安全性。</p>

<p>首先，完全避免破解是不可能的，我们能做的工作就是尽最大可能去妨碍破解者破解游戏，提高破解成本。</p>

<ul>
<li>一定要使用混淆。不单单是第三方SDK，你的代码也是。破解游戏很重要一点就是要抓住游戏的逻辑。代码混淆后，Smali更加晦涩难懂，逻辑也更难掌握。</li>
<li>回到开头的话，解读汇编比解读Smali难度大的多得多。所以重要的逻辑可以放到C/C++层去处理就不要放在Java层上去处理。</li>
<li>多用连续调用的方式。这样出来的效果是Java只有一行，Smali可能有好几十行，看着都蛋疼。当然这对熟练的破解老手无效～</li>
<li>在一些关键的点上，比如支付，多绕一下。而不是像《消灭小星星》这样，直接在Java内用中文显示“支付成功”，同时去调用JNI方法。用dex2jar看一眼就暴露了。</li>
</ul>


<p>哈哈，总之，小心你的艳照。。。</p>

<p>哇咔咔，竟然写了快4个小时～</p>

<p class='post-footer'>&nbsp;原文地址：<a href='http://fusijie.github.io/blog/2014/09/08/smali-introduction/'>http://fusijie.github.io/blog/2014/09/08/smali-introduction/</a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocos2dx-FAQ-2]]></title>
    <link href="http://fusijie.github.io/blog/2014/09/02/cocos2dx-faq-2/"/>
    <updated>2014-09-02T17:34:00+08:00</updated>
    <id>http://fusijie.github.io/blog/2014/09/02/cocos2dx-faq-2</id>
    <content type="html"><![CDATA[<h3>1.<code>Q:</code>Cocos2d-x v2.2.5 进行Android交叉编译的时候报错“&#8217;transform&#8217; is not a member of &lsquo;std&#8217;”，如何解决？</h3>

<p>由于没有添加标准算法库导致的问题，在<a href="https://github.com/cocos2d/cocos2d-x/blob/v2/extensions/CocoStudio/Reader/WidgetReader/LabelReader/LabelReader.cpp">extensions/CocoStudio/Reader/LabelReader.cpp</a>增加头文件的引用即可。官方仓库已修复，可以直接拉取更新。</p>

<figure class='code'><figcaption><span>包含头文件</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">algorithm</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/cocos2d/cocos2d-x/commit/70cbb91ea88a65be34e223c93f00edfdbfc11975">参考链接</a></p>

<!-- more -->




<br></br>


<h3>2.<code>Q:</code>Cocos2d-x有哪些可用的粒子编辑器？</h3>

<p>Mac平台：</p>

<ul>
<li><a href="https://71squared.com/particledesigner">Particle Designer，收费</a></li>
<li><a href="https://itunes.apple.com/us/app/id600661093?mt=8">Particle Playground，收费</a></li>
</ul>


<p>Windows平台：</p>

<ul>
<li><p><a href="code.google.com/p/cocos2d-windows-particle-editor/">Particle Editor，基于C#，开源，免费</a></p></li>
<li><p><a href="http://bbs.csdn.net/topics/390627359">ParticleDesigner，不开源，免费</a></p></li>
<li><a href="http://blog.csdn.net/jebe7282/article/details/8051899">Cocos2d Particle Builder，基于QT，不开源，免费</a></li>
</ul>


<p>Web平台：</p>

<ul>
<li><a href="http://particle2dx.com/">Particle2dx，免费</a></li>
</ul>


<br></br>


<h3>3.<code>Q:</code>点击按钮菜单的时候如何让它具有放大效果？</h3>

<p>以Cocos2d-x v3.2为例。</p>

<p>如果使用Menu的话，手动去设置将按下图片放大（使用MenuItemSprite），那么按钮的放大效果会保持坐下坐标不变，往右上角放大，而不是从中心往四周放大。</p>

<p>解决的方法是，使用Button控件。设置按下动作有效即可，目前放大倍数是1.1。v3.3版本会开放这个倍数设置接口。</p>

<figure class='code'><figcaption><span>setPressedActionEnabled</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="k">auto</span> <span class="n">btn</span> <span class="o">=</span> <span class="n">Button</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;CloseNormal.png&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">btn</span><span class="o">-&gt;</span><span class="n">setPressedActionEnabled</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span><span class='line'>  <span class="n">btn</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Vec2</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span><span class="mi">200</span><span class="p">));</span>
</span><span class='line'>  <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">btn</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<br></br>


<h3>4.<code>Q:</code>Cocos2d-x支持视频播放吗？为什么TestCpp看不到相关测试例？</h3>

<p>从Cocos2d-x v3.1开始，Cocos2d-x加入视频播放模块<a href="https://github.com/cocos2d/cocos2d-x/blob/v3/cocos/ui/UIVideoPlayer.h">VideoPlayer</a>，暂只支持iOS和Android平台。</p>

<p>因此只有在iOS和Android平台上才能在看到TestCpp的VideoPlayer菜单，其他平台是隐藏的。具体位置是：
Node::UI/GUI Dynamic Create Test/VideoPlayerTest。</p>

<br></br>


<h3>5.<code>Q:</code>如何下载Cocos2d-x的历史版本？</h3>

<p>最简单的方式就是克隆官方git仓库。通过标签来创建本地分支，并进行切换。这样就可以不用每个版本都去下载一个引擎了。</p>

<p>比如要获取Cocos2d-x v3.2（注：这里不处理submodule）</p>

<pre><code>git clone https://github.com/cocos2d/cocos2d-x.git
cd cocos2d-x/
git checkout -b v3.2 cocos2d-x-3.2
</code></pre>

<p>这样就在本地创建了3.2的分支。查看版本标签可以使用</p>

<pre><code>git tag
</code></pre>

<p>当然也可以采用直接下载的方式</p>

<ul>
<li><p><a href="http://www.cocos2d-x.org/download">http://www.cocos2d-x.org/download</a></p></li>
<li><p><a href="http://www.cocos2d-x.org/download/version#Cocos2d-x">http://www.cocos2d-x.org/download/version#Cocos2d-x</a></p></li>
<li><p><a href="https://code.google.com/p/cocos2d-x/downloads/list">https://code.google.com/p/cocos2d-x/downloads/list</a></p></li>
</ul>


<br></br>


<p class='post-footer'>&nbsp;原文地址：<a href='http://fusijie.github.io/blog/2014/09/02/cocos2dx-faq-2/'>http://fusijie.github.io/blog/2014/09/02/cocos2dx-faq-2/</a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何在Windows平台使用VS搭建C++/Lua的开发环境]]></title>
    <link href="http://fusijie.github.io/blog/2014/08/31/how-to-complie-cpp-with-lua-in-the-vs/"/>
    <updated>2014-08-31T00:28:00+08:00</updated>
    <id>http://fusijie.github.io/blog/2014/08/31/how-to-complie-cpp-with-lua-in-the-vs</id>
    <content type="html"><![CDATA[<p>本文主要介绍如何在Windows平台利用VS搭建C++/Lua开发环境。这里的“C++/Lua开发环境”主要指的是C++调用Lua，以及Lua调用C++。Mac平台相对会比较方便，但是VS也不是很麻烦就是了。Mac上利用XCode搭建的教程可以参考<a href="http://4gamers.cn/archives/242">子龙山人的教程</a>，当然也可以利用其他IDE，比如Eclipse+CDT+LDT来搭建，这都没有问题。</p>

<p>另外，本文不谈及Lua/C++的交互，相关内容可以参考<a href="http://book.luaer.cn/">《Lua程序设计》</a>，或者<a href="http://4gamers.cn/">子龙山人的Lua系列教程</a>。</p>

<!-- more -->


<h4>环境</h4>

<ul>
<li>Windows 8.1</li>
<li>VS2012</li>
<li>Lua5.2.3</li>
</ul>


<h4>如何搭建</h4>

<p>1.生成Lua静态库</p>

<p>(1)下载lua src。</p>

<p>最新版本是5.2.3。 <a href="http://www.lua.org/download.html">下载地址</a>。</p>

<p>(2)新建VS Win32控制台应用程序，取名为Lua。在应用程序设置中选择应用程序类型为静态库，附加选项中取消预编译头的勾选。</p>

<div align="center"><img src="http://www-fusijie-com.qiniudn.com/vslua_pic_1.png" alt="" border="0" title="" /><br></br></div>


<p>(3)在Lua的VS项目文件夹中新建LuaSrc目录，用于存放Lua源码。解压下载的lua src，拷贝src目录下所有 * .c和 * .h文件到LuaSrc。</p>

<p>(4)在Lua的VS项目文件夹中新建bin目录，用于存放Lua.lib。</p>

<p>(5)在VS环境中，右键点击Lua项目，选择添加->现有项，导入LuaSrc目录下所有的文件。</p>

<p>(6)右键点击Lua项目，选择属性，在顶部选择所有配置，然后修改配置属性->常规->输出目录为</p>

<pre><code>$(SolutionDir)bin
</code></pre>

<p>(7)为了禁止一些安全警告（Windows程序员知道为什么），需要再修改配置属性->C/C++&ndash;>预处理器->预处理器定义，在末尾添加</p>

<pre><code>;_CRT_SECURE_NO_DEPRECATE;_SCL_SECURE_NO_DEPRECATE
</code></pre>

<p>(8)选择release模式，点击项目，生成Lua.lib即可。Lua.lib生成在bin目录下。</p>

<p>2.调用Lua静态库</p>

<p>(1)在Lua解决方案下新建名字为HelloLua的Win32控制台程序，采用默认选项，不做修改。</p>

<p>(2)右键点击HelloLua项目，选择属性，修改配置属性->C/C++&ndash;>附加包含目录，新增</p>

<pre><code>..\LuaSrc
</code></pre>

<p>(3)在修改配置属性->链接器->输入->附加依赖项，新增</p>

<pre><code>..\bin\Lua.lib
</code></pre>

<p>或者使用代码链接lua库，即在HeloLua.cpp中添加如下代码，</p>

<figure class='code'><figcaption><span>调用lua.lib</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="err">#</span><span class="n">pragma</span> <span class="n">comment</span> <span class="p">(</span><span class="n">lib</span><span class="p">,</span><span class="s">&quot;../bin/Lua.lib&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>(4)设置HelloLua项目为默认启动项，点击生成项目即可。</p>

<p>(5)因为此时main函数并没有执行任何代码，所以控制台一闪而过。右键HelloLua项目的源文件，添加新建项，取名hellolua.lua。</p>

<p>(6)一个简单的调用示例：</p>

<figure class='code'><figcaption><span>demo</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="o">*</span><span class="n">hellolua</span><span class="p">.</span><span class="n">lua</span><span class="o">*</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">print</span><span class="p">(</span><span class="s">&quot;Hello, Lua&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">*</span><span class="n">HelloLua</span><span class="p">.</span><span class="n">cpp</span><span class="o">*</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">#</span><span class="n">include</span> <span class="s">&quot;stdafx.h&quot;</span>
</span><span class='line'>  <span class="err">#</span><span class="n">pragma</span> <span class="n">comment</span> <span class="p">(</span><span class="n">lib</span><span class="p">,</span><span class="s">&quot;Lua.lib&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">#</span><span class="n">include</span> <span class="s">&quot;lua.hpp&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">_tmain</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="n">_TCHAR</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">lua_State</span><span class="o">*</span> <span class="n">lua_state</span> <span class="o">=</span> <span class="n">luaL_newstate</span><span class="p">();</span>
</span><span class='line'>      <span class="n">luaL_openlibs</span><span class="p">(</span><span class="n">lua_state</span><span class="p">);</span>
</span><span class='line'>      <span class="n">luaL_dofile</span><span class="p">(</span><span class="n">lua_state</span><span class="p">,</span><span class="s">&quot;hellolua.lua&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">lua_close</span><span class="p">(</span><span class="n">lua_state</span><span class="p">);</span>
</span><span class='line'>      <span class="n">getchar</span><span class="p">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>效果</em></p>

<div align="center"><img src="http://www-fusijie-com.qiniudn.com/vslua_pic_2.png" alt="" border="0" title="" /><br></br></div>


<p>3.生成Lua.exe和Luac.exe</p>

<p>由于下载的lua源码中包含lua.c和luac.c，这两个文件都有main入口，同时编译的话会出错，所以只要删除其中一个，另一个就可以正常编译。</p>

<p>(1)新建VS空项目，取名为Lua。</p>

<p>(2)在Lua的VS项目文件夹中新建LuaSrc目录，用于存放Lua源码。解压下载的lua src，拷贝src目录下是所有 * .c和 * .h文件。</p>

<p>(3)在VS环境中，右键点击Lua项目，选择添加->现有项，导入LuaSrc目录下所有的文件。</p>

<p>(4)右键点击Lua项目，选择属性，在顶部选择所有配置，然后修改配置属性->C/C++&ndash;>预处理器->预处理器定义，在末尾添加</p>

<pre><code>;_CRT_SECURE_NO_DEPRECATE;_SCL_SECURE_NO_DEPRECATE
</code></pre>

<p>(5)在Lua项目的源文件，找到luac.c，右键移除。</p>

<p>(6)选择release模式，点击项目生成lua.exe即可。</p>

<p>(7)同理在同个解决方案下创建LuaC空项目，按以上步骤生成luac.exe。只是第五步要改为“找到lua.c，右键移除”。</p>

<p>(8)lua.exe和luac.exe生成在Lua项目目录下的release目录。</p>

<div align="center"><img src="http://www-fusijie-com.qiniudn.com/vslua_pic_3.png" alt="" border="0" title="" /><br></br></div>


<p>C++调用Lua项目：<a href="https://github.com/fusijie/Cpp_Lua_VS2012">https://github.com/fusijie/Cpp_Lua_VS2012</a></p>

<p>Lua和LuaC项目：<a href="https://github.com/fusijie/Lua_LuaC_exe">https://github.com/fusijie/Lua_LuaC_exe</a></p>

<p>如果你不想这么麻烦，也可以直接从上述2个github地址直接clone我的项目。</p>

<p class='post-footer'>&nbsp;原文地址：<a href='http://fusijie.github.io/blog/2014/08/31/how-to-complie-cpp-with-lua-in-the-vs/'>http://fusijie.github.io/blog/2014/08/31/how-to-complie-cpp-with-lua-in-the-vs/</a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocos2dx-FAQ-1]]></title>
    <link href="http://fusijie.github.io/blog/2014/08/26/cocos2dx-faq-1/"/>
    <updated>2014-08-26T17:28:00+08:00</updated>
    <id>http://fusijie.github.io/blog/2014/08/26/cocos2dx-faq-1</id>
    <content type="html"><![CDATA[<h3>1. <code>Q:</code>如何在安卓上给应用程序设置透明背景？</h3>

<p>(1)NativeActivity，以Cocos2d-x 3.0 rc0为例</p>

<p><a href="http://www.cocoachina.com/bbs/read.php?tid=196780">http://www.cocoachina.com/bbs/read.php?tid=196780</a></p>

<p>(2)JavaActivity，以Cocos2d-x 3.2 release为例</p>

<p><a href="http://www.cocoachina.com/bbs/read.php?tid=224544">http://www.cocoachina.com/bbs/read.php?tid=224544</a></p>

<!-- more -->




<br></br>


<h3>2. <code>Q:</code>SimpleAudioEngine在Windows平台上卡顿严重，无法调节音量？</h3>

<p>SimpleAudioEngine是分平台实现的，Windows平台上部分API是空实现（比如preloadBackgroundMusic等等）,所以在Windows平台上并不提供预加载，调节音量等功能（参见<a href="https://github.com/cocos2d/cocos2d-x/blob/v3/cocos/audio/win32/SimpleAudioEngine.cpp">cocos/audio/win32/SimpleAudioEngine.cpp</a>），移植到Android/iOS/Mac上就正常了。Windows上调节音量有网友提供了解决方案。</p>

<p>参考链接：<a href="http://www.cocoachina.com/bbs/read.php?tid=213345">http://www.cocoachina.com/bbs/read.php?tid=213345</a></p>

<br></br>


<h3>3. <code>Q:</code>Cocos2d-x 3.x无法重写Node::draw()方法？</h3>

<p>Cocos2d-x 从v3.0开始将Node::draw()方法标记为final（参见<a href="https://github.com/cocos2d/cocos2d-x/blob/v3/cocos/2d/CCNode.h">cocos2d/2d/CCNode.h</a>），引擎另外提供了</p>

<figure class='code'><figcaption><span>draw函数</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">virtual</span> <span class="kt">void</span> <span class="n">draw</span><span class="p">(</span><span class="n">Renderer</span> <span class="o">*</span><span class="n">renderer</span><span class="p">,</span> <span class="k">const</span> <span class="n">Mat4</span><span class="o">&amp;</span> <span class="n">transform</span><span class="p">,</span> <span class="n">uint32_t</span> <span class="n">flags</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>函数，可以通过重写这个函数来绘制你自己的节点，需注意的是如果更改了任何的GL状态，在使用完后必须还原。</p>

<p>参考链接：<a href="http://www.cocoachina.com/bbs/read.php?tid=200176">http://www.cocoachina.com/bbs/read.php?tid=200176</a></p>

<br></br>


<h3>4. <code>Q:</code>使用ClippingNode，为什么在Android/iOS裁剪显示错误，或者背景变为绿色？</h3>

<p>未开启OpenGL深度缓存，解决方法如下：</p>

<p><em>(1)iOS：在AppController.mm修改</em></p>

<figure class='code'><figcaption><span>iOS修改深度缓存</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">EAGLView</span> <span class="o">*</span><span class="n">__glView</span> <span class="o">=</span> <span class="p">[</span><span class="n">EAGLView</span> <span class="nl">viewWithFrame:</span> <span class="p">[</span><span class="n">window</span> <span class="n">bounds</span><span class="p">]</span>
</span><span class='line'>                                 <span class="nl">pixelFormat:</span> <span class="n">kEAGLColorFormatRGBA8</span>
</span><span class='line'>                                 <span class="nl">depthFormat:</span> <span class="n">GL_DEPTH24_STENCIL8_OES</span>
</span><span class='line'>                          <span class="nl">preserveBackbuffer:</span> <span class="n">NO</span>
</span><span class='line'>                                  <span class="nl">sharegroup:</span> <span class="nb">nil</span>
</span><span class='line'>                               <span class="nl">multiSampling:</span> <span class="n">NO</span>
</span><span class='line'>                             <span class="nl">numberOfSamples:</span> <span class="mi">0</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>(2)Android：在AppActivity.java修改</em></p>

<figure class='code'><figcaption><span>Android修改深度缓存</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppActivity</span> <span class="kd">extends</span> <span class="n">Cocos2dxActivity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">Cocos2dxGLSurfaceView</span> <span class="nf">onCreateView</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Cocos2dxGLSurfaceView</span> <span class="n">glSurfaceView</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Cocos2dxGLSurfaceView</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// TestCpp should create stencil buffer</span>
</span><span class='line'>       <span class="n">glSurfaceView</span><span class="o">.</span><span class="na">setEGLConfigChooser</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">16</span><span class="o">,</span> <span class="mi">8</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">glSurfaceView</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<br></br>


<h3>5.<code>Q:</code>如何在Cocos2d-x实现C++调用Java？</h3>

<p>C++调用Java代码主要是通过JNI实现，这里以Cocos2d-x 3.2为例。</p>

<p>(1)C++部分：</p>

<p>在HelloWorld.cpp增加如下函数，用于调用java代码。</p>

<figure class='code'><figcaption><span>C++代码</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="err">#</span><span class="k">if</span> <span class="p">(</span><span class="n">CC_TARGET_PLATFORM</span> <span class="o">==</span> <span class="n">CC_PLATFORM_ANDROID</span><span class="p">)</span>
</span><span class='line'>  <span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">jni</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="err">#</span><span class="n">include</span> <span class="s">&quot;platform/android/jni/JniHelper.h&quot;</span>
</span><span class='line'>  <span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">cocos2d</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="err">#</span><span class="n">endif</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">testJNI</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>  <span class="err">#</span><span class="k">if</span> <span class="p">(</span><span class="n">CC_TARGET_PLATFORM</span> <span class="o">==</span> <span class="n">CC_PLATFORM_ANDROID</span><span class="p">)</span>
</span><span class='line'>      <span class="n">JniMethodInfo</span> <span class="n">minfo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">bool</span> <span class="n">isHave</span> <span class="o">=</span> <span class="n">JniHelper</span><span class="o">::</span><span class="n">getStaticMethodInfo</span><span class="p">(</span><span class="n">minfo</span><span class="p">,</span><span class="s">&quot;org/cocos2dx/cpp/AppActivity&quot;</span><span class="p">,</span><span class="s">&quot;testjni&quot;</span><span class="p">,</span> <span class="s">&quot;()V&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isHave</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">log</span><span class="p">(</span><span class="s">&quot;jni:testjni is null&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>          <span class="n">minfo</span><span class="p">.</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">CallStaticVoidMethod</span><span class="p">(</span><span class="n">minfo</span><span class="p">.</span><span class="n">classID</span><span class="p">,</span> <span class="n">minfo</span><span class="p">.</span><span class="n">methodID</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="err">#</span><span class="n">endif</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p>(2)Java部分：</p>

<p>在org.cocos2dx.cpp.Activity中增加如下函数，供C++调用。</p>

<figure class='code'><figcaption><span>Java代码</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">testjni</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;From Java&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>更详细的使用说明，请参考：<a href="http://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/jniTOC.html">Java Native Interface Specification</a></p>

<br></br>


<h3>6.<code>Q:</code>如何在Cocos2d-x实现Java调用C++？</h3>

<p>Java调C++代码也是通过JNI实现，当然Android给我们提供了更方便的工具NDK。由于这里是以Cocos2d-x为例，所以不再去赘述NDK使用。同样以Cocos2d-x 3.2为例。</p>

<p>(1)C++部分：</p>

<p>在HelloWorld.cpp增加如下函数，供java调用。</p>

<figure class='code'><figcaption><span>C++代码  </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">jni</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">#</span><span class="n">ifdef</span> <span class="n">__cplusplus</span>
</span><span class='line'>  <span class="k">extern</span> <span class="s">&quot;C&quot;</span> <span class="p">{</span>
</span><span class='line'>  <span class="err">#</span><span class="n">endif</span>
</span><span class='line'>    <span class="n">JNIEXPORT</span> <span class="n">jstring</span> <span class="n">JNICALL</span> <span class="n">Java_org_cocos2dx_cpp_AppActivity_testjni</span>
</span><span class='line'>    <span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jclass</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="s">&quot;From C++&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="err">#</span><span class="n">ifdef</span> <span class="n">__cplusplus</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="err">#</span><span class="n">endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>(2)Java部分：</p>

<p>在org.cocos2dx.cpp.Activity中增加如下函数，用于调用C++代码。</p>

<figure class='code'><figcaption><span>java代码</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppActivity</span> <span class="kd">extends</span> <span class="n">Cocos2dxActivity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// TODO Auto-generated method stub</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">testjni</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">native</span> <span class="n">String</span> <span class="nf">testjni</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p>参考地址：<a href="https://www3.ntu.edu.sg/home/ehchua/programming/java/JavaNativeInterface.html">Java Programming Tutorial Java Native Interface</a></p>

<br></br>


<h3>7.<code>Q:</code>如何在Cocos2d-x实现截图功能？</h3>

<p><em>（1）Cocos2d-x 2.x</em></p>

<p>Cocos2d-x 2.x没有提供截图功能，但是可以用CCRenderTexture来实现这个功能</p>

<figure class='code'><figcaption><span>SaveScreenShot</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="kt">void</span> <span class="n">CTestLayer</span><span class="o">::</span><span class="n">SaveScreenShot</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="c1">//获取屏幕尺寸  </span>
</span><span class='line'>      <span class="n">CCSize</span> <span class="n">size</span> <span class="o">=</span> <span class="n">CCDirector</span><span class="o">::</span><span class="n">sharedDirector</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getWinSize</span><span class="p">();</span>
</span><span class='line'>      <span class="c1">//使用屏幕尺寸初始化一个空的渲染纹理对象  </span>
</span><span class='line'>      <span class="n">CCRenderTexture</span><span class="o">*</span> <span class="n">texture</span> <span class="o">=</span> <span class="n">CCRenderTexture</span><span class="o">::</span><span class="n">create</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">//设置位置      </span>
</span><span class='line'>      <span class="n">texture</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'>      <span class="c1">//开始获取      </span>
</span><span class='line'>      <span class="n">texture</span><span class="o">-&gt;</span><span class="n">begin</span><span class="p">();</span>
</span><span class='line'>      <span class="c1">//遍历场景节点对象，填充纹理到texure中  </span>
</span><span class='line'>      <span class="n">CCDirector</span><span class="o">::</span><span class="n">sharedDirector</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getRunningScene</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">visit</span><span class="p">();</span>
</span><span class='line'>      <span class="c1">//结束获取  </span>
</span><span class='line'>      <span class="n">texture</span><span class="o">-&gt;</span><span class="n">end</span><span class="p">();</span>
</span><span class='line'>      <span class="c1">//保存为PNG图，Win32/Debug目录下  </span>
</span><span class='line'>      <span class="n">texture</span><span class="o">-&gt;</span><span class="n">saveToFile</span><span class="p">(</span><span class="s">&quot;screenshot.png&quot;</span><span class="p">,</span> <span class="n">kCCImageFormatPNG</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>（2）Cocos2d-x 3.x</em></p>

<p>在Cocos2d-x 3.2之前，引擎也没有提供截图功能，同样可以使用RenderTexture实现</p>

<figure class='code'><figcaption><span>SaveScreenShot</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="kt">void</span> <span class="n">Director</span><span class="o">::</span><span class="n">saveScreenshot</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">fileName</span><span class="p">,</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">void</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span><span class="p">)</span><span class="o">&gt;&amp;</span> <span class="n">callback</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">Image</span><span class="o">::</span><span class="n">Format</span> <span class="n">format</span><span class="p">;</span>
</span><span class='line'>      <span class="c1">//进行后缀判断  </span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">::</span><span class="n">npos</span> <span class="o">!=</span> <span class="n">fileName</span><span class="p">.</span><span class="n">find_last_of</span><span class="p">(</span><span class="s">&quot;.&quot;</span><span class="p">)){</span>
</span><span class='line'>        <span class="k">auto</span> <span class="n">extension</span> <span class="o">=</span> <span class="n">fileName</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">fileName</span><span class="p">.</span><span class="n">find_last_of</span><span class="p">(</span><span class="s">&quot;.&quot;</span><span class="p">),</span><span class="n">fileName</span><span class="p">.</span><span class="n">length</span><span class="p">());</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">extension</span><span class="p">.</span><span class="n">compare</span><span class="p">(</span><span class="s">&quot;.png&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">format</span> <span class="o">=</span> <span class="n">Image</span><span class="o">::</span><span class="n">Format</span><span class="o">::</span><span class="n">PNG</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">extension</span><span class="p">.</span><span class="n">compare</span><span class="p">(</span><span class="s">&quot;.jpg&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">format</span> <span class="o">=</span> <span class="n">Image</span><span class="o">::</span><span class="n">Format</span><span class="o">::</span><span class="n">JPG</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span><span class="p">{</span>
</span><span class='line'>            <span class="n">log</span><span class="p">(</span><span class="s">&quot;cocos2d: the image can only be saved as JPG or PNG format&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">log</span><span class="p">(</span><span class="s">&quot;cocos2d: the image can only be saved as JPG or PNG format&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">//获取屏幕尺寸，初始化一个空的渲染纹理对象  </span>
</span><span class='line'>      <span class="k">auto</span> <span class="n">renderTexture</span> <span class="o">=</span> <span class="n">RenderTexture</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">getWinSize</span><span class="p">().</span><span class="n">width</span><span class="p">,</span> <span class="n">getWinSize</span><span class="p">().</span><span class="n">height</span><span class="p">,</span> <span class="n">Texture2D</span><span class="o">::</span><span class="n">PixelFormat</span><span class="o">::</span><span class="n">RGBA8888</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">//清空并开始获取  </span>
</span><span class='line'>      <span class="n">renderTexture</span><span class="o">-&gt;</span><span class="n">beginWithClear</span><span class="p">(</span><span class="mf">0.0f</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">//遍历场景节点对象，填充纹理到RenderTexture中  </span>
</span><span class='line'>      <span class="n">getRunningScene</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">visit</span><span class="p">();</span>
</span><span class='line'>      <span class="c1">//结束获取  </span>
</span><span class='line'>      <span class="n">renderTexture</span><span class="o">-&gt;</span><span class="n">end</span><span class="p">();</span>
</span><span class='line'>      <span class="c1">//保存文件  </span>
</span><span class='line'>      <span class="n">renderTexture</span><span class="o">-&gt;</span><span class="n">saveToFile</span><span class="p">(</span><span class="n">fileName</span> <span class="p">,</span> <span class="n">format</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">//使用schedule在下一帧中调用callback函数  </span>
</span><span class='line'>      <span class="k">auto</span> <span class="n">fullPath</span> <span class="o">=</span> <span class="n">FileUtils</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getWritablePath</span><span class="p">()</span> <span class="o">+</span> <span class="n">fileName</span><span class="p">;</span>
</span><span class='line'>      <span class="k">auto</span> <span class="n">scheduleCallback</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="p">,</span><span class="n">fullPath</span><span class="p">,</span><span class="n">callback</span><span class="p">](</span><span class="kt">float</span> <span class="n">dt</span><span class="p">){</span>
</span><span class='line'>          <span class="n">callback</span><span class="p">(</span><span class="n">fullPath</span><span class="p">);</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>      <span class="k">auto</span> <span class="n">_schedule</span> <span class="o">=</span> <span class="n">getRunningScene</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getScheduler</span><span class="p">();</span>
</span><span class='line'>      <span class="n">_schedule</span><span class="o">-&gt;</span><span class="n">schedule</span><span class="p">(</span><span class="n">scheduleCallback</span><span class="p">,</span> <span class="k">this</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mf">0.0f</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="s">&quot;screenshot&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从Cocos2d-x 3.2之后开始，引擎提供了captureScreen函数来实现截图功能</p>

<figure class='code'><figcaption><span>captureScreen</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="kt">void</span> <span class="n">Util</span><span class="o">::</span><span class="n">captureScreen</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">void</span><span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span><span class="p">)</span><span class="o">&gt;&amp;</span> <span class="n">afterCaptured</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">filename</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<br></br>


<h3>8.<code>Q:</code>如何在Cocos2d-x获取随机数？</h3>

<p>首先计算机是无法产生真正的随机数的，都是伪随机。获取随机数的方式和算法多种多样，这里只给出一种方法，基于最新的C++11。</p>

<figure class='code'><figcaption><span>随机数产生</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">random</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">uniform_int_distribution</span><span class="o">&lt;</span><span class="kt">unsigned</span><span class="o">&gt;</span> <span class="n">u</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">default_random_engine</span> <span class="n">e</span><span class="p">;</span>
</span><span class='line'>    <span class="n">e</span><span class="p">.</span><span class="n">seed</span><span class="p">((</span><span class="kt">unsigned</span><span class="p">)</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">random_number</span> <span class="o">=</span> <span class="n">u</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个例子产生了一个范围在1～1000的随机数（这里采用的标准分布是离散型均匀分布）。</p>

<p>参考：<a href="http://www.stroustrup.com/C++11FAQ.html#std-random">C++11:Random number generation</a></p>

<br></br>


<h3>9.<code>Q:</code>为什么直接点击Windows平台生成的exe可执行文件，提示程序已停止工作？</h3>

<p>这里以Cocos2d-x 3.2为例。</p>

<p>(1)如果直接在Visual Studio编译生成目标文件，那么目标文件会被生成到<code>项目/proj.win32/Debug.win32</code>目录下（debug模式）或者<code>项目/proj.win32/release.win32</code>目录下（release模式）。由于资源文件没有拷贝到目标文件目录的关系，此时点击xxx.exe，程序会停止工作。</p>

<p>解决方法是：手动将资源文件拷贝到xxx.exe同级目录下。</p>

<p>(2)如果采用的是命令行</p>

<pre><code>cocos run -p win32
</code></pre>

<p>那目标文件会被生成到<code>项目/bin/debug/win32</code>目录下，同时资源文件也会被拷贝到这个文件夹，此时直接点击xxx.exe就可以运行。<code>项目/proj.win32/Debug.win32</code>目录也会有xxx.exe，点击也会提示停止工作，解决方法同上。</p>

<br></br>


<h3>10.<code>Q:</code>如何在popScene时使用场景过渡效果？</h3>

<p>这里以Cocos2d-x 3.2为例。需要修改引擎的Director::popScene()函数，也可以进行重载或者设置默认参数。</p>

<figure class='code'><figcaption><span>popScene</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="kt">void</span> <span class="n">Director</span><span class="o">::</span><span class="n">popScene</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">void</span><span class="p">(</span><span class="n">Scene</span><span class="o">*</span> <span class="o">&amp;</span><span class="p">)</span><span class="o">&gt;&amp;</span> <span class="n">callback</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">CCASSERT</span><span class="p">(</span><span class="n">_runningScene</span> <span class="o">!=</span> <span class="n">nullptr</span><span class="p">,</span> <span class="s">&quot;running scene should not null&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">_scenesStack</span><span class="p">.</span><span class="n">popBack</span><span class="p">();</span>
</span><span class='line'>      <span class="n">ssize_t</span> <span class="n">c</span> <span class="o">=</span> <span class="n">_scenesStack</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">end</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">_sendCleanupToScene</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>          <span class="n">_nextScene</span> <span class="o">=</span> <span class="n">_scenesStack</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">c</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">callback</span><span class="p">)</span>
</span><span class='line'>              <span class="n">callback</span><span class="p">(</span><span class="n">_nextScene</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用方式：</p>

<figure class='code'><figcaption><span>使用新的popScene</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="k">auto</span> <span class="n">callback</span> <span class="o">=</span> <span class="p">[](</span><span class="n">Scene</span><span class="o">*&amp;</span> <span class="n">scene</span><span class="p">){</span><span class="n">scene</span> <span class="o">=</span> <span class="n">TransitionJumpZoom</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="mf">1.0f</span><span class="p">,</span> <span class="n">scene</span><span class="p">);};</span>
</span><span class='line'>    <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">popScene</span><span class="p">(</span><span class="n">callback</span><span class="p">);</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p class='post-footer'>&nbsp;原文地址：<a href='http://fusijie.github.io/blog/2014/08/26/cocos2dx-faq-1/'>http://fusijie.github.io/blog/2014/08/26/cocos2dx-faq-1/</a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PowerCmd，一个Windows下cmd的绝佳替代工具]]></title>
    <link href="http://fusijie.github.io/blog/2014/08/24/tools-powercmd/"/>
    <updated>2014-08-24T00:48:00+08:00</updated>
    <id>http://fusijie.github.io/blog/2014/08/24/tools-powercmd</id>
    <content type="html"><![CDATA[<p>由于工作关系（码奴），平时会需要接触到比较多奇奇怪怪的应用。而一些比较好的小众软件和工具，我觉得很有必要分享出来。这是第一篇，之后有的话会慢慢积累分享出来，如果你们也有好的软件，欢迎留言分享。</p>

<p>因为只是介绍工具而已，所以内容会很简单。</p>

<p>当然这里没有任何的广告成分。次奥。。。谁会给我广告费啊。。。</p>

<!-- more -->


<blockquote><p>当我第一次知道要写这些的时候，其实我是拒绝的！因为我觉得&hellip;呀&hellip;你不能叫我马上写，第一，我要试一下，我又不想说&hellip;我一篇文章写完以后加了很多特技，那工具赞啊&hellip;很酷！很炫！很屌！结果读者出来一定骂我，根本没有这种工具！这证明上面那个是假的……我说先要给我试一下。后来我经过也知道他们是很实在的，而且没有那种虚假成分的。那&hellip;用了这个月&hellip;这个月下来之后呢……起码我用了很舒服。现在呢&hellip;每天还在用！每天还在用呢&hellip;我还给了我团队用！来！来！来！大家试试看！那我跟读者讲∶「写的时候就写！写完之后，这个文章就是我的文章，就不要加，再加特技上去，加到没有就是这样子！我要给读者看到，我用完之后是这样子，你们用完之后，也是这样子！</p></blockquote>

<p>好了，黑完进入正题~</p>

<p>用过Mac terminal的都会觉得Windows下的cmd就是一渣，但是没办法，各种原因有时候我们就得在渣上工作。前两天遇到了个问题：<code>cd始终无法切换文件夹目录</code>，虽然后来找到了解决办法，但是还是决心找个cmd的替代品。</p>

<p>解决方法：cd后增加<code>/d</code>即可。</p>

<pre><code>cd /d F:/
</code></pre>

<p>这一找不得了，<strong>PowerCmd</strong>进入我的视野，官方网站是：<a href="http://www.powercmd.com/">http://www.powercmd.com/</a>。</p>

<div align="center"><img src="http://www-fusijie-com.qiniudn.com/tools_powercmd_maintext.jpg" alt="" border="0" title="" /><br></br></div>


<p>我们来看看它有多强大。</p>

<p>1.<code>多tab窗口</code>，你可以同时在PowerCmd打开多个cmd窗口，根据你的喜好进行排列，如上图。可以最小化，也可以全屏。</p>

<div align="center"><img src="http://www-fusijie-com.qiniudn.com/tools_powercmd_pic%20001.png" alt="" border="0" title="" /><br></br></div>


<p>2.<code>保存</code>工作状态，并在下次启动时<code>恢复</code>。</p>

<p>3.<code>集成到shell</code>，右键点击任意文件夹，你会发现多了改PowerCmd的菜单，点击该菜单，启动PowerCmd，并默认cd到当前目录。碉堡了，省了很多cd是不是？</p>

<div align="center"><img src="http://www-fusijie-com.qiniudn.com/tools_powercmd_pic%20002.png" alt="" border="0" title="" /><br></br></div>


<p>4.自带的cmd复制粘贴很麻烦，PowerCmd的<code>复制粘贴</code>就像操作普通文本一样。</p>

<p>5.<code>书签</code>功能，内容<code>过滤</code>功能，内容<code>自动保存</code>功能，内容<code>查找高亮</code>功能。</p>

<p>6.顶部<code>快捷登录</code>工具栏，可以自定义你的应用。</p>

<p>7.表格的形式<code>可视化地查看系统环境变量</code>等参数，终于不用再“我的电脑”->右键->xxx&hellip;</p>

<div align="center"><img src="http://www-fusijie-com.qiniudn.com/tools_powercmd_pic%20003.png"" alt="" border="0" title="" /><br></br></div>


<p>8.<code>自动提示</code>，主要是针对文件夹。这个比mac terminal还屌啊。。。</p>

<div align="center"><img src="http://www-fusijie-com.qiniudn.com/tools_powercmd_pic%20004.png" alt="" border="0" title="" /><br></br></div>


<p>9.其他<code>自定义功能</code>，比如行号，外观颜色、透明度等等，尽情DIY吧。。。</p>

<p>好了，看了半天还不如动手试试，软件是收费的，不过有一个月的试用期。</p>

<p><strong>Win下coding，良心推荐。</strong><p class='post-footer'>&nbsp;原文地址：<a href='http://fusijie.github.io/blog/2014/08/24/tools-powercmd/'><a href="http://fusijie.github.io/blog/2014/08/24/tools-powercmd/">http://fusijie.github.io/blog/2014/08/24/tools-powercmd/</a></a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之三十七】在Cocos2d-x中集成安卓版微信SDK]]></title>
    <link href="http://fusijie.github.io/blog/2014/08/21/play-cocos2dx-37/"/>
    <updated>2014-08-21T00:26:00+08:00</updated>
    <id>http://fusijie.github.io/blog/2014/08/21/play-cocos2dx-37</id>
    <content type="html"><![CDATA[<h3>1.概述</h3>

<p>微信的火热程度已不必说了，如果能在Cocos2d-x中集成微信SDK，让游戏能分享给好友或者朋友圈，那对游戏推广将会是非常有利的。好了，本文就是手把手地教大伙如何在Cocos2d-x中集成微信SDK。</p>

<h3>2.环境</h3>

<ul>
<li>OS: Mac OSX</li>
<li>IDE: Xcode v5.11 and Eclipse ADT v22.3</li>
<li>Android SDK:4.0</li>
<li>Adnroid NDK:r9d</li>
<li>Cocos2d-x 3.2release</li>
</ul>


<h3>3.创建Cocos2d-x工程</h3>

<p>这里不再详述，网上的资料多如牛毛了。这里我按自己习惯的方式来。</p>

<!-- more -->


<p>（1）命令行创建Cocos2dxWechat项目</p>

<pre><code>$ cocos new -p com.fusijie.cocos2dxwechat -l cpp -d . Cocos2dxWechat
</code></pre>

<p>（2）交叉编译生成so文件</p>

<pre><code>$ cd Cocos2dxWechat/proj.android/
$ ./build_native.py
</code></pre>

<p>（3）导入Eclipse生成APK</p>

<p>导入libcocos2dx项目和Cocos2dxWechat项目到Eclipse中。在真机中成功运行Cocos2dxWechat.apk。</p>

<h3>4.申请创建微信应用</h3>

<p>这一步主要是在微信开放平台上申请创建移动应用，获取AppID。微信开放平台的网址是：<a href="https://open.weixin.qq.com/">https://open.weixin.qq.com/</a></p>

<p>（1）注册帐号，进入管理中心，点击创建移动应用。</p>

<p>（2）第一步是填写应用名，描述，图标等等。如下图。</p>

<div align="center"><img src="http://www-fusijie-com.qiniudn.com/playcocos2dx37_1.png" alt="" border="0" title="" /><br></br></div>


<p>（3）填写应用官网，勾选Android应用，填写签名，包名等等。如下图。</p>

<div align="center"><img src="http://www-fusijie-com.qiniudn.com/playcocos2dx37_2.png" alt="" border="0" title="" /><br></br></div>


<p><strong>注意：</strong></p>

<p>这里需要特别注意的是应用签名这一项。在第三步的时候，真机中成功运行Cocos2dxWechat.apk之后，我们需要从微信开放平台下载一个签名生成软件<a href="https://open.weixin.qq.com/cgi-bin/frame?t=resource/res_main_tmpl&amp;verify=1&amp;lang=zh_CN&amp;token=2788af648d5164d0feec470a8bfd42f9833ae887">GenSignature</a>（资源下载->Android资源下载）。</p>

<p>安装签名生成后，打开软件输入游戏包名获取即可。</p>

<div align="center"><img src="http://www-fusijie-com.qiniudn.com/playcocos2dx37_3.png" alt="" border="0" title="" /><br></br></div>


<p>这里的签名和游戏的包名和keystore是相关联的，如果修改了包名或者更换了keystore，必须同步更新微信开放平台管理中心的信息，防止失效。本示例采用的是debug签名。在完成以上工作后，提交审核即可。说是7天，实际上一般1～2天就审核过了。</p>

<h3>5.集成微信SDK</h3>

<p>刚才都是铺垫，这里开始才是进入主题了。要在Cocos2d-x调用微信安卓SDK，Jni跑不掉的。这里只演示如何进行分享到朋友圈和分享给好友，微信SDK还有很多高级的功能，如支付，收藏等等接口，有需要自行<a href="https://open.weixin.qq.com/cgi-bin/frame?t=resource/res_main_tmpl&amp;verify=1&amp;lang=zh_CN&amp;token=2788af648d5164d0feec470a8bfd42f9833ae887">参考文档（移动应用开发）</a>进行开发。</p>

<p>这里主要分成3部分来解释：</p>

<ul>
<li>微信SDK下载，jar包导入</li>
<li>Android代码</li>
<li>C++代码</li>
</ul>


<p>（1）下载微信SDK</p>

<p><a href="https://open.weixin.qq.com/cgi-bin/frame?t=resource/res_main_tmpl&amp;verify=1&amp;lang=zh_CN&amp;token=2788af648d5164d0feec470a8bfd42f9833ae887">资源下载->Android资源下载</a></p>

<p>（2）打开下载的Android_SDK.zip。解压，将lib目录下的libammsdk.jar拷到Cocos2dxWechat项目下的libs目录。</p>

<p>（3）右键单击工程，选择Build Path中的Configure Build Path&hellip;，选中Libraries这个tab，并通过Add Jars&hellip;导入工程libs目录下的libammsdk.jar文件。</p>

<div align="center"><img src="http://www-fusijie-com.qiniudn.com/playcocos2dx37_4.png" alt="" border="0" title="" /><br></br></div>


<p>（4）在AppActivity中添加成员变量</p>

<figure class='code'><figcaption><span>增加成员变量</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">APP_ID</span> <span class="o">=</span> <span class="s">&quot;wx1234567890&quot;</span><span class="o">;</span><span class="c1">//AppID，从第四步获取</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">IWXAPI</span> <span class="n">api</span><span class="o">;</span><span class="c1">//微信API接口</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">AppActivity</span> <span class="n">instance</span><span class="o">;</span><span class="c1">//类静态实例，为了方便后面静态函数的调用</span>
</span></code></pre></td></tr></table></div></figure>


<p>（5）注册到微信</p>

<p>打开AppActivity，在onCreate()中调用regToWX()注册到微信</p>

<figure class='code'><figcaption><span>注册到微信</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// TODO Auto-generated method stub</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">instance</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>      <span class="n">regToWX</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">regToWX</span><span class="o">(){</span>
</span><span class='line'>      <span class="n">api</span> <span class="o">=</span> <span class="n">WXAPIFactory</span><span class="o">.</span><span class="na">createWXAPI</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">APP_ID</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>      <span class="n">api</span><span class="o">.</span><span class="na">registerApp</span><span class="o">(</span><span class="n">APP_ID</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>（6）由于这里采用的分享示例传递了一张icon，所以需要额外的一个bitmap的解析类Util类，这个类可以到微信官方SDK demo下载，也可以在本示例中下载（早期的SDK版本这个类是集成在微信SDK中）。icon放在res目录下的drawable目录，我这里偷个懒直接使用了应用icon。</p>

<p>（7）分享给好友</p>

<figure class='code'><figcaption><span>分享给好友</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">sendMsgToFriend</span><span class="o">(){</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">api</span><span class="o">.</span><span class="na">openWXApp</span><span class="o">())</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">WXWebpageObject</span> <span class="n">webpage</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WXWebpageObject</span><span class="o">();</span>
</span><span class='line'>            <span class="n">webpage</span><span class="o">.</span><span class="na">webpageUrl</span> <span class="o">=</span> <span class="s">&quot;http://fusijie.github.io&quot;</span><span class="o">;</span>
</span><span class='line'>            <span class="n">WXMediaMessage</span> <span class="n">msg</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WXMediaMessage</span><span class="o">(</span><span class="n">webpage</span><span class="o">);</span>
</span><span class='line'>            <span class="n">msg</span><span class="o">.</span><span class="na">title</span> <span class="o">=</span> <span class="s">&quot;Tittle&quot;</span><span class="o">;</span>
</span><span class='line'>            <span class="n">msg</span><span class="o">.</span><span class="na">description</span> <span class="o">=</span> <span class="s">&quot;Description&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Bitmap</span> <span class="n">thumb</span> <span class="o">=</span> <span class="n">BitmapFactory</span><span class="o">.</span><span class="na">decodeResource</span><span class="o">(</span><span class="n">instance</span><span class="o">.</span><span class="na">getResources</span><span class="o">(),</span> <span class="n">R</span><span class="o">.</span><span class="na">drawable</span><span class="o">.</span><span class="na">icon</span><span class="o">);</span>
</span><span class='line'>            <span class="n">msg</span><span class="o">.</span><span class="na">thumbData</span> <span class="o">=</span> <span class="n">Util</span><span class="o">.</span><span class="na">bmpToByteArray</span><span class="o">(</span><span class="n">thumb</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">SendMessageToWX</span><span class="o">.</span><span class="na">Req</span> <span class="n">req</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SendMessageToWX</span><span class="o">.</span><span class="na">Req</span><span class="o">();</span>
</span><span class='line'>            <span class="n">req</span><span class="o">.</span><span class="na">transaction</span> <span class="o">=</span> <span class="n">buildTransaction</span><span class="o">(</span><span class="s">&quot;webpage&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">req</span><span class="o">.</span><span class="na">message</span> <span class="o">=</span> <span class="n">msg</span><span class="o">;</span>
</span><span class='line'>            <span class="n">req</span><span class="o">.</span><span class="na">scene</span> <span class="o">=</span> <span class="n">SendMessageToWX</span><span class="o">.</span><span class="na">Req</span><span class="o">.</span><span class="na">WXSceneSession</span><span class="o">;</span>
</span><span class='line'>            <span class="n">api</span><span class="o">.</span><span class="na">sendReq</span><span class="o">(</span><span class="n">req</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>           <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">instance</span><span class="o">,</span> <span class="s">&quot;未安装微信&quot;</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>（8）分享到朋友圈</p>

<figure class='code'><figcaption><span>分享到朋友圈</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">sendMsgToTimeLine</span><span class="o">(){</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">api</span><span class="o">.</span><span class="na">openWXApp</span><span class="o">())</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span><span class="o">(</span><span class="n">api</span><span class="o">.</span><span class="na">getWXAppSupportAPI</span><span class="o">()</span> <span class="o">&gt;=</span> <span class="mh">0x21020001</span><span class="o">)</span>
</span><span class='line'>          <span class="o">{</span>                
</span><span class='line'>              <span class="n">WXWebpageObject</span> <span class="n">webpage</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WXWebpageObject</span><span class="o">();</span>
</span><span class='line'>                <span class="n">webpage</span><span class="o">.</span><span class="na">webpageUrl</span> <span class="o">=</span> <span class="s">&quot;http://fusijie.github.io&quot;</span><span class="o">;</span>
</span><span class='line'>                <span class="n">WXMediaMessage</span> <span class="n">msg</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WXMediaMessage</span><span class="o">(</span><span class="n">webpage</span><span class="o">);</span>
</span><span class='line'>                <span class="n">msg</span><span class="o">.</span><span class="na">title</span> <span class="o">=</span> <span class="s">&quot;Tittle&quot;</span><span class="o">;</span>
</span><span class='line'>                <span class="n">msg</span><span class="o">.</span><span class="na">description</span> <span class="o">=</span> <span class="s">&quot;Description&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">Bitmap</span> <span class="n">thumb</span> <span class="o">=</span> <span class="n">BitmapFactory</span><span class="o">.</span><span class="na">decodeResource</span><span class="o">(</span><span class="n">instance</span><span class="o">.</span><span class="na">getResources</span><span class="o">(),</span> <span class="n">R</span><span class="o">.</span><span class="na">drawable</span><span class="o">.</span><span class="na">icon</span><span class="o">);</span>
</span><span class='line'>                <span class="n">msg</span><span class="o">.</span><span class="na">thumbData</span> <span class="o">=</span> <span class="n">Util</span><span class="o">.</span><span class="na">bmpToByteArray</span><span class="o">(</span><span class="n">thumb</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">SendMessageToWX</span><span class="o">.</span><span class="na">Req</span> <span class="n">req</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SendMessageToWX</span><span class="o">.</span><span class="na">Req</span><span class="o">();</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">transaction</span> <span class="o">=</span> <span class="n">buildTransaction</span><span class="o">(</span><span class="s">&quot;webpage&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">message</span> <span class="o">=</span> <span class="n">msg</span><span class="o">;</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">scene</span> <span class="o">=</span> <span class="n">SendMessageToWX</span><span class="o">.</span><span class="na">Req</span><span class="o">.</span><span class="na">WXSceneTimeline</span><span class="o">;</span>
</span><span class='line'>                <span class="n">api</span><span class="o">.</span><span class="na">sendReq</span><span class="o">(</span><span class="n">req</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">else</span><span class="o">{</span>
</span><span class='line'>              <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">instance</span><span class="o">,</span> <span class="s">&quot;微信版本过低&quot;</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>              
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>           <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">instance</span><span class="o">,</span> <span class="s">&quot;未安装微信&quot;</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中buildTransaction()用于生成一个唯一的会话标识符。</p>

<figure class='code'><figcaption><span>buildTransaction</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">buildTransaction</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">(</span><span class="n">type</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">())</span> <span class="o">:</span> <span class="n">type</span> <span class="o">+</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码不难，所以不再逐行解释，可以参考<a href="https://open.weixin.qq.com/zh_CN/htmledition/res/dev/document/sdk/android/index.html">SDK文档</a>。</p>

<p>（9）JNI调用</p>

<p>在Classes目录下新建一个WeixinShare类，主要包含2个静态函数：</p>

<figure class='code'><figcaption><span>Jni调用分享给好友和朋友圈</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="kt">void</span> <span class="n">WeiXinShare</span><span class="o">::</span><span class="n">sendToFriend</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>  <span class="err">#</span><span class="k">if</span> <span class="p">(</span><span class="n">CC_TARGET_PLATFORM</span> <span class="o">==</span> <span class="n">CC_PLATFORM_ANDROID</span><span class="p">)</span> <span class="c1">//判断当前是否为Android平台</span>
</span><span class='line'>    <span class="n">JniMethodInfo</span> <span class="n">minfo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">isHave</span> <span class="o">=</span> <span class="n">JniHelper</span><span class="o">::</span><span class="n">getStaticMethodInfo</span><span class="p">(</span><span class="n">minfo</span><span class="p">,</span><span class="s">&quot;org/cocos2dx/cpp/AppActivity&quot;</span><span class="p">,</span><span class="s">&quot;sendMsgToFriend&quot;</span><span class="p">,</span> <span class="s">&quot;()V&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isHave</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">log</span><span class="p">(</span><span class="s">&quot;jni:sendMsgToFriend is null&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>        <span class="c1">//调用此函数</span>
</span><span class='line'>        <span class="n">minfo</span><span class="p">.</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">CallStaticVoidMethod</span><span class="p">(</span><span class="n">minfo</span><span class="p">.</span><span class="n">classID</span><span class="p">,</span> <span class="n">minfo</span><span class="p">.</span><span class="n">methodID</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="err">#</span><span class="n">endif</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="n">WeiXinShare</span><span class="o">::</span><span class="n">sendToTimeLine</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>  <span class="err">#</span><span class="k">if</span> <span class="p">(</span><span class="n">CC_TARGET_PLATFORM</span> <span class="o">==</span> <span class="n">CC_PLATFORM_ANDROID</span><span class="p">)</span> <span class="c1">//判断当前是否为Android平台</span>
</span><span class='line'>    <span class="n">JniMethodInfo</span> <span class="n">minfo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">isHave</span> <span class="o">=</span> <span class="n">JniHelper</span><span class="o">::</span><span class="n">getStaticMethodInfo</span><span class="p">(</span><span class="n">minfo</span><span class="p">,</span><span class="s">&quot;org/cocos2dx/cpp/AppActivity&quot;</span><span class="p">,</span><span class="s">&quot;sendMsgToTimeLine&quot;</span><span class="p">,</span> <span class="s">&quot;()V&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isHave</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">log</span><span class="p">(</span><span class="s">&quot;jni:sendMsgToTimeLine is null&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>        <span class="c1">//调用此函数</span>
</span><span class='line'>        <span class="n">minfo</span><span class="p">.</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">CallStaticVoidMethod</span><span class="p">(</span><span class="n">minfo</span><span class="p">.</span><span class="n">classID</span><span class="p">,</span> <span class="n">minfo</span><span class="p">.</span><span class="n">methodID</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="err">#</span><span class="n">endif</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>（10）Cocos2d-x使用</p>

<p>这个就比较简单了，只要包含这个WeiXinShare类，调用这两个静态函数即可。</p>

<figure class='code'><figcaption><span>主程序调用</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">menuCloseCallback</span><span class="p">(</span><span class="n">Ref</span><span class="o">*</span> <span class="n">pSender</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="cp">#if (CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID)</span>
</span><span class='line'><span class="c1">//WeiXinShare::sendToFriend();</span>
</span><span class='line'><span class="n">WeiXinShare</span><span class="o">::</span><span class="n">sendToTimeLine</span><span class="p">();</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>（11）Android.mk的修改</p>

<p>最后不要忘记修改Android.mk文件。</p>

<pre><code>LOCAL_SRC_FILES := hellocpp/main.cpp \
               ../../Classes/AppDelegate.cpp \
               ../../Classes/HelloWorldScene.cpp \
               ../../Classes/WeiXinShare.cpp
</code></pre>

<p>（12）重新交叉编译，打包为APK即可</p>

<h3>6.效果</h3>

<p><strong>分享给好友</strong></p>

<div align="center"><img src="http://www-fusijie-com.qiniudn.com/playcocos2dx37_5.png" alt="" border="0" title="" /><br></br></div>


<p><strong>分享到朋友圈</strong></p>

<div align="center"><img src="http://www-fusijie-com.qiniudn.com/playcocos2dx37_6.png" alt="" border="0" title="" /><br></br></div>


<h3>7.总结</h3>

<p>本文写的比较详细，但是也忽略了比如如何接收微信的请求及返回值的说明以及如何进行混淆等等，算是一个初级教程吧。主要是面向对jni调用，第三方安卓sdk集成不太了解的朋友。这里虽然只是针对微信sdk的部分功能集成进行说明，但是道理都是共通的，如何集成微博分享，如何集成第三方广告等等，用类似的方法都可以实现。</p>

<p>本demo的下载地址：<a href="https://github.com/fusijie/Cocos2dx-Wechat">我的Github</a></p>

<p class='post-footer'>&nbsp;原文地址：<a href='http://fusijie.github.io/blog/2014/08/21/play-cocos2dx-37/'>http://fusijie.github.io/blog/2014/08/21/play-cocos2dx-37/</a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之三十六】Earth Warrior 3D 大揭秘]]></title>
    <link href="http://fusijie.github.io/blog/2014/07/10/play-cocos2dx-36/"/>
    <updated>2014-07-10T00:13:00+08:00</updated>
    <id>http://fusijie.github.io/blog/2014/07/10/play-cocos2dx-36</id>
    <content type="html"><![CDATA[<p>3D游戏现在玩起来门槛还是挺高的。不过如果在Cocos2d-x引擎加入3D扩展，实现2.5D游戏效果又会怎么样？</p>

<h3>1.概述</h3>

<p>先上大会现场演示图：</p>

<div align="center"><img src="http://www-fusijie-com.qiniudn.com/4196_140316183412_1.JPG" alt="" border="0" title="" /><br></br></div>




<!-- more -->


<p>Apk下载：<a href="http://pan.baidu.com/s/1ntM75bV">http://pan.baidu.com/s/1ntM75bV</a></p>

<p>源码下载：<a href="https://github.com/chukong/EarthWarrior3D.git">https://github.com/chukong/EarthWarrior3D.git</a>，给个star不费电。。。</p>

<p>开发环境：Cocos2d-x v3.0 + Sprite3D扩展</p>

<p>适用平台：Mac/iOS/Android</p>

<h3>2.Sprite3D扩展</h3>

<p><strong>2.1. Sprite3D</strong></p>

<p>sprite3D扩展目前可以支持加载静态obj模型。</p>

<figure class='code'><figcaption><span>Sprite3D使用</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="k">auto</span> <span class="n">model</span> <span class="o">=</span> <span class="n">Sprite3D</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;3dmodel.obj&quot;</span><span class="p">,</span> <span class="s">&quot;texture.png&quot;</span><span class="p">);</span>
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p><strong>2.2. Toon Shading</strong></p>

<p>Cocos2d-x精灵不能做发光效果，而Sprite3D中加入了发光函数，指定outline width和color就行了。</p>

<figure class='code'><figcaption><span>设置边缘发光</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="n">model</span><span class="o">-&gt;</span><span class="n">setOutline</span><span class="p">(</span><span class="mf">1.5</span><span class="p">,</span> <span class="n">Color3B</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span> <span class="c1">// 设置发光宽度1.5，黑色</span>
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p><strong>2.3. 3D API</strong></p>

<p>3D API是Cocos2d-x v3.0就具有的属性，源码可以到Node上看。</p>

<figure class='code'><figcaption><span>设置位置和旋转</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="n">node</span><span class="o">-&gt;</span><span class="n">setPosition3D</span><span class="p">(</span><span class="n">Vertex3F</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">));</span><span class="c1">//设置位置  </span>
</span><span class='line'>  <span class="n">Vertex3F</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">getPosition3D</span><span class="p">();</span>
</span><span class='line'>  <span class="n">node</span><span class="o">-&gt;</span><span class="n">setRotation3D</span><span class="p">(</span><span class="n">Vertex3F</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">));</span><span class="c1">//设置旋转  </span>
</span><span class='line'>  <span class="n">Vertex3F</span> <span class="n">rot</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">getRotation3D</span><span class="p">();</span>
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p>其中Vertex3F当然就是指定了三维空间。而3D API同样也移植到了一些动作中，比如：</p>

<figure class='code'><figcaption><span>3D旋转</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="n">node</span><span class="o">-&gt;</span><span class="n">runAction</span><span class="p">(</span><span class="n">RotateBy</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">Vertex3F</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">)));</span>
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p>完全没问题。</p>

<h3>3.EarthWarrior</h3>

<p>Classes/3d文件夹包含了Sprite3D。其余文件为游戏逻辑控制，游戏总共三个场景</p>

<p><strong>3.1. 主菜单界面（MainMenuScene）</strong>
包含：主菜单场景（MainMenuScene），飞机模型（Plane），License和Credits层（LicenseLayer）。</p>

<div align="center"><img src="http://www-fusijie-com.qiniudn.com/20140328095139203.png" alt="" border="0" title="" /><br></br></div>


<p>关键点：</p>

<p><em>①主界面3D飞机的实现</em></p>

<figure class='code'><figcaption><span>主界面3D飞机的实现</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="c1">//Plane.cpp  </span>
</span><span class='line'>  <span class="n">_Model</span> <span class="o">=</span> <span class="n">Sprite3D</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;playerv002.obj&quot;</span><span class="p">,</span> <span class="s">&quot;playerv002_256.png&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">_Model</span><span class="p">){</span>
</span><span class='line'>      <span class="n">_Model</span><span class="o">-&gt;</span><span class="n">setScale</span><span class="p">(</span><span class="mi">55</span><span class="p">);</span>
</span><span class='line'>      <span class="p">((</span><span class="n">Sprite3D</span><span class="o">*</span><span class="p">)</span><span class="n">_Model</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">setOutline</span><span class="p">(</span><span class="mf">0.035</span><span class="p">,</span> <span class="n">Color3B</span><span class="o">::</span><span class="n">BLACK</span><span class="p">);</span>
</span><span class='line'>      <span class="n">_Model</span><span class="o">-&gt;</span><span class="n">setRotation3D</span><span class="p">(</span><span class="n">Vertex3F</span><span class="p">(</span><span class="n">originX</span><span class="p">,</span><span class="n">originY</span><span class="p">,</span><span class="n">originZ</span><span class="p">));</span>
</span><span class='line'>      <span class="k">this</span><span class="o">-&gt;</span><span class="n">setRotation3D</span><span class="p">(</span><span class="n">Vertex3F</span><span class="p">(</span><span class="n">originX</span><span class="p">,</span> <span class="n">originY</span><span class="p">,</span> <span class="n">originZ</span><span class="p">));</span>
</span><span class='line'>      <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">_Model</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="o">-&gt;</span><span class="n">scheduleUpdate</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>②对数学感兴趣的可以研究一下scheduleUpdate怎样让飞机晃啊晃。。。粒子系统这里就不再重复了。</em></p>

<figure class='code'><figcaption><span>设置飞机摇晃</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="kt">void</span> <span class="n">Plane</span><span class="o">::</span><span class="n">update</span><span class="p">(</span><span class="kt">float</span> <span class="n">dt</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">pRate</span><span class="o">+=</span><span class="mf">0.01</span><span class="p">;</span>
</span><span class='line'>      <span class="n">_Model</span><span class="o">-&gt;</span><span class="n">setRotation3D</span><span class="p">(</span><span class="n">Vertex3F</span><span class="p">(</span><span class="mi">0</span><span class="o">-</span><span class="n">pXA</span><span class="o">*</span><span class="n">sin</span><span class="p">(</span><span class="n">pXW</span><span class="o">*</span><span class="n">pRate</span><span class="p">),</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="o">-</span><span class="n">pZA</span><span class="o">*</span><span class="n">sin</span><span class="p">(</span><span class="n">pZW</span><span class="o">*</span><span class="n">pRate</span><span class="p">)));</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>3.2. 载入界面（LoadingScene）</strong></p>

<p>包含：载入场景（LoadingScene）,粒子管理器(ParticleManager)</p>

<div align="center"><img src="http://www-fusijie-com.qiniudn.com/20140328095149734.png" alt="" border="0" title="" /><br></br></div>


<p>关键点：</p>

<p><em>①Loading界面实现资源的预加载，包括音乐，纹理，粒子效果，其中纹理使用异步加载，粒子效果在ParticleManager（单例类）中加载。</em></p>

<p><em>②同时Loading界面也实现了游戏元素的预创建并保存在全局池中，避免游戏过程中的卡顿现象和反复create的低效，包括四类敌机和导弹Missile，在update中实现每帧创建一个，避免LoadingScene的卡顿。</em></p>

<p><em>③cocos Logo的旋转动画</em></p>

<figure class='code'><figcaption><span>cocos Logo旋转动画</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="kt">void</span> <span class="n">LoadingScene</span><span class="o">::</span><span class="n">InitCoco</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">Size</span> <span class="n">visibleSize</span> <span class="o">=</span> <span class="n">Director</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getVisibleSize</span><span class="p">();</span>
</span><span class='line'>      <span class="k">auto</span> <span class="n">coco</span> <span class="o">=</span> <span class="n">Sprite3D</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;coconut.obj&quot;</span><span class="p">,</span> <span class="s">&quot;coco.png&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">coco</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">coco</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">Point</span><span class="p">(</span><span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="mi">150</span><span class="p">));</span>
</span><span class='line'>          <span class="n">coco</span><span class="o">-&gt;</span><span class="n">setOutline</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="n">Color3B</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span>
</span><span class='line'>          <span class="n">addChild</span><span class="p">(</span><span class="n">coco</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>          <span class="n">coco</span><span class="o">-&gt;</span><span class="n">runAction</span><span class="p">(</span><span class="n">RepeatForever</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">RotateBy</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="mf">0.8f</span><span class="p">,</span><span class="n">Vertex3F</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">360</span><span class="p">,</span><span class="mi">0</span><span class="p">))));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>3.3. 游戏界面（HelloWorldScene）</strong></p>

<p>包含：游戏层（GameLayer），游戏元素基类（GameEntity），飞机类（AirCraft），玩家类（Player），敌机类（Enemies，又包括Fodder，FodderLeader，BigDude，Boss四类敌机），子弹类（Bullet，又包括PlayerBullet，Missile两类子弹），效果管理类（EffectManager），爆炸类（Explosion，又包括SmallExplosion，BigExplosion，BulletExplosion），游戏控制层（GameController，又包括BulletController，EnemyController和GameController），游戏结束层（GameOverLayer）</p>

<div align="center"><img src="http://www-fusijie-com.qiniudn.com/20140328095145093.png" alt="" border="0" title="" /><br></br></div>


<p>关键点：</p>

<p><em>①玩家和敌机的子弹控制统一在BulletController::spawnBullet中处理。如上述游戏元素保存在全局池中，可回收利用，避免反复创建，spawnBullet会先从这个池中取出，如果该池为空才会创建对于的子弹。</em></p>

<p><em>②敌机的处理也是采用相同的方式，在EnemyController::spawnEnemy中处理，如果该池为空才会创建对于的敌机。</em></p>

<p><em>③GameLayer::gameMaster管理敌机的出现的频率。</em></p>

<p><em>④GameController::update管理游戏的碰撞检测。</em></p>

<p>除了一些数学上的计算比较羞涩意外，整个游戏的逻辑还是比较简单的。。。这里就不细说了，大家直接看源码吧。。。<p class='post-footer'>&nbsp;原文地址：<a href='http://fusijie.github.io/blog/2014/07/10/play-cocos2dx-36/'><a href="http://fusijie.github.io/blog/2014/07/10/play-cocos2dx-36/">http://fusijie.github.io/blog/2014/07/10/play-cocos2dx-36/</a></a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之三十五】《我叫MT offline》Demo]]></title>
    <link href="http://fusijie.github.io/blog/2014/02/25/play-cocos2dx-35/"/>
    <updated>2014-02-25T19:43:00+08:00</updated>
    <id>http://fusijie.github.io/blog/2014/02/25/play-cocos2dx-35</id>
    <content type="html"><![CDATA[<h3>1.写在前面</h3>

<p><strong>这是怎样一个游戏？</strong></p>

<p>这是一个最好的时代。软件跑在硬件之前，而创意跑在软件之前。除去那些跨时代的作品（现在还没出，比如体感，识别等等和硬件强相关的游戏），现在的手游对技术的要求门槛已经大大降低了。这是个创意决定市场的时代。</p>

<p>（1）比如早些时候的愤怒小鸟，植物僵尸，水果忍者，这些是智能机刚刚诞生的时候出来的，可以说是借iphone引领的触屏之风顺势而行火了一把，这种机会可遇不可求。</p>

<p>（2）再如飞机大战，FlappyBird，这些是利用怀旧风，无差别竞技以及用户口碑营销堆起来的游戏，这靠的要么后台硬有干爹，要么祖坟正运气好，如果都没有，想火也很难。</p>

<p>（3）又如卡牌，COC，横版格斗，这些靠的是真正的创意。由此引来的一堆跟风之作就能看出来，几千万的月流水也证明了这一点，第一个想到创意，第一个抢到市场就是赢家。但是再来山寨就没意思了。</p>

<p><em>MT就是这样一款一出现就让人眼前一亮的游戏，我期待手游市场天天都能出现不一样的作品，能抓住用户的游戏，而不是反复的换皮圈钱关服走人。</em></p>

<!-- more -->


<p><strong>我为什么要写这么一个demo？</strong></p>

<p>对于一个游戏狂热份子，当《我叫MT》出来的时候，新奇的玩法，酷炫的卡牌，流畅的动画，以及WOW情结，让我找不到理由拒绝它（虽然到现在蛋疼的用户体验和反人类设计还有不少）。每个游戏都有自己的生命周期，这些是跑不掉的，或许卓越的钱还没有赚够，但我希望这款游戏最后能有一个体面的结局。</p>

<p>从MT ios一区开始，玩到现在也近一年半了。它陪伴我历经了很多事情，如人饮水冷暖自知。每个程序员都有一颗做游戏的心。在决定进入游戏行业后，我决定写个MT的demo出来，算是感谢也算是怀念。说来也巧，当初找来各种版本的《我叫MT》反编译拿游戏资源为的只是为了收集所有的卡牌图片，结果后面发现2.3以后的版本都做了资源加密处理。所以手上只有2.3版的资源，这个demo就按着2.3版做。</p>

<p><strong>《我叫MT offline》这个游戏能做什么？</strong></p>

<p>其实它什么也做不了，只是游戏的整体框架以及所有动画的demo，由于写的比较赶，很多功能都没有来得及实现，代码也写的比较粗糙。接下来我会继续完善它，我的最终目的是把它改成单机版的《我叫MT offline》。它的工作量太大了，而且体力活占大部分，所以代码模块化复用和游戏内存优化显得很重要。如果不用赔60亿我会考虑把源码推上<a href="https://github.com/fusijie">Github</a>。</p>

<p>游戏采用VS2012+cocos2d-x v2.2.0开发。</p>

<h3>2.游戏结构和效果</h3>

<p><strong>公告</strong></p>

<div align="center"><img src="http://fusijie.github.io/images/Blog/mt/announcement.png" alt="" border="0" title="4" /><br></br></div>


<p><strong>游戏</strong></p>

<center><embed src="http://player.youku.com/player.php/sid/XNjc3ODI3NjY0/v.swf" allowFullScreen="true" quality="high" width="480" height="400" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"></embed></center>


<p>录了个视频，我会尽快放出apk。</p>

<p><strong>开幕故事</strong></p>

<p><a href="http://fusijie.github.io/images/Blog/mt/story.gif">http://fusijie.github.io/images/Blog/mt/story.gif</a></p>

<p><strong>游戏主场景</strong></p>

<p><a href="http://fusijie.github.io/images/Blog/mt/mainui.gif">http://fusijie.github.io/images/Blog/mt/mainui.gif</a></p>

<p><strong>英雄</strong></p>

<p><a href="http://fusijie.github.io/images/Blog/mt/card.gif">http://fusijie.github.io/images/Blog/mt/card.gif</a></p>

<p><strong>进化</strong></p>

<p><a href="http://fusijie.github.io/images/Blog/mt/evolve.gif">http://fusijie.github.io/images/Blog/mt/evolve.gif</a></p>

<p><strong>碎片</strong></p>

<p><a href="http://fusijie.github.io/images/Blog/mt/chip.gif">http://fusijie.github.io/images/Blog/mt/chip.gif</a></p>

<p><strong>升级</strong></p>

<p><a href="http://fusijie.github.io/images/Blog/mt/levelup.gif">http://fusijie.github.io/images/Blog/mt/levelup.gif</a></p>

<p><strong>奖励</strong></p>

<p><a href="http://fusijie.github.io/images/Blog/mt/task.gif">http://fusijie.github.io/images/Blog/mt/task.gif</a></p>

<p><strong>技能学院</strong></p>

<p><a href="http://fusijie.github.io/images/Blog/mt/colleage.gif">http://fusijie.github.io/images/Blog/mt/colleage.gif</a></p>

<p><strong>副本列表</strong></p>

<p><a href="http://fusijie.github.io/images/Blog/mt/instance.gif">http://fusijie.github.io/images/Blog/mt/instance.gif</a></p>

<p><strong>副本战斗</strong></p>

<p><a href="http://fusijie.github.io/images/Blog/mt/battle.gif">http://fusijie.github.io/images/Blog/mt/battle.gif</a></p>

<p><strong>竞技场</strong></p>

<p><a href="http://fusijie.github.io/images/Blog/mt/arena.gif">http://fusijie.github.io/images/Blog/mt/arena.gif</a></p>

<p><strong>商店</strong></p>

<p><a href="http://fusijie.github.io/images/Blog/mt/store.gif">http://fusijie.github.io/images/Blog/mt/store.gif</a></p>

<p><strong>单次抽奖</strong></p>

<p><a href="http://fusijie.github.io/images/Blog/mt/raffleone.gif">http://fusijie.github.io/images/Blog/mt/raffleone.gif</a></p>

<p><strong>十连抽</strong></p>

<p><a href="http://fusijie.github.io/images/Blog/mt/raffleten.gif">http://fusijie.github.io/images/Blog/mt/raffleten.gif</a></p>

<p><strong>好友</strong></p>

<p><a href="http://fusijie.github.io/images/Blog/mt/friend.gif">http://fusijie.github.io/images/Blog/mt/friend.gif</a></p>

<p><strong>攻略</strong></p>

<p><a href="http://fusijie.github.io/images/Blog/mt/more.gif">http://fusijie.github.io/images/Blog/mt/more.gif</a><p class='post-footer'>&nbsp;原文地址：<a href='http://fusijie.github.io/blog/2014/02/25/play-cocos2dx-35/'><a href="http://fusijie.github.io/blog/2014/02/25/play-cocos2dx-35/">http://fusijie.github.io/blog/2014/02/25/play-cocos2dx-35/</a></a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之三十四】绘图：CCDrawingPrimitives和CCDrawNode]]></title>
    <link href="http://fusijie.github.io/blog/2014/02/08/play-cocos2dx-34/"/>
    <updated>2014-02-08T16:10:00+08:00</updated>
    <id>http://fusijie.github.io/blog/2014/02/08/play-cocos2dx-34</id>
    <content type="html"><![CDATA[<p>最近忙出翔了，这年过的也揪心。好久没来更新博客了，今天就来写一写cocos2d-x中图形的绘制。</p>

<h3>1.概述</h3>

<p>其实cocos2d-x封装了大量的opengl的绘图函数，我们可以很轻松的在游戏中调用。但是实际上我们很少会这么做，因为编码绘图的方式效率实在太低了，尤其是诸如一些高阶贝塞尔曲线之类的，官方也不建议这么做，使用图像能更有效的提高绘图效率，同时也会更为的美观，也减少了一些精灵遮挡问题和边缘锯齿问题。cocos2d-x中绘图主要有两种方式：CCDrawingPrimitives和CCDrawNode。它们都在cocos2dx\draw_nodes目录下。</p>

<!-- more -->


<h3>2.CCDrawingPrimitives（原生绘图）</h3>

<p><strong>2.1.特点</strong></p>

<p>CCDrawingPrimitives必须在节点的draw函数中调用，draw函数每帧被调用一次，主要做一些绘制的工作。但这并不意味着它就是静态不可改变的，我们完全可以通过修改描绘内容的方式来动态绘图。比如可以直接在用触摸的方式在屏幕上绘图。</p>

<p>另外，使用CCDrawingPrimitives绘图默认的Z-Order是0，所以可能会被其他节点覆盖，因为它无法设置Z-Order，所以只能通过设置其他节点的Z-Order为负值使得绘图在最前端得以看见。</p>

<p><strong>2.2.API</strong></p>

<figure class='code'><figcaption><span>CCDrawingPrimitives API</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="c1">//绘制一个给定x，y值的点  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">CC_DLL</span> <span class="n">ccDrawPoint</span><span class="p">(</span> <span class="k">const</span> <span class="n">CCPoint</span><span class="o">&amp;</span> <span class="n">point</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//绘制一组点  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">CC_DLL</span> <span class="n">ccDrawPoints</span><span class="p">(</span> <span class="k">const</span> <span class="n">CCPoint</span> <span class="o">*</span><span class="n">points</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">numberOfPoints</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//绘制一条给定起始点和目标点的直线  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">CC_DLL</span> <span class="n">ccDrawLine</span><span class="p">(</span> <span class="k">const</span> <span class="n">CCPoint</span><span class="o">&amp;</span> <span class="n">origin</span><span class="p">,</span> <span class="k">const</span> <span class="n">CCPoint</span><span class="o">&amp;</span> <span class="n">destination</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//绘制一个给定起始点和目标点的矩形  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">CC_DLL</span> <span class="n">ccDrawRect</span><span class="p">(</span> <span class="n">CCPoint</span> <span class="n">origin</span><span class="p">,</span> <span class="n">CCPoint</span> <span class="n">destination</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//绘制一个给定起始点和目标点和颜色的矩形  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">CC_DLL</span> <span class="n">ccDrawSolidRect</span><span class="p">(</span> <span class="n">CCPoint</span> <span class="n">origin</span><span class="p">,</span> <span class="n">CCPoint</span> <span class="n">destination</span><span class="p">,</span> <span class="n">ccColor4F</span> <span class="n">color</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//绘制一个给定一组点的多边形，可以是闭合或开放  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">CC_DLL</span> <span class="n">ccDrawPoly</span><span class="p">(</span> <span class="k">const</span> <span class="n">CCPoint</span> <span class="o">*</span><span class="n">vertices</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">numOfVertices</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">closePolygon</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//绘制一个给定一组点和颜色的多边形  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">CC_DLL</span> <span class="n">ccDrawSolidPoly</span><span class="p">(</span> <span class="k">const</span> <span class="n">CCPoint</span> <span class="o">*</span><span class="n">poli</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">numberOfPoints</span><span class="p">,</span> <span class="n">ccColor4F</span> <span class="n">color</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//绘制一个给定中心，半径，分段数的圆  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">CC_DLL</span> <span class="n">ccDrawCircle</span><span class="p">(</span> <span class="k">const</span> <span class="n">CCPoint</span><span class="o">&amp;</span> <span class="n">center</span><span class="p">,</span> <span class="kt">float</span> <span class="n">radius</span><span class="p">,</span> <span class="kt">float</span> <span class="n">angle</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">segments</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">drawLineToCenter</span><span class="p">,</span> <span class="kt">float</span> <span class="n">scaleX</span><span class="p">,</span> <span class="kt">float</span> <span class="n">scaleY</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">CC_DLL</span> <span class="n">ccDrawCircle</span><span class="p">(</span> <span class="k">const</span> <span class="n">CCPoint</span><span class="o">&amp;</span> <span class="n">center</span><span class="p">,</span> <span class="kt">float</span> <span class="n">radius</span><span class="p">,</span> <span class="kt">float</span> <span class="n">angle</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">segments</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">drawLineToCenter</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//绘制一个带一个控制点的贝塞尔曲线（二次）  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">CC_DLL</span> <span class="n">ccDrawQuadBezier</span><span class="p">(</span><span class="k">const</span> <span class="n">CCPoint</span><span class="o">&amp;</span> <span class="n">origin</span><span class="p">,</span> <span class="k">const</span> <span class="n">CCPoint</span><span class="o">&amp;</span> <span class="n">control</span><span class="p">,</span> <span class="k">const</span> <span class="n">CCPoint</span><span class="o">&amp;</span> <span class="n">destination</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">segments</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//绘制一个带两个控制点的贝塞尔曲线（高阶）  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">CC_DLL</span> <span class="n">ccDrawCubicBezier</span><span class="p">(</span><span class="k">const</span> <span class="n">CCPoint</span><span class="o">&amp;</span> <span class="n">origin</span><span class="p">,</span> <span class="k">const</span> <span class="n">CCPoint</span><span class="o">&amp;</span> <span class="n">control1</span><span class="p">,</span> <span class="k">const</span> <span class="n">CCPoint</span><span class="o">&amp;</span> <span class="n">control2</span><span class="p">,</span> <span class="k">const</span> <span class="n">CCPoint</span><span class="o">&amp;</span> <span class="n">destination</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">segments</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//绘制默认曲率的基数样条  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">CC_DLL</span> <span class="n">ccDrawCatmullRom</span><span class="p">(</span> <span class="n">CCPointArray</span> <span class="o">*</span><span class="n">arrayOfControlPoints</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">segments</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//绘制指定曲率的基数样条  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">CC_DLL</span> <span class="n">ccDrawCardinalSpline</span><span class="p">(</span> <span class="n">CCPointArray</span> <span class="o">*</span><span class="n">config</span><span class="p">,</span> <span class="kt">float</span> <span class="n">tension</span><span class="p">,</span>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">segments</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//设置绘制颜色，4个byte型  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">CC_DLL</span> <span class="n">ccDrawColor4B</span><span class="p">(</span> <span class="n">GLubyte</span> <span class="n">r</span><span class="p">,</span> <span class="n">GLubyte</span> <span class="n">g</span><span class="p">,</span> <span class="n">GLubyte</span> <span class="n">b</span><span class="p">,</span> <span class="n">GLubyte</span> <span class="n">a</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//设置绘制颜色，4个float型  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">CC_DLL</span> <span class="n">ccDrawColor4F</span><span class="p">(</span> <span class="n">GLfloat</span> <span class="n">r</span><span class="p">,</span> <span class="n">GLfloat</span> <span class="n">g</span><span class="p">,</span> <span class="n">GLfloat</span> <span class="n">b</span><span class="p">,</span> <span class="n">GLfloat</span> <span class="n">a</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//设置点大小，默认为1  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">CC_DLL</span> <span class="n">ccPointSize</span><span class="p">(</span> <span class="n">GLfloat</span> <span class="n">pointSize</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>2.3.示例</strong></p>

<p>代码使用的是TestCpp中代码。</p>

<div align="center"><img src="http://img.blog.csdn.net/20140207170619906?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="" /><br></br></div>


<h3>3.CCDrawNode（绘图节点）</h3>

<p><strong>3.1.特点</strong></p>

<p>CCDrawNode从CCNode继承而来，是一个图形绘制的节点类，它提供了几个常用的点线面函数方便绘图，其实在之前的游戏遮罩一文中就有写过。相较于CCDrawingPrimitives，这里更推荐使用CCDrawNode。</p>

<p><em>（1）它将绘图封装为普通节点的方式进行处理，符合cocos2d-x树状编程的思想，同时也避免了一些遮盖的问题。</em></p>

<p><em>（2）不需要在draw函数中调用。</em></p>

<p><em>（3）使用批处理绘图，提高了绘图效率。</em></p>

<p><strong>3.2.API</strong></p>

<figure class='code'><figcaption><span>CCDrawNode API</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="c1">//绘制一个指定位置，大小，颜色的点  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">drawDot</span><span class="p">(</span><span class="k">const</span> <span class="n">CCPoint</span> <span class="o">&amp;</span><span class="n">pos</span><span class="p">,</span> <span class="kt">float</span> <span class="n">radius</span><span class="p">,</span> <span class="k">const</span> <span class="n">ccColor4F</span> <span class="o">&amp;</span><span class="n">color</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//绘制一个指定起点终点，大小，颜色的点  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">drawSegment</span><span class="p">(</span><span class="k">const</span> <span class="n">CCPoint</span> <span class="o">&amp;</span><span class="n">from</span><span class="p">,</span> <span class="k">const</span> <span class="n">CCPoint</span> <span class="o">&amp;</span><span class="n">to</span><span class="p">,</span> <span class="kt">float</span> <span class="n">radius</span><span class="p">,</span> <span class="k">const</span> <span class="n">ccColor4F</span> <span class="o">&amp;</span><span class="n">color</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//绘制一个指定点，填充颜色，边框颜色的，边框宽度的多边形  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">drawPolygon</span><span class="p">(</span><span class="n">CCPoint</span> <span class="o">*</span><span class="n">verts</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">count</span><span class="p">,</span> <span class="k">const</span> <span class="n">ccColor4F</span> <span class="o">&amp;</span><span class="n">fillColor</span><span class="p">,</span> <span class="kt">float</span> <span class="n">borderWidth</span><span class="p">,</span> <span class="k">const</span> <span class="n">ccColor4F</span> <span class="o">&amp;</span><span class="n">borderColor</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>3.3.示例</strong></p>

<p>代码也是TestCpp中的代码。</p>

<div align="center"><img src="http://img.blog.csdn.net/20140207170658078?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="" /><br></br></div>


<h3>4.源码下载</h3>

<p>可以自己看TestCpp示例，也可以从<a href="http://download.csdn.net/detail/jackyvincefu/6903357">这里</a>下载。<p class='post-footer'>&nbsp;原文地址：<a href='http://fusijie.github.io/blog/2014/02/08/play-cocos2dx-34/'><a href="http://fusijie.github.io/blog/2014/02/08/play-cocos2dx-34/">http://fusijie.github.io/blog/2014/02/08/play-cocos2dx-34/</a></a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之三十三】游戏嵌入Webview网页]]></title>
    <link href="http://fusijie.github.io/blog/2013/12/26/play-cocos2dx-33/"/>
    <updated>2013-12-26T14:11:00+08:00</updated>
    <id>http://fusijie.github.io/blog/2013/12/26/play-cocos2dx-33</id>
    <content type="html"><![CDATA[<p>手游《我叫MT》一开始会弹出一个游戏公告，有玩过的肯定都蛮熟悉的，这就是webview，就是一个网页。由于webview和平台相关，这里就介绍下cocos2d-x如何嵌入andorid的webview控件，在cocos2d-x中显示网页。</p>

<h3>1.Jni</h3>

<p>Jni这里我就不再多说了。可用参考<a href="http://en.wikipedia.org/wiki/Java_Native_Interface">wikipedia</a>，或者<a href="http://blog.csdn.net/jackystudio/article/details/12150907">微信飞机大战的移植篇</a>。通过Jni，可以实现在cocos2d-x中调用Android的API，当然也可以进行传值。</p>

<h3>2.Android使用webview</h3>

<p>直接上代码。主要是处理布局和webview使用的问题。这里采用代码布局。以下操作在android的主类（cocos2dxActivity）中处理。</p>

<!-- more -->


<p><strong>2.1.添加成员变量</strong></p>

<p>整个布局的结构是最底层一个FrameLayout，ImageView控件放置在FrameLayout上。然后之上是一个LinearLayout用来放置关闭按钮，LinearLayout往下是Webview控件。</p>

<figure class='code'><figcaption><span>成员变量</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">static</span> <span class="n">Test</span> <span class="n">test</span>  <span class="o">=</span> <span class="kc">null</span><span class="o">;</span><span class="c1">//Test实例  </span>
</span><span class='line'>    <span class="n">WebView</span> <span class="n">m_webView</span><span class="o">;</span><span class="c1">//WebView控件  </span>
</span><span class='line'>    <span class="n">ImageView</span> <span class="n">m_imageView</span><span class="o">;</span><span class="c1">//ImageView控件  </span>
</span><span class='line'>    <span class="n">FrameLayout</span> <span class="n">m_webLayout</span><span class="o">;</span><span class="c1">//FrameLayout布局  </span>
</span><span class='line'>    <span class="n">LinearLayout</span> <span class="n">m_topLayout</span><span class="o">;</span><span class="c1">//LinearLayout布局  </span>
</span><span class='line'>    <span class="n">Button</span> <span class="n">m_backButton</span><span class="o">;</span><span class="c1">//关闭按钮  </span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>2.2.OnCreate中添加FrameLayout布局</strong></p>

<figure class='code'><figcaption><span>添加FrameLayout布局</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">){</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>          <span class="n">test</span><span class="o">=</span><span class="k">this</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">//初始化一个空布局  </span>
</span><span class='line'>          <span class="n">m_webLayout</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FrameLayout</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>          <span class="n">FrameLayout</span><span class="o">.</span><span class="na">LayoutParams</span> <span class="n">lytp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FrameLayout</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">(</span><span class="mi">800</span><span class="o">,</span><span class="mi">640</span><span class="o">);</span>
</span><span class='line'>          <span class="n">lytp</span> <span class="o">.</span><span class="na">gravity</span> <span class="o">=</span> <span class="n">Gravity</span><span class="o">.</span><span class="na">CENTER</span><span class="o">;</span>
</span><span class='line'>          <span class="n">addContentView</span><span class="o">(</span><span class="n">m_webLayout</span><span class="o">,</span> <span class="n">lytp</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong>2.3.返回实例</strong></p>

<figure class='code'><figcaption><span>返回实例</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kd">static</span> <span class="n">Test</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="s">&quot;TestJacky&quot;</span><span class="o">,</span><span class="s">&quot;getInstance&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">test</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>2.4.显示webview</strong></p>

<figure class='code'><figcaption><span>显示webview</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">openWebview</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="s">&quot;TestJacky&quot;</span><span class="o">,</span> <span class="s">&quot;openWebView&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">runOnUiThread</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span><span class="c1">//在主线程里添加别的控件  </span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">//初始化webView  </span>
</span><span class='line'>              <span class="n">m_webView</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WebView</span><span class="o">(</span><span class="n">test</span><span class="o">);</span>
</span><span class='line'>              <span class="c1">//设置webView能够执行javascript脚本  </span>
</span><span class='line'>              <span class="n">m_webView</span><span class="o">.</span><span class="na">getSettings</span><span class="o">().</span><span class="na">setJavaScriptEnabled</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>              <span class="c1">//设置可以支持缩放  </span>
</span><span class='line'>              <span class="n">m_webView</span><span class="o">.</span><span class="na">getSettings</span><span class="o">().</span><span class="na">setSupportZoom</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span><span class="c1">//设置出现缩放工具  </span>
</span><span class='line'>              <span class="n">m_webView</span><span class="o">.</span><span class="na">getSettings</span><span class="o">().</span><span class="na">setBuiltInZoomControls</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>              <span class="c1">//载入URL  </span>
</span><span class='line'>              <span class="n">m_webView</span><span class="o">.</span><span class="na">loadUrl</span><span class="o">(</span><span class="s">&quot;http://m.blog.csdn.net/blog/jackyvincefu/&quot;</span><span class="o">);</span>
</span><span class='line'>              <span class="c1">//使页面获得焦点  </span>
</span><span class='line'>              <span class="n">m_webView</span><span class="o">.</span><span class="na">requestFocus</span><span class="o">();</span>
</span><span class='line'>              <span class="c1">//如果页面中链接，如果希望点击链接继续在当前browser中响应  </span>
</span><span class='line'>              <span class="n">m_webView</span><span class="o">.</span><span class="na">setWebViewClient</span><span class="o">(</span><span class="k">new</span> <span class="n">WebViewClient</span><span class="o">(){</span>
</span><span class='line'>                  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">shouldOverrideUrlLoading</span><span class="o">(</span><span class="n">WebView</span> <span class="n">view</span><span class="o">,</span> <span class="n">String</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                      <span class="k">if</span><span class="o">(</span><span class="n">url</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="s">&quot;tel:&quot;</span><span class="o">)&lt;</span><span class="mi">0</span><span class="o">){</span>
</span><span class='line'>                          <span class="n">view</span><span class="o">.</span><span class="na">loadUrl</span><span class="o">(</span><span class="n">url</span><span class="o">);</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//背景图  </span>
</span><span class='line'>            <span class="n">m_imageView</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ImageView</span><span class="o">(</span><span class="n">test</span><span class="o">);</span>
</span><span class='line'>            <span class="n">m_imageView</span><span class="o">.</span><span class="na">setImageResource</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">drawable</span><span class="o">.</span><span class="na">bkgnd</span><span class="o">);</span>
</span><span class='line'>            <span class="n">m_imageView</span><span class="o">.</span><span class="na">setScaleType</span><span class="o">(</span><span class="n">ImageView</span><span class="o">.</span><span class="na">ScaleType</span><span class="o">.</span><span class="na">FIT_XY</span><span class="o">);</span>
</span><span class='line'>            <span class="c1">//初始化线性布局 里面加按钮和webView  </span>
</span><span class='line'>            <span class="n">m_topLayout</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinearLayout</span><span class="o">(</span><span class="n">test</span><span class="o">);</span>
</span><span class='line'>            <span class="n">m_topLayout</span><span class="o">.</span><span class="na">setOrientation</span><span class="o">(</span><span class="n">LinearLayout</span><span class="o">.</span><span class="na">VERTICAL</span><span class="o">);</span>
</span><span class='line'>            <span class="c1">//初始化返回按钮  </span>
</span><span class='line'>            <span class="n">m_backButton</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Button</span><span class="o">(</span><span class="n">test</span><span class="o">);</span>
</span><span class='line'>            <span class="n">m_backButton</span><span class="o">.</span><span class="na">setBackgroundResource</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">drawable</span><span class="o">.</span><span class="na">btn</span><span class="o">);</span>
</span><span class='line'>            <span class="n">LinearLayout</span><span class="o">.</span><span class="na">LayoutParams</span> <span class="n">lypt</span><span class="o">=</span><span class="k">new</span> <span class="n">LinearLayout</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">(</span><span class="n">LinearLayout</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">WRAP_CONTENT</span><span class="o">,</span> <span class="n">LinearLayout</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">WRAP_CONTENT</span><span class="o">);</span>
</span><span class='line'>            <span class="n">lypt</span><span class="o">.</span><span class="na">gravity</span><span class="o">=</span><span class="n">Gravity</span><span class="o">.</span><span class="na">RIGHT</span><span class="o">;</span>
</span><span class='line'>            <span class="n">m_backButton</span><span class="o">.</span><span class="na">setLayoutParams</span><span class="o">(</span><span class="n">lypt</span><span class="o">);</span>
</span><span class='line'>            <span class="n">m_backButton</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">removeWebView</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">});</span>
</span><span class='line'>            <span class="c1">//把image加到主布局里  </span>
</span><span class='line'>            <span class="n">m_webLayout</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">m_imageView</span><span class="o">);</span>
</span><span class='line'>            <span class="c1">//把webView加入到线性布局  </span>
</span><span class='line'>            <span class="n">m_topLayout</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">m_backButton</span><span class="o">);</span>
</span><span class='line'>            <span class="n">m_topLayout</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">m_webView</span><span class="o">);</span>
</span><span class='line'>            <span class="c1">//再把线性布局加入到主布局  </span>
</span><span class='line'>            <span class="n">m_webLayout</span><span class="o">.</span><span class="na">addView</span><span class="o">(</span><span class="n">m_topLayout</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">});</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong>2.5.移除webview</strong></p>

<figure class='code'><figcaption><span>移除webview</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">removeWebView</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">m_webLayout</span><span class="o">.</span><span class="na">removeView</span><span class="o">(</span><span class="n">m_imageView</span><span class="o">);</span>
</span><span class='line'>      <span class="n">m_imageView</span><span class="o">.</span><span class="na">destroyDrawingCache</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">m_webLayout</span><span class="o">.</span><span class="na">removeView</span><span class="o">(</span><span class="n">m_topLayout</span><span class="o">);</span>
</span><span class='line'>      <span class="n">m_topLayout</span><span class="o">.</span><span class="na">destroyDrawingCache</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">m_topLayout</span><span class="o">.</span><span class="na">removeView</span><span class="o">(</span><span class="n">m_webView</span><span class="o">);</span>
</span><span class='line'>      <span class="n">m_webView</span><span class="o">.</span><span class="na">destroy</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">m_topLayout</span><span class="o">.</span><span class="na">removeView</span><span class="o">(</span><span class="n">m_backButton</span><span class="o">);</span>
</span><span class='line'>      <span class="n">m_backButton</span><span class="o">.</span><span class="na">destroyDrawingCache</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>2.6.重写返回键</strong></p>

<figure class='code'><figcaption><span>重写返回键</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onKeyDown</span><span class="o">(</span><span class="kt">int</span> <span class="n">keyCoder</span><span class="o">,</span><span class="n">KeyEvent</span> <span class="n">event</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="c1">//如果网页能回退则后退，如果不能后退移除WebView  </span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">m_webView</span><span class="o">.</span><span class="na">canGoBack</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">keyCoder</span> <span class="o">==</span> <span class="n">KeyEvent</span><span class="o">.</span><span class="na">KEYCODE_BACK</span><span class="o">){</span>
</span><span class='line'>          <span class="n">m_webView</span><span class="o">.</span><span class="na">goBack</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span><span class="k">else</span><span class="o">{</span>
</span><span class='line'>          <span class="n">removeWebView</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3.cocos2d-x使用Jni</h3>

<p>这里直接使用HelloWorld的示例，修改了close按钮的回调函数。</p>

<p><strong>3.1.jni头文件</strong></p>

<figure class='code'><figcaption><span>jni头文件</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="err">#</span><span class="k">if</span> <span class="p">(</span><span class="n">CC_TARGET_PLATFORM</span> <span class="o">==</span> <span class="n">CC_PLATFORM_ANDROID</span><span class="p">)</span>
</span><span class='line'>  <span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">jni</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="err">#</span><span class="n">include</span> <span class="s">&quot;platform/android/jni/JniHelper.h&quot;</span>
</span><span class='line'>  <span class="err">#</span><span class="n">endif</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>3.2.Jni调用打开webview</strong></p>

<figure class='code'><figcaption><span>Jni调用打开webview</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">HelloWorld</span><span class="o">::</span><span class="n">menuCloseCallback</span><span class="p">(</span><span class="n">CCObject</span><span class="o">*</span> <span class="n">pSender</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">#</span><span class="k">if</span> <span class="p">(</span><span class="n">CC_TARGET_PLATFORM</span> <span class="o">==</span> <span class="n">CC_PLATFORM_ANDROID</span><span class="p">)</span>
</span><span class='line'>  <span class="n">JniMethodInfo</span> <span class="n">minfo</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">//getStaticMethodInfo，判断Java静态函数是否存在，并且把信息保存到minfo里  </span>
</span><span class='line'>  <span class="c1">//参数1：JniMethodInfo  </span>
</span><span class='line'>  <span class="c1">//参数2：Java类包名+类名  </span>
</span><span class='line'>  <span class="c1">//参数3：Java函数名称  </span>
</span><span class='line'>  <span class="c1">//参数4：函数参数类型和返回值类型  </span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">isHave</span> <span class="o">=</span> <span class="n">JniHelper</span><span class="o">::</span><span class="n">getStaticMethodInfo</span><span class="p">(</span><span class="n">minfo</span><span class="p">,</span><span class="s">&quot;com/jacky/test/Test&quot;</span><span class="p">,</span><span class="s">&quot;getInstance&quot;</span><span class="p">,</span><span class="s">&quot;()Lcom/jacky/test/Test;&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">jobject</span> <span class="n">jobj</span><span class="p">;</span><span class="c1">//存对象  </span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">isHave</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//这里的调用getInstance，返回Test类的对象。  </span>
</span><span class='line'>      <span class="n">jobj</span> <span class="o">=</span> <span class="n">minfo</span><span class="p">.</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">CallStaticObjectMethod</span><span class="p">(</span><span class="n">minfo</span><span class="p">.</span><span class="n">classID</span><span class="p">,</span> <span class="n">minfo</span><span class="p">.</span><span class="n">methodID</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">isHave</span> <span class="o">=</span> <span class="n">JniHelper</span><span class="o">::</span><span class="n">getMethodInfo</span><span class="p">(</span><span class="n">minfo</span><span class="p">,</span><span class="s">&quot;com/jacky/test/Test&quot;</span><span class="p">,</span><span class="s">&quot;openWebview&quot;</span><span class="p">,</span><span class="s">&quot;()V&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">isHave</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">//调用openWebview, 参数1：Test对象   参数2：方法ID  </span>
</span><span class='line'>          <span class="n">minfo</span><span class="p">.</span><span class="n">env</span><span class="o">-&gt;</span><span class="n">CallVoidMethod</span><span class="p">(</span><span class="n">jobj</span><span class="p">,</span> <span class="n">minfo</span><span class="p">.</span><span class="n">methodID</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="err">#</span><span class="k">else</span>
</span><span class='line'>      <span class="n">CCDirector</span><span class="o">::</span><span class="n">sharedDirector</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">end</span><span class="p">();</span>
</span><span class='line'>  <span class="err">#</span><span class="k">if</span> <span class="p">(</span><span class="n">CC_TARGET_PLATFORM</span> <span class="o">==</span> <span class="n">CC_PLATFORM_IOS</span><span class="p">)</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="err">#</span><span class="n">endif</span>
</span><span class='line'>  <span class="err">#</span><span class="n">endif</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4.效果图</h3>

<p>爪机截屏的。</p>

<div align="center"><img src="http://img.blog.csdn.net/20131226095754125?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="" /><br></br></div>




<div align="center"><img src="http://img.blog.csdn.net/20131226095821781?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="" /><br></br></div>




<div align="center"><img src="http://img.blog.csdn.net/20131226095849921?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="" /><br></br></div>


<p><em>ps：这里没有处理多次打开webview的情况。可以采用Jni方法来通知cocos2d-x，也可以直接在主类中设置一个成员变量标志位，调用openWebview时设置为true，removeWebView时设置为false，在调用openWebview时检测这个标志位来决定是否打开即可。</em></p>

<h3>5.源码下载</h3>

<p>包含win32，android代码，拿掉了android交叉编译生成的obj，保留so和apk文件。</p>

<p><a href="http://download.csdn.net/detail/jackyvincefu/6770315">下载地址</a></p>

<p class='post-footer'>&nbsp;原文地址：<a href='http://fusijie.github.io/blog/2013/12/26/play-cocos2dx-33/'>http://fusijie.github.io/blog/2013/12/26/play-cocos2dx-33/</a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之三十二】xml的解析]]></title>
    <link href="http://fusijie.github.io/blog/2013/12/18/play-cocos2dx-32/"/>
    <updated>2013-12-18T09:30:00+08:00</updated>
    <id>http://fusijie.github.io/blog/2013/12/18/play-cocos2dx-32</id>
    <content type="html"><![CDATA[<p>cocos2d-x中对xml的解析是采用的TinyXML库，而对plist的解析同时结合了CCDictionary来处理，这里简单介绍下cocos2d-x中解析xml的两种方式，也是常用的xml两个C++解析库：TinyXML和RapidXML。xml被设计用于数据存储和传输，重点是数据内容本身，而不像html，用于表现数据。</p>

<h3>1.TinyXML</h3>

<p><strong>1.1.概况</strong></p>

<p>TinyXML的<a href="http://www.grinninglizard.com/tinyxml/">主页</a>，本来不打算介绍这个库的，因为它的解析效率并不高，但是鉴于cocos2d-x采用的就是它，所以也稍微写一下它的用法，cocos2d-x使用的是TinyXML2，Github地址<a href="https://github.com/leethomason/tinyxml2">在这里</a>。就是对TinyXML重新进行了封装，具体的区别在其github上也写的很清楚了。</p>

<!-- more -->


<p><strong>1.2.示例</strong></p>

<p>这里不介绍API，因为太多了，在线手册也都有。首先下载TinyXML库，将4个cpp文件和2个h文件加入cocos2d-x中。添加头文件时只需添加&#8221;<em>tinyxml.h</em>&ldquo;即可。</p>

<p><strong>1.2.1.xml的创建</strong></p>

<figure class='code'><figcaption><span>xml的创建</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="kt">void</span> <span class="n">TestLayer</span><span class="o">::</span><span class="n">writeTinyXML</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">TiXmlDocument</span><span class="o">*</span> <span class="n">myTinyXMLDoc</span><span class="o">=</span><span class="k">new</span> <span class="n">TiXmlDocument</span><span class="p">();</span><span class="c1">//创建文档对象  </span>
</span><span class='line'>
</span><span class='line'>      <span class="n">TiXmlElement</span><span class="o">*</span> <span class="n">rootElement</span><span class="o">=</span><span class="k">new</span> <span class="n">TiXmlElement</span><span class="p">(</span><span class="s">&quot;Jacky&quot;</span><span class="p">);</span><span class="c1">//创建根节点并连接到文档  </span>
</span><span class='line'>      <span class="n">myTinyXMLDoc</span><span class="o">-&gt;</span><span class="n">LinkEndChild</span><span class="p">(</span><span class="n">rootElement</span><span class="p">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">TiXmlElement</span><span class="o">*</span> <span class="n">infoElement</span><span class="o">=</span><span class="k">new</span> <span class="n">TiXmlElement</span><span class="p">(</span><span class="s">&quot;Info&quot;</span><span class="p">);</span><span class="c1">//创建info节点并连接到根节点  </span>
</span><span class='line'>      <span class="n">rootElement</span><span class="o">-&gt;</span><span class="n">LinkEndChild</span><span class="p">(</span><span class="n">infoElement</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">infoElement</span><span class="o">-&gt;</span><span class="n">SetAttribute</span><span class="p">(</span><span class="s">&quot;Name&quot;</span><span class="p">,</span><span class="s">&quot;Jacky&quot;</span><span class="p">);</span><span class="c1">//为info节点设置属性  </span>
</span><span class='line'>      <span class="n">infoElement</span><span class="o">-&gt;</span><span class="n">SetAttribute</span><span class="p">(</span><span class="s">&quot;QQ&quot;</span><span class="p">,</span><span class="s">&quot;754505629&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">infoElement</span><span class="o">-&gt;</span><span class="n">SetAttribute</span><span class="p">(</span><span class="s">&quot;E-mail&quot;</span><span class="p">,</span><span class="s">&quot;Geek.Jacky@Gmail.com&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">TiXmlElement</span><span class="o">*</span> <span class="n">blogElement</span><span class="o">=</span><span class="k">new</span> <span class="n">TiXmlElement</span><span class="p">(</span><span class="s">&quot;blog&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">infoElement</span><span class="o">-&gt;</span><span class="n">LinkEndChild</span><span class="p">(</span><span class="n">blogElement</span><span class="p">);</span><span class="c1">//创建blog节点并连接到info节点  </span>
</span><span class='line'>      <span class="n">TiXmlText</span><span class="o">*</span> <span class="n">blogtext</span><span class="o">=</span><span class="k">new</span> <span class="n">TiXmlText</span><span class="p">(</span><span class="s">&quot;http://blog.csdn.net/jackystudio&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">blogElement</span><span class="o">-&gt;</span><span class="n">LinkEndChild</span><span class="p">(</span><span class="n">blogtext</span><span class="p">);</span><span class="c1">//为blog节点添加文本值  </span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">TiXmlElement</span><span class="o">*</span> <span class="n">websiteElenment</span><span class="o">=</span><span class="k">new</span> <span class="n">TiXmlElement</span><span class="p">(</span><span class="s">&quot;website&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">infoElement</span><span class="o">-&gt;</span><span class="n">LinkEndChild</span><span class="p">(</span><span class="n">websiteElenment</span><span class="p">);</span>
</span><span class='line'>      <span class="n">TiXmlText</span><span class="o">*</span> <span class="n">websitetext</span><span class="o">=</span><span class="k">new</span> <span class="n">TiXmlText</span><span class="p">(</span><span class="s">&quot;http://fusijie.github.io&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">websiteElenment</span><span class="o">-&gt;</span><span class="n">LinkEndChild</span><span class="p">(</span><span class="n">websitetext</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">myTinyXMLDoc</span><span class="o">-&gt;</span><span class="n">SaveFile</span><span class="p">(</span><span class="n">CCFileUtils</span><span class="o">::</span><span class="n">sharedFileUtils</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">fullPathForFilename</span><span class="p">(</span><span class="s">&quot;testTiny.xml&quot;</span><span class="p">).</span><span class="n">c_str</span><span class="p">());</span><span class="c1">//保存xml  </span>
</span><span class='line'>
</span><span class='line'>      <span class="k">delete</span> <span class="n">myTinyXMLDoc</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>是不是很奇怪为什么new了那么多内存，但最后只delete TixmlDocument呢？其实在TinyXML中，子节点的内存管理都由父节点进行维护，所以不必在释放内存时对每个子节点都进行释放，而只需要释放父节点即可。</p>

<p><strong>1.2.2.xml的读取</strong></p>

<figure class='code'><figcaption><span>xml的读取</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="kt">void</span> <span class="n">TestLayer</span><span class="o">::</span><span class="n">readTinyXML</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">TiXmlDocument</span><span class="o">*</span> <span class="n">myTinyXMLDoc</span><span class="o">=</span><span class="k">new</span> <span class="n">TiXmlDocument</span><span class="p">(</span><span class="n">CCFileUtils</span><span class="o">::</span><span class="n">sharedFileUtils</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">fullPathForFilename</span><span class="p">(</span><span class="s">&quot;testTiny.xml&quot;</span><span class="p">).</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>      <span class="n">myTinyXMLDoc</span><span class="o">-&gt;</span><span class="n">LoadFile</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">TiXmlElement</span><span class="o">*</span> <span class="n">rootElement</span> <span class="o">=</span> <span class="n">myTinyXMLDoc</span><span class="o">-&gt;</span><span class="n">RootElement</span><span class="p">();</span>  <span class="c1">//获取根节点  </span>
</span><span class='line'>      <span class="n">TiXmlElement</span><span class="o">*</span> <span class="n">infoElement</span> <span class="o">=</span> <span class="n">rootElement</span><span class="o">-&gt;</span><span class="n">FirstChildElement</span><span class="p">();</span>  <span class="c1">// 获取Info节点    </span>
</span><span class='line'>
</span><span class='line'>      <span class="k">while</span> <span class="p">(</span><span class="n">infoElement</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">TiXmlAttribute</span><span class="o">*</span> <span class="n">attributeOfinfo</span> <span class="o">=</span> <span class="n">infoElement</span><span class="o">-&gt;</span><span class="n">FirstAttribute</span><span class="p">();</span>  <span class="c1">//获得info的属性    </span>
</span><span class='line'>          <span class="k">while</span> <span class="p">(</span> <span class="n">attributeOfinfo</span> <span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">CCLOG</span><span class="p">(</span><span class="s">&quot;%s : %s&quot;</span><span class="p">,</span><span class="n">attributeOfinfo</span><span class="o">-&gt;</span><span class="n">Name</span><span class="p">(),</span><span class="n">attributeOfinfo</span><span class="o">-&gt;</span><span class="n">Value</span><span class="p">());</span><span class="c1">//获取所有属性  </span>
</span><span class='line'>              <span class="n">attributeOfinfo</span> <span class="o">=</span> <span class="n">attributeOfinfo</span><span class="o">-&gt;</span><span class="n">Next</span><span class="p">();</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">TiXmlElement</span><span class="o">*</span> <span class="n">blogElement</span> <span class="o">=</span> <span class="n">infoElement</span><span class="o">-&gt;</span><span class="n">FirstChildElement</span><span class="p">();</span><span class="c1">//获得blog  </span>
</span><span class='line'>          <span class="n">CCLOG</span><span class="p">(</span><span class="s">&quot;blog : %s&quot;</span><span class="p">,</span><span class="n">blogElement</span><span class="o">-&gt;</span><span class="n">GetText</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">TiXmlElement</span><span class="o">*</span> <span class="n">websiteElement</span> <span class="o">=</span> <span class="n">blogElement</span><span class="o">-&gt;</span><span class="n">NextSiblingElement</span><span class="p">();</span><span class="c1">//获取website    </span>
</span><span class='line'>          <span class="n">CCLOG</span><span class="p">(</span><span class="s">&quot;website : %s&quot;</span><span class="p">,</span><span class="n">websiteElement</span><span class="o">-&gt;</span><span class="n">GetText</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">infoElement</span> <span class="o">=</span> <span class="n">infoElement</span><span class="o">-&gt;</span><span class="n">NextSiblingElement</span><span class="p">();</span><span class="c1">//查找下一节点    </span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">delete</span> <span class="n">myTinyXMLDoc</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>2.RapidXML</h3>

<p><strong>2.1.概况</strong></p>

<p>RapidXML的<a href="http://rapidxml.sourceforge.net/">主页</a>。在其手册中第四节<a href="http://rapidxml.sourceforge.net/manual.html#namespacerapidxml_1performance">comparison with others parsers</a>可以看到在同等条件下它的解析效率是TinyXML的30到60倍，所以如果需要解析大文件的话，RapidXML是不二之选。</p>

<p><strong>2.2.示例</strong></p>

<p>首先下载RapidXML库，将四个hpp文件都加入cocos2d-x中，在包含头文件时，4个hpp都要进行包含。</p>

<p><strong>2.2.1.xml的创建</strong></p>

<figure class='code'><figcaption><span>xml的创建</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="kt">void</span> <span class="n">TestLayer</span><span class="o">::</span><span class="n">writeRapidXML</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">rapidxml</span><span class="o">::</span><span class="n">xml_document</span><span class="o">&lt;&gt;</span> <span class="n">myRapidXMLDoc</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">rapidxml</span><span class="o">::</span><span class="n">xml_node</span><span class="o">&lt;&gt;*</span> <span class="n">root</span> <span class="o">=</span> <span class="n">myRapidXMLDoc</span><span class="p">.</span><span class="n">allocate_node</span><span class="p">(</span><span class="n">rapidxml</span><span class="o">::</span><span class="n">node_element</span><span class="p">,</span><span class="s">&quot;Jacky&quot;</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span><span class="c1">//创建根节点  </span>
</span><span class='line'>      <span class="n">myRapidXMLDoc</span><span class="p">.</span><span class="n">append_node</span><span class="p">(</span><span class="n">root</span><span class="p">);</span><span class="c1">//追加根节点  </span>
</span><span class='line'>
</span><span class='line'>      <span class="n">rapidxml</span><span class="o">::</span><span class="n">xml_node</span><span class="o">&lt;&gt;*</span> <span class="n">info</span> <span class="o">=</span> <span class="n">myRapidXMLDoc</span><span class="p">.</span><span class="n">allocate_node</span><span class="p">(</span><span class="n">rapidxml</span><span class="o">::</span><span class="n">node_element</span><span class="p">,</span><span class="s">&quot;Info&quot;</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span><span class="c1">//创建info节点  </span>
</span><span class='line'>      <span class="n">info</span><span class="o">-&gt;</span><span class="n">append_attribute</span><span class="p">(</span><span class="n">myRapidXMLDoc</span><span class="p">.</span><span class="n">allocate_attribute</span><span class="p">(</span><span class="s">&quot;Name&quot;</span><span class="p">,</span><span class="s">&quot;Jacky&quot;</span><span class="p">));</span>
</span><span class='line'>      <span class="n">info</span><span class="o">-&gt;</span><span class="n">append_attribute</span><span class="p">(</span><span class="n">myRapidXMLDoc</span><span class="p">.</span><span class="n">allocate_attribute</span><span class="p">(</span><span class="s">&quot;QQ&quot;</span><span class="p">,</span><span class="s">&quot;754505629&quot;</span><span class="p">));</span>
</span><span class='line'>      <span class="n">info</span><span class="o">-&gt;</span><span class="n">append_attribute</span><span class="p">(</span><span class="n">myRapidXMLDoc</span><span class="p">.</span><span class="n">allocate_attribute</span><span class="p">(</span><span class="s">&quot;E-mail&quot;</span><span class="p">,</span><span class="s">&quot;Geek.Jacky@Gmail.com&quot;</span><span class="p">));</span>
</span><span class='line'>      <span class="n">root</span><span class="o">-&gt;</span><span class="n">append_node</span><span class="p">(</span><span class="n">info</span><span class="p">);</span><span class="c1">//追加info节点到root  </span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//创建blog和website节点并追加到root  </span>
</span><span class='line'>      <span class="n">rapidxml</span><span class="o">::</span><span class="n">xml_node</span><span class="o">&lt;&gt;*</span> <span class="n">blog</span> <span class="o">=</span> <span class="n">myRapidXMLDoc</span><span class="p">.</span><span class="n">allocate_node</span><span class="p">(</span><span class="n">rapidxml</span><span class="o">::</span><span class="n">node_element</span><span class="p">,</span><span class="s">&quot;blog&quot;</span><span class="p">,</span><span class="s">&quot;http://blog.csdn.net/jackystudio&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">info</span><span class="o">-&gt;</span><span class="n">append_node</span><span class="p">(</span><span class="n">blog</span><span class="p">);</span>
</span><span class='line'>      <span class="n">rapidxml</span><span class="o">::</span><span class="n">xml_node</span><span class="o">&lt;&gt;*</span> <span class="n">website</span> <span class="o">=</span> <span class="n">myRapidXMLDoc</span><span class="p">.</span><span class="n">allocate_node</span><span class="p">(</span><span class="n">rapidxml</span><span class="o">::</span><span class="n">node_element</span><span class="p">,</span><span class="s">&quot;website&quot;</span><span class="p">,</span><span class="s">&quot;http://fusijie.github.io&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">info</span><span class="o">-&gt;</span><span class="n">append_node</span><span class="p">(</span><span class="n">website</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//保存xml文档  </span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">text</span><span class="p">;</span>
</span><span class='line'>      <span class="n">rapidxml</span><span class="o">::</span><span class="n">print</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">back_inserter</span><span class="p">(</span><span class="n">text</span><span class="p">),</span> <span class="n">myRapidXMLDoc</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="n">CCLog</span><span class="p">(</span><span class="n">text</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">ofstream</span> <span class="n">out</span><span class="p">(</span><span class="n">CCFileUtils</span><span class="o">::</span><span class="n">sharedFileUtils</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">fullPathForFilename</span><span class="p">(</span><span class="s">&quot;testRapid.xml&quot;</span><span class="p">));</span>
</span><span class='line'>      <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="n">myRapidXMLDoc</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong>2.2.2.xml的读取</strong></p>

<figure class='code'><figcaption><span>xml的读取</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="kt">void</span> <span class="n">TestLayer</span><span class="o">::</span><span class="n">readRapidXML</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">rapidxml</span><span class="o">::</span><span class="n">file</span><span class="o">&lt;&gt;</span> <span class="n">fdoc</span><span class="p">(</span><span class="n">CCFileUtils</span><span class="o">::</span><span class="n">sharedFileUtils</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">fullPathForFilename</span><span class="p">(</span><span class="s">&quot;testRapid.xml&quot;</span><span class="p">).</span><span class="n">c_str</span><span class="p">());</span><span class="c1">//读取数据  </span>
</span><span class='line'>      <span class="n">CCLog</span><span class="p">(</span><span class="n">fdoc</span><span class="p">.</span><span class="n">data</span><span class="p">());</span>
</span><span class='line'>      <span class="n">rapidxml</span><span class="o">::</span><span class="n">xml_document</span><span class="o">&lt;&gt;</span> <span class="n">myRapidXMLDoc</span><span class="p">;</span>
</span><span class='line'>      <span class="n">myRapidXMLDoc</span><span class="p">.</span><span class="n">parse</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">(</span><span class="n">fdoc</span><span class="p">.</span><span class="n">data</span><span class="p">());</span><span class="c1">//将数据写入xml_document  </span>
</span><span class='line'>
</span><span class='line'>      <span class="n">rapidxml</span><span class="o">::</span><span class="n">xml_node</span><span class="o">&lt;&gt;*</span> <span class="n">root</span> <span class="o">=</span> <span class="n">myRapidXMLDoc</span><span class="p">.</span><span class="n">first_node</span><span class="p">();</span><span class="c1">//获取根节点  </span>
</span><span class='line'>
</span><span class='line'>      <span class="n">rapidxml</span><span class="o">::</span><span class="n">xml_node</span><span class="o">&lt;&gt;*</span> <span class="n">info</span> <span class="o">=</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">first_node</span><span class="p">();</span><span class="c1">//获取Info节点  </span>
</span><span class='line'>
</span><span class='line'>      <span class="n">rapidxml</span><span class="o">::</span><span class="n">xml_attribute</span><span class="o">&lt;&gt;*</span> <span class="n">info_attr</span> <span class="o">=</span> <span class="n">info</span><span class="o">-&gt;</span><span class="n">first_attribute</span><span class="p">();</span><span class="c1">//获取info属性  </span>
</span><span class='line'>      <span class="n">CCLog</span><span class="p">(</span><span class="s">&quot;%s:%s&quot;</span><span class="p">,</span><span class="n">info_attr</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">(),</span><span class="n">info_attr</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">());</span>
</span><span class='line'>      <span class="n">CCLog</span><span class="p">(</span><span class="s">&quot;%s:%s&quot;</span><span class="p">,</span><span class="n">info_attr</span><span class="o">-&gt;</span><span class="n">next_attribute</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">(),</span><span class="n">info_attr</span><span class="o">-&gt;</span><span class="n">next_attribute</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">());</span>
</span><span class='line'>      <span class="n">CCLog</span><span class="p">(</span><span class="s">&quot;%s:%s&quot;</span><span class="p">,</span><span class="n">info_attr</span><span class="o">-&gt;</span><span class="n">next_attribute</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">next_attribute</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">(),</span><span class="n">info_attr</span><span class="o">-&gt;</span><span class="n">next_attribute</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">next_attribute</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">rapidxml</span><span class="o">::</span><span class="n">xml_node</span><span class="o">&lt;&gt;*</span> <span class="n">blog</span><span class="o">=</span><span class="n">info</span><span class="o">-&gt;</span><span class="n">first_node</span><span class="p">();</span><span class="c1">//获取blog节点  </span>
</span><span class='line'>      <span class="n">CCLog</span><span class="p">(</span><span class="s">&quot;%s:%s&quot;</span><span class="p">,</span><span class="n">blog</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">(),</span><span class="n">blog</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">rapidxml</span><span class="o">::</span><span class="n">xml_node</span><span class="o">&lt;&gt;*</span> <span class="n">website</span><span class="o">=</span><span class="n">blog</span><span class="o">-&gt;</span><span class="n">next_sibling</span><span class="p">();</span><span class="c1">//获取website节点  </span>
</span><span class='line'>      <span class="n">CCLog</span><span class="p">(</span><span class="s">&quot;%s:%s&quot;</span><span class="p">,</span><span class="n">website</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">(),</span><span class="n">website</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3.生成xml的文件</h3>

<p>以上2种方式生成的xml文件内容如下：</p>

<figure class='code'><figcaption><span>生成的xml文件</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;Jacky&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Info</span> <span class="na">Name=</span><span class="s">&quot;Jacky&quot;</span> <span class="na">QQ=</span><span class="s">&quot;754505629&quot;</span> <span class="na">E-mail=</span><span class="s">&quot;Geek.Jacky@Gmail.com&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;blog&gt;</span>http://blog.csdn.net/jackystudio<span class="nt">&lt;/blog&gt;</span>
</span><span class='line'>        <span class="nt">&lt;website&gt;</span>http://fusijie.github.io<span class="nt">&lt;/website&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/Info&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/Jacky&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4.源码下载</h3>

<p><a href="http://download.csdn.net/detail/jackyvincefu/6732361">下载地址</a></p>

<p class='post-footer'>&nbsp;原文地址：<a href='http://fusijie.github.io/blog/2013/12/18/play-cocos2dx-32/'>http://fusijie.github.io/blog/2013/12/18/play-cocos2dx-32/</a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之三十一】服务器的网络通信编程]]></title>
    <link href="http://fusijie.github.io/blog/2013/12/17/play-cocos2dx-31/"/>
    <updated>2013-12-17T14:11:00+08:00</updated>
    <id>http://fusijie.github.io/blog/2013/12/17/play-cocos2dx-31</id>
    <content type="html"><![CDATA[<p>这里采用Apache+php搭建了一个简易服务器，服务端用php语言，客户端采用cocos2d-x的CCHttpClient类通过http方式访问服务端资源。模拟了cocos2d-x提交账户和密码到服务端，服务端校验帐号密码，如果正确返回客户端成功登录，如果错误则返回错误信息，同时在服务端后台保存登录log。第一次接触php，语法上和C/C++还是蛮像的，主要是给出一个cocos2d-x网络实例，代码中并没有做一些防呆纠错措施。</p>

<h3>1.搭建Apache+php网页服务器</h3>

<p>Apche2.2 x86版:<a href="http://pan.baidu.com/s/1vNuLF">下载地址</a></p>

<p>php5.2.17版:<a href="http://pan.baidu.com/s/17sFoN">下载地址</a></p>

<p>搭建过程参见<a href="http://tech.163.com/06/0206/11/299AMBLT0009159K.html">这里</a>，这里就不安装MySQL了。</p>

<!-- more -->


<p>搭建成功后，打开<a href="http://127.0.0.1">http://127.0.0.1</a>，就可以看到&#8221;<em>It&#8217; works!</em>&ldquo;字样。同时打开Apache monitor监控Apache处于运行状态。我这里使用的80端口。</p>

<h3>2.php收集表单的方式</h3>

<p>Http定义了与服务器交互的不同方法，最基本的方法有4种，分别是GET，POST，PUT，DELETE，对应着查改增删，这里介绍GET和POST。</p>

<p>用$_GET获取表单数据，表单数据对任何人都是可见的，比如</p>

<pre><code>http://www.w3school.com.cn/welcome.php?username=jackystudio&amp;password=123
</code></pre>

<p>用$_POST获取表单数据，表单数据则是不可见的，比如</p>

<pre><code>http://www.w3school.com.cn/welcome.php
</code></pre>

<p>详细可见<a href="http://www.w3school.com.cn/php">w3school有关php章节</a>。</p>

<h3>3.服务器php处理代码</h3>

<p>这里我直接修改了主页index.html。会C++应该都能看懂，先是打开一个log.txt，接收到username和password，如果是username是jackystudio，password是123的话，把username和password写入log.txt，并返回登录成功，如果username或password错误时返回登录失败。如果未接收到则返回没有用户名密码。</p>

<p><strong>3.1.采用get方式代码</strong></p>

<figure class='code'><figcaption><span>Get方式</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="nt">&lt;html&gt;</span>
</span><span class='line'>      <span class="nt">&lt;body&gt;</span>
</span><span class='line'>          <span class="cp">&lt;?php  </span>
</span><span class='line'><span class="cp">         $open=fopen(&quot;log.txt&quot;,&quot;a&quot; ); //Save password  </span>
</span><span class='line'><span class="cp">         if(isset($_GET[&quot;username&quot;]) &amp;&amp; isset($_GET[&quot;password&quot;]))  </span>
</span><span class='line'><span class="cp">         {  </span>
</span><span class='line'><span class="cp">             if($_GET[&quot;username&quot;]==&quot;jackystudio&quot; &amp;&amp; $_GET[&quot;password&quot;]==&quot;123&quot;)  </span>
</span><span class='line'><span class="cp">             {  </span>
</span><span class='line'><span class="cp">                 fwrite($open,&quot;Username:&quot;.$_GET[&quot;username&quot;]);  </span>
</span><span class='line'><span class="cp">                 fwrite($open,&quot;\r\n&quot;);  </span>
</span><span class='line'><span class="cp">                 fwrite($open,&quot;Password:&quot;.$_GET[&quot;password&quot;]);  </span>
</span><span class='line'><span class="cp">                 echo &quot;Login Success&quot;; //return to client  </span>
</span><span class='line'><span class="cp">             }  </span>
</span><span class='line'><span class="cp">             else  </span>
</span><span class='line'><span class="cp">             {  </span>
</span><span class='line'><span class="cp">                 fwrite($open,&quot;Wrong Username or password!&quot;);  </span>
</span><span class='line'><span class="cp">                 echo &quot;Login Failed&quot;; //return to client  </span>
</span><span class='line'><span class="cp">             }  </span>
</span><span class='line'><span class="cp">         }  </span>
</span><span class='line'><span class="cp">         else  </span>
</span><span class='line'><span class="cp">         {  </span>
</span><span class='line'><span class="cp">             fwrite($open,&quot;No password&quot;);  </span>
</span><span class='line'><span class="cp">             echo &quot;No Username or Password&quot;; //return to client  </span>
</span><span class='line'><span class="cp">         }  </span>
</span><span class='line'><span class="cp">         fclose($open);  </span>
</span><span class='line'><span class="cp">         ?&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>3.2.采用post方式代码</strong></p>

<figure class='code'><figcaption><span>Post方式</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="nt">&lt;html&gt;</span>
</span><span class='line'>      <span class="nt">&lt;body&gt;</span>
</span><span class='line'>          <span class="cp">&lt;?php  </span>
</span><span class='line'><span class="cp">         $open=fopen(&quot;log.txt&quot;,&quot;a&quot; ); //Save password  </span>
</span><span class='line'><span class="cp">         if(isset($_POST[&quot;username&quot;]) &amp;&amp; isset($_POST[&quot;password&quot;]))  </span>
</span><span class='line'><span class="cp">         {  </span>
</span><span class='line'><span class="cp">             if($_POST[&quot;username&quot;]==&quot;jackystudio&quot; &amp;&amp; $_POST[&quot;password&quot;]==&quot;123&quot;)  </span>
</span><span class='line'><span class="cp">             {  </span>
</span><span class='line'><span class="cp">                 fwrite($open,&quot;Username:&quot;.$_POST[&quot;username&quot;]);  </span>
</span><span class='line'><span class="cp">                 fwrite($open,&quot;\r\n&quot;);  </span>
</span><span class='line'><span class="cp">                 fwrite($open,&quot;Password:&quot;.$_POST[&quot;password&quot;]);  </span>
</span><span class='line'><span class="cp">                 echo &quot;Login Success&quot;; //return to client  </span>
</span><span class='line'><span class="cp">             }  </span>
</span><span class='line'><span class="cp">             else  </span>
</span><span class='line'><span class="cp">             {  </span>
</span><span class='line'><span class="cp">                 fwrite($open,&quot;Wrong Username or password!&quot;);  </span>
</span><span class='line'><span class="cp">                 echo &quot;Login Failed&quot;; //return to client  </span>
</span><span class='line'><span class="cp">             }  </span>
</span><span class='line'><span class="cp">         }  </span>
</span><span class='line'><span class="cp">         else  </span>
</span><span class='line'><span class="cp">         {  </span>
</span><span class='line'><span class="cp">             fwrite($open,&quot;No password&quot;);  </span>
</span><span class='line'><span class="cp">             echo &quot;No Username or Password&quot;; //return to client  </span>
</span><span class='line'><span class="cp">         }  </span>
</span><span class='line'><span class="cp">         fclose($open);  </span>
</span><span class='line'><span class="cp">         ?&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4.cocos2d-x使用CCHttpClient类进行网络请求</h3>

<p>CCHttpClient的使用这里也不赘述了，请移步官方文档How_to_use_CCHttpClient。这里在上文编辑框和点九图的基础上进行了修改。2个编辑框，分别是username和password。一个按钮点击发送请求。一个文本显示从服务器返回的结果。</p>

<p><strong>4.1.按钮请求处理</strong></p>

<figure class='code'><figcaption><span>按钮请求处理</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="kt">void</span> <span class="n">TestLayer</span><span class="o">::</span><span class="n">btncallback</span><span class="p">(</span> <span class="n">CCObject</span><span class="o">*</span> <span class="n">pSender</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="kt">bool</span> <span class="n">requestType_is_get</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="c1">//采用get方式或者post方式  </span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">requestType_is_get</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">CCHttpRequest</span><span class="o">*</span> <span class="n">request</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CCHttpRequest</span><span class="p">();</span><span class="c1">//创建请求对象  </span>
</span><span class='line'>          <span class="n">string</span> <span class="n">str1</span> <span class="o">=</span> <span class="s">&quot;127.0.0.1:80/index.html?&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="n">string</span> <span class="n">str2</span> <span class="o">=</span> <span class="n">p_User_EditBox</span><span class="o">-&gt;</span><span class="n">getText</span><span class="p">();</span><span class="c1">//获取username编辑框内容  </span>
</span><span class='line'>          <span class="n">string</span> <span class="n">str3</span> <span class="o">=</span> <span class="n">p_Psw_EditBox</span><span class="o">-&gt;</span><span class="n">getText</span><span class="p">();</span><span class="c1">//获取password编辑框内容  </span>
</span><span class='line'>          <span class="n">string</span> <span class="n">struser</span><span class="o">=</span><span class="s">&quot;username=&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="n">string</span> <span class="n">strpsw</span><span class="o">=</span><span class="s">&quot;&amp;password=&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="n">str1</span><span class="o">=</span><span class="n">str1</span><span class="o">+</span><span class="n">struser</span><span class="o">+</span><span class="n">str2</span><span class="o">+</span><span class="n">strpsw</span><span class="o">+</span><span class="n">str3</span><span class="p">;</span>
</span><span class='line'>          <span class="n">request</span><span class="o">-&gt;</span><span class="n">setUrl</span><span class="p">(</span><span class="n">str1</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span><span class="c1">//设置请求的url，username和password已经包含在url中  </span>
</span><span class='line'>          <span class="n">request</span><span class="o">-&gt;</span><span class="n">setRequestType</span><span class="p">(</span><span class="n">CCHttpRequest</span><span class="o">::</span><span class="n">kHttpGet</span><span class="p">);</span><span class="c1">//设置为Get模式  </span>
</span><span class='line'>          <span class="n">request</span><span class="o">-&gt;</span><span class="n">setResponseCallback</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">httpresponse_selector</span><span class="p">(</span><span class="n">TestLayer</span><span class="o">::</span><span class="n">onHttpRequestCompleted</span><span class="p">));</span><span class="c1">//设置响应的回调  </span>
</span><span class='line'>          <span class="n">request</span><span class="o">-&gt;</span><span class="n">setTag</span><span class="p">(</span><span class="s">&quot;GET test&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="n">CCHttpClient</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">send</span><span class="p">(</span><span class="n">request</span><span class="p">);</span><span class="c1">//发送请求  </span>
</span><span class='line'>          <span class="n">request</span><span class="o">-&gt;</span><span class="n">release</span><span class="p">();</span><span class="c1">//释放请求  </span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">CCHttpRequest</span><span class="o">*</span> <span class="n">request</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CCHttpRequest</span><span class="p">();</span><span class="c1">//创建请求对象  </span>
</span><span class='line'>          <span class="n">string</span> <span class="n">str1</span> <span class="o">=</span> <span class="s">&quot;127.0.0.1:80/index.html&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="n">string</span> <span class="n">str2</span> <span class="o">=</span> <span class="n">p_User_EditBox</span><span class="o">-&gt;</span><span class="n">getText</span><span class="p">();</span>
</span><span class='line'>          <span class="n">string</span> <span class="n">str3</span> <span class="o">=</span> <span class="n">p_Psw_EditBox</span><span class="o">-&gt;</span><span class="n">getText</span><span class="p">();</span>
</span><span class='line'>          <span class="n">string</span> <span class="n">struser</span><span class="o">=</span><span class="s">&quot;username=&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="n">string</span> <span class="n">strpsw</span><span class="o">=</span><span class="s">&quot;&amp;password=&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="n">str2</span><span class="o">=</span><span class="n">struser</span><span class="o">+</span><span class="n">str2</span><span class="o">+</span><span class="n">strpsw</span><span class="o">+</span><span class="n">str3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">request</span><span class="o">-&gt;</span><span class="n">setUrl</span><span class="p">(</span><span class="n">str1</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span><span class="c1">//设置请求的url，只是请求页面的url，并不包含username和password  </span>
</span><span class='line'>          <span class="n">request</span><span class="o">-&gt;</span><span class="n">setRequestType</span><span class="p">(</span><span class="n">CCHttpRequest</span><span class="o">::</span><span class="n">kHttpPost</span><span class="p">);</span><span class="c1">//设置为Post模式  </span>
</span><span class='line'>          <span class="n">request</span><span class="o">-&gt;</span><span class="n">setResponseCallback</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">httpresponse_selector</span><span class="p">(</span><span class="n">TestLayer</span><span class="o">::</span><span class="n">onHttpRequestCompleted</span><span class="p">));</span><span class="c1">//设置响应的回调  </span>
</span><span class='line'>
</span><span class='line'>          <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">postData</span> <span class="o">=</span> <span class="n">str2</span><span class="p">.</span><span class="n">c_str</span><span class="p">();</span>
</span><span class='line'>          <span class="n">request</span><span class="o">-&gt;</span><span class="n">setRequestData</span><span class="p">(</span><span class="n">postData</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">postData</span><span class="p">));</span><span class="c1">//设置请求数据，也就是username和password  </span>
</span><span class='line'>
</span><span class='line'>          <span class="n">request</span><span class="o">-&gt;</span><span class="n">setTag</span><span class="p">(</span><span class="s">&quot;POST test&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="n">CCHttpClient</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">send</span><span class="p">(</span><span class="n">request</span><span class="p">);</span><span class="c1">//发送请求  </span>
</span><span class='line'>          <span class="n">request</span><span class="o">-&gt;</span><span class="n">release</span><span class="p">();</span><span class="c1">//释放请求  </span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>4.2.响应回调处理</strong></p>

<figure class='code'><figcaption><span>响应回调处理</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="kt">void</span> <span class="n">TestLayer</span><span class="o">::</span><span class="n">onHttpRequestCompleted</span><span class="p">(</span> <span class="n">CCHttpClient</span><span class="o">*</span> <span class="n">client</span><span class="p">,</span> <span class="n">CCHttpResponse</span><span class="o">*</span> <span class="n">response</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">response</span><span class="o">-&gt;</span><span class="n">isSucceed</span><span class="p">())</span><span class="c1">//如果响应失败，输出错误信息  </span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">CCString</span> <span class="n">strError</span><span class="p">;</span>
</span><span class='line'>          <span class="n">strError</span><span class="p">.</span><span class="n">initWithFormat</span><span class="p">(</span><span class="s">&quot;Receive Error! </span><span class="se">\n</span><span class="s">%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">response</span><span class="o">-&gt;</span><span class="n">getErrorBuffer</span><span class="p">());</span>
</span><span class='line'>          <span class="n">m_labelStatusCode</span><span class="o">-&gt;</span><span class="n">setString</span><span class="p">(</span><span class="n">strError</span><span class="p">.</span><span class="n">getCString</span><span class="p">());</span>
</span><span class='line'>          <span class="k">return</span> <span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">buffer</span> <span class="o">=</span> <span class="n">response</span><span class="o">-&gt;</span><span class="n">getResponseData</span><span class="p">();</span><span class="c1">//接收响应信息  </span>
</span><span class='line'>      <span class="n">string</span> <span class="n">recieveData</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">buffer</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">recieveData</span> <span class="o">+=</span> <span class="p">(</span><span class="o">*</span><span class="n">buffer</span><span class="p">)[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">size_t</span> <span class="n">begin</span><span class="o">=</span> <span class="n">recieveData</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;&lt;body&gt;&quot;</span><span class="p">)</span><span class="o">+</span><span class="mi">6</span><span class="p">;</span><span class="c1">//这里简单处理，获取&lt;body&gt;标签内数据，即是响应内容  </span>
</span><span class='line'>      <span class="n">size_t</span> <span class="n">end</span><span class="o">=</span> <span class="n">recieveData</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;&lt;/body&gt;&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">string</span> <span class="n">result</span><span class="p">(</span><span class="n">recieveData</span><span class="p">,</span><span class="n">begin</span><span class="p">,</span><span class="n">end</span><span class="o">-</span><span class="n">begin</span><span class="p">);</span>
</span><span class='line'>      <span class="n">m_labelStatusCode</span><span class="o">-&gt;</span><span class="n">setString</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>5.效果图</h3>

<p><strong>5.1.Apache运行（Get和Post两种效果都是一样的）</strong></p>

<p><em>（1）帐号密码正确时</em></p>

<div align="center"><img src="http://img.blog.csdn.net/20131214145727843" alt="" border="0" title="登录成功" /><br></br></div>


<p><em>（2）帐号密码错误时</em></p>

<div align="center"><img src="http://img.blog.csdn.net/20131214145557531" alt="" border="0" title="登录失败" /><br></br></div>


<p><strong>5.2.关闭Apache</strong></p>

<div align="center"><img src="http://img.blog.csdn.net/20131214145740578" alt="" border="0" title="服务器关闭" /><br></br></div>


<h3>6.源码下载</h3>

<p><a href="http://download.csdn.net/detail/jackyvincefu/6713471">下载地址</a><p class='post-footer'>&nbsp;原文地址：<a href='http://fusijie.github.io/blog/2013/12/17/play-cocos2dx-31/'><a href="http://fusijie.github.io/blog/2013/12/17/play-cocos2dx-31/">http://fusijie.github.io/blog/2013/12/17/play-cocos2dx-31/</a></a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之三十】点九图和输入框的使用]]></title>
    <link href="http://fusijie.github.io/blog/2013/12/13/play-cocos2dx-30/"/>
    <updated>2013-12-13T11:53:00+08:00</updated>
    <id>http://fusijie.github.io/blog/2013/12/13/play-cocos2dx-30</id>
    <content type="html"><![CDATA[<p>登录界面一个帐号/密码输入框或者主角命名框是少不了的。这节就来了解一下点九图的输入框的使用。这里只是介绍基础知识，并不进行平台的移植，也不处理跨平台可能出现的问题。</p>

<h3>1.点九图CCScale9Sprite</h3>

<p><strong>1.1.概述</strong></p>

<p>点九图做过移动开发的肯定不会陌生。采用的是PNG点9图，PNG点9图可以自适应各种环境，同时保持伸缩不变形。移动端的UI基本上都是按这个来做的。点9图的制作很简单，用Android SDK的tool下的draw9patch.bat就可以制作。左为原理图，右为效果图。</p>

<!-- more -->




<div align="center"><img src="http://img.blog.csdn.net/20131213100101843?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="点九图" /><br></br></div>


<p><strong>1.2.使用</strong></p>

<p>cocos2d-x采用CCScale9Sprite来处理点九图，CCScale9Sprite为扩展类，所以在使用前需加入如下声明。</p>

<figure class='code'><figcaption><span>头文件和空间</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="err">#</span><span class="n">include</span> <span class="s">&quot;cocos-ext.h&quot;</span>
</span><span class='line'>  <span class="n">USING_NS_CC_EXT</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>CCScale9Sprite和CCSprite一样继承于CCNodeRGB，所以基本上可以像使用CCSprite一样使用CCScale9Sprite（有一点小差别CCSprite还继承了CCTextureProtocol接口）。以下用于创建一个二态点九图按钮。</p>

<figure class='code'><figcaption><span>创建点九图按钮</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="n">CCScale9Sprite</span><span class="o">*</span> <span class="n">confirmnormal</span><span class="o">=</span><span class="n">CCScale9Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;btn_style_alert_dialog_button_normal.9.png&quot;</span><span class="p">);</span><span class="c1">//normal态  </span>
</span><span class='line'>    <span class="n">confirmnormal</span><span class="o">-&gt;</span><span class="n">setContentSize</span><span class="p">(</span><span class="n">CCSizeMake</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span><span class="mi">70</span><span class="p">));</span><span class="c1">//设置大小  </span>
</span><span class='line'>    <span class="n">CCScale9Sprite</span><span class="o">*</span> <span class="n">confirmpressd</span><span class="o">=</span><span class="n">CCScale9Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;btn_style_alert_dialog_button_pressed.9.png&quot;</span><span class="p">);</span><span class="c1">//pressd态  </span>
</span><span class='line'>    <span class="n">confirmpressd</span><span class="o">-&gt;</span><span class="n">setContentSize</span><span class="p">(</span><span class="n">CCSizeMake</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span><span class="mi">70</span><span class="p">));</span><span class="c1">//设置大小  </span>
</span><span class='line'>    <span class="n">CCMenuItemSprite</span><span class="o">*</span> <span class="n">menuitem</span><span class="o">=</span><span class="n">CCMenuItemSprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">confirmnormal</span><span class="p">,</span><span class="n">confirmpressd</span><span class="p">,</span><span class="k">this</span><span class="p">,</span><span class="n">menu_selector</span><span class="p">(</span><span class="n">TestLayer</span><span class="o">::</span><span class="n">btncallback</span><span class="p">));</span>
</span><span class='line'>    <span class="n">CCMenu</span><span class="o">*</span> <span class="n">menu</span><span class="o">=</span><span class="n">CCMenu</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">menuitem</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span><span class="c1">//创建menu  </span>
</span><span class='line'>    <span class="n">menu</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">menu</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2.输入框CCEditBox</h3>

<p><strong>2.1.概述</strong></p>

<p>CCEditBox也是cocos2d-x的扩展类，所以和上面一样要进行头文件包含和命名空间声明。另外由于要监控输入框的各种状态，所以还必须实现CCEditBoxDelegate类，该类声明了以下接口：</p>

<figure class='code'><figcaption><span>CCEditBoxDelegate接口</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="c1">//当键盘弹出编辑框获得焦点时调用  </span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">editBoxEditingDidBegin</span><span class="p">(</span><span class="n">CCEditBox</span><span class="o">*</span> <span class="n">editBox</span><span class="p">)</span> <span class="p">{};</span>
</span><span class='line'>    <span class="c1">//当键盘消失编辑框失去焦点时调用  </span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">editBoxEditingDidEnd</span><span class="p">(</span><span class="n">CCEditBox</span><span class="o">*</span> <span class="n">editBox</span><span class="p">)</span> <span class="p">{};</span>
</span><span class='line'>    <span class="c1">//当编辑框文本改变时调用  </span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">editBoxTextChanged</span><span class="p">(</span><span class="n">CCEditBox</span><span class="o">*</span> <span class="n">editBox</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">text</span><span class="p">)</span> <span class="p">{};</span>
</span><span class='line'>    <span class="c1">//当返回键按下时或者点击了键盘以外的区域时调用  </span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">editBoxReturn</span><span class="p">(</span><span class="n">CCEditBox</span><span class="o">*</span> <span class="n">editBox</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>2.2.使用</strong></p>

<p>在TestLayer.cpp的init()中创建编辑框。</p>

<figure class='code'><figcaption><span>编辑框的使用</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="c1">//bool TestLayer::init()  </span>
</span><span class='line'>    <span class="n">CCSize</span> <span class="n">visibleSize</span><span class="o">=</span><span class="n">CCDirector</span><span class="o">::</span><span class="n">sharedDirector</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getVisibleSize</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pEditBox</span> <span class="o">=</span> <span class="n">CCEditBox</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">CCSizeMake</span><span class="p">(</span><span class="mi">250</span><span class="p">,</span><span class="mi">50</span><span class="p">),</span> <span class="n">CCScale9Sprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;login_edit_normal.9.png&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="n">pEditBox</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span><span class="o">*</span><span class="mi">3</span><span class="o">/</span><span class="mi">4</span><span class="p">));</span>
</span><span class='line'>    <span class="n">pEditBox</span><span class="o">-&gt;</span><span class="n">setFontColor</span><span class="p">(</span><span class="n">ccRED</span><span class="p">);</span><span class="c1">//设置字体颜色  </span>
</span><span class='line'>    <span class="n">pEditBox</span><span class="o">-&gt;</span><span class="n">setPlaceHolder</span><span class="p">(</span><span class="s">&quot;please input:&quot;</span><span class="p">);</span><span class="c1">//设置预置文本  </span>
</span><span class='line'>    <span class="n">pEditBox</span><span class="o">-&gt;</span><span class="n">setMaxLength</span><span class="p">(</span><span class="mi">8</span><span class="p">);</span><span class="c1">//设置最大长度  </span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//  kEditBoxInputModeAny: 开启任何文本的输入键盘,包括换行  </span>
</span><span class='line'>    <span class="c1">//  kEditBoxInputModeEmailAddr:   开启 邮件地址 输入类型键盘  </span>
</span><span class='line'>    <span class="c1">//  kEditBoxInputModeNumeric: 开启 数字符号 输入类型键盘  </span>
</span><span class='line'>    <span class="c1">//  kEditBoxInputModePhoneNumber: 开启 电话号码 输入类型键盘  </span>
</span><span class='line'>    <span class="c1">//  kEditBoxInputModeUrl: 开启 URL 输入类型键盘  </span>
</span><span class='line'>    <span class="c1">//  kEditBoxInputModeDecimal: 开启 数字 输入类型键盘，允许小数点  </span>
</span><span class='line'>    <span class="c1">//  kEditBoxInputModeSingleLine:  开启任何文本的输入键盘,不包括换行  </span>
</span><span class='line'>    <span class="n">pEditBox</span><span class="o">-&gt;</span><span class="n">setInputMode</span><span class="p">(</span><span class="n">kEditBoxInputModeAny</span><span class="p">);</span><span class="c1">//设置输入类型  </span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//kEditBoxInputFlagPassword:密码形式输入  </span>
</span><span class='line'>    <span class="c1">//kEditBoxInputFlagSensitive:   敏感数据输入、存储输入方案且预测自动完成  </span>
</span><span class='line'>    <span class="c1">//kEditBoxInputFlagInitialCapsWord: 每个单词首字母大写,并且伴有提示  </span>
</span><span class='line'>    <span class="c1">//kEditBoxInputFlagInitialCapsSentence: 第一句首字母大写,并且伴有提示  </span>
</span><span class='line'>    <span class="c1">//kEditBoxInputFlagInitialCapsAllCharacters:所有字符自动大写  </span>
</span><span class='line'>    <span class="n">pEditBox</span><span class="o">-&gt;</span><span class="n">setInputFlag</span><span class="p">(</span><span class="n">kEditBoxInputFlagPassword</span><span class="p">);</span><span class="c1">//设置输入标志位  </span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//  kKeyboardReturnTypeDefault:  默认使用键盘return 类型  </span>
</span><span class='line'>    <span class="c1">//  kKeyboardReturnTypeDone: 默认使用键盘return类型为“Done”字样  </span>
</span><span class='line'>    <span class="c1">//  kKeyboardReturnTypeSend: 默认使用键盘return类型为“Send”字样  </span>
</span><span class='line'>    <span class="c1">//  kKeyboardReturnTypeSearch:   默认使用键盘return类型为“Search”字样  </span>
</span><span class='line'>    <span class="c1">//  kKeyboardReturnTypeGo:   默认使用键盘return类型为“Go”字样  </span>
</span><span class='line'>    <span class="n">pEditBox</span><span class="o">-&gt;</span><span class="n">setReturnType</span><span class="p">(</span><span class="n">kKeyboardReturnTypeDone</span><span class="p">);</span><span class="c1">//设置返回类型  </span>
</span><span class='line'>    <span class="n">pEditBox</span><span class="o">-&gt;</span><span class="n">setDelegate</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="c1">//当前类继承CCEditBoxDelegate类  </span>
</span><span class='line'>    <span class="n">addChild</span><span class="p">(</span><span class="n">pEditBox</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>当前类继承于CCEditBoxDelegate，实现其所有接口如下：</p>

<figure class='code'><figcaption><span>CCEditBoxDelegate接口实现</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="kt">void</span> <span class="n">TestLayer</span><span class="o">::</span><span class="n">editBoxEditingDidBegin</span><span class="p">(</span><span class="n">CCEditBox</span> <span class="o">*</span><span class="n">editBox</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">CCLOG</span><span class="p">(</span><span class="s">&quot;start edit&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">TestLayer</span><span class="o">::</span><span class="n">editBoxEditingDidEnd</span><span class="p">(</span><span class="n">CCEditBox</span> <span class="o">*</span><span class="n">editBox</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">CCLOG</span><span class="p">(</span><span class="s">&quot;end edit&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">TestLayer</span><span class="o">::</span><span class="n">editBoxReturn</span><span class="p">(</span><span class="n">CCEditBox</span> <span class="o">*</span><span class="n">editBox</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">CCLOG</span><span class="p">(</span><span class="s">&quot;editbox return&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">TestLayer</span><span class="o">::</span><span class="n">editBoxTextChanged</span><span class="p">(</span><span class="n">CCEditBox</span> <span class="o">*</span><span class="n">editBox</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">CCLOG</span><span class="p">(</span><span class="s">&quot;text changed&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3.结合点九图按钮的使用，效果图如下：</h3>

<div align="center"><img src="http://img.blog.csdn.net/20131213102619421" alt="" border="0" title="效果" /><br></br></div>


<h3>4.源码下载</h3>

<p><a href="http://download.csdn.net/detail/jackyvincefu/6707427">下载地址</a><p class='post-footer'>&nbsp;原文地址：<a href='http://fusijie.github.io/blog/2013/12/13/play-cocos2dx-30/'><a href="http://fusijie.github.io/blog/2013/12/13/play-cocos2dx-30/">http://fusijie.github.io/blog/2013/12/13/play-cocos2dx-30/</a></a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之二十九】利用CCClipingNode做游戏遮罩]]></title>
    <link href="http://fusijie.github.io/blog/2013/12/06/play-cocos2dx-29/"/>
    <updated>2013-12-06T10:41:00+08:00</updated>
    <id>http://fusijie.github.io/blog/2013/12/06/play-cocos2dx-29</id>
    <content type="html"><![CDATA[<p>新手引导是游戏中必备的（除了奇葩的MT用一段动画开始），也是玩家对游戏的第一印象，重要性不言而喻。一般采用的遮罩的形式来突出引导重点，同时屏蔽其他功能。这里简单的介绍一下游戏遮罩的实现，并给出一个示例。</p>

<h3>1.CCClipingNode</h3>

<p>CCClipingNode是一个可裁剪节点，简单理解：</p>

<p><em>（1）首先它是一个节点，继承于CCNode，所以它可以像普通节点一样放入CCLayer，CCScene，CCNode中。</em></p>

<p><em>（2）作为节点，它就可以用作容器，承载其他节点和精灵。我把它叫底板。</em></p>

<p><em>（3）如果想要对一个节点进行裁剪，那需要给出裁剪的部分，这个裁剪区域，我把它叫模版。</em></p>

<!-- more -->


<p>所以CCClipingNode裁剪节点在组成上=底板+模版，而在显示上=底板-模版。不知道这样解释会不会好理解一点。</p>

<div align="center"><img src="http://img.blog.csdn.net/20131206093955500?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="CCClipingNode" /><br></br></div>


<h3>2.API</h3>

<p>CCClipingNode的使用还是比较简单的，至于显示底板还是模版，alpha值的设定，这些也不好说清楚，自己多试几次就知道是什么意思该怎么用了。</p>

<figure class='code'><figcaption><span>CCClipingNode API</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="c1">//不带模版地创建一个裁剪节点  </span>
</span><span class='line'>    <span class="k">static</span> <span class="n">CCClippingNode</span><span class="o">*</span> <span class="n">create</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//使用一个节点作为模版创建裁剪节点  </span>
</span><span class='line'>    <span class="k">static</span> <span class="n">CCClippingNode</span><span class="o">*</span> <span class="n">create</span><span class="p">(</span><span class="n">CCNode</span> <span class="o">*</span><span class="n">pStencil</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//不带模版地初始化一个裁剪节点  </span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">bool</span> <span class="n">init</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//使用一个节点作为模版初始化裁剪节点  </span>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">bool</span> <span class="n">init</span><span class="p">(</span><span class="n">CCNode</span> <span class="o">*</span><span class="n">pStencil</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//设置/获取模版，注意模版需要retain！  </span>
</span><span class='line'>    <span class="n">CCNode</span><span class="o">*</span> <span class="n">getStencil</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">setStencil</span><span class="p">(</span><span class="n">CCNode</span> <span class="o">*</span><span class="n">pStencil</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//设置alpha值（0~1），这个很重要，裁剪是按像素抠图的，所以只有大于这个alpha值的模版像素才会被画出来  </span>
</span><span class='line'>    <span class="c1">//默认是1，也就是完全裁剪。  </span>
</span><span class='line'>    <span class="n">GLfloat</span> <span class="n">getAlphaThreshold</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">setAlphaThreshold</span><span class="p">(</span><span class="n">GLfloat</span> <span class="n">fAlphaThreshold</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//默认是false，用于设置显示底板还是模版  </span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">isInverted</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">setInverted</span><span class="p">(</span><span class="kt">bool</span> <span class="n">bInverted</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3.示例</h3>

<p>在init中实现：</p>

<figure class='code'><figcaption><span>CCClipingNode的使用</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="n">CCSize</span> <span class="n">visibleSize</span><span class="o">=</span><span class="n">CCDirector</span><span class="o">::</span><span class="n">sharedDirector</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getVisibleSize</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CCSprite</span><span class="o">*</span> <span class="n">background</span> <span class="o">=</span> <span class="n">CCSprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;HelloWorld.png&quot;</span><span class="p">);</span><span class="c1">//创建背景  </span>
</span><span class='line'>    <span class="n">background</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">background</span><span class="p">,</span><span class="n">kTagBackground</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">clip</span><span class="o">=</span><span class="n">CCClippingNode</span><span class="o">::</span><span class="n">create</span><span class="p">();</span><span class="c1">//创建裁剪节点，成员变量  </span>
</span><span class='line'>    <span class="n">clip</span><span class="o">-&gt;</span><span class="n">setInverted</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span><span class="c1">//设置底板可见  </span>
</span><span class='line'>    <span class="n">clip</span><span class="o">-&gt;</span><span class="n">setAlphaThreshold</span><span class="p">(</span><span class="mf">0.0f</span><span class="p">);</span><span class="c1">//设置alpha为0  </span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">clip</span><span class="p">,</span><span class="n">kTagClipNode</span><span class="p">);</span><span class="c1">//添加裁剪节点  </span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CCLayerColor</span><span class="o">*</span> <span class="n">back</span><span class="o">=</span><span class="n">CCLayerColor</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">ccc4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">200</span><span class="p">));</span>
</span><span class='line'>    <span class="n">clip</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">back</span><span class="p">);</span><span class="c1">//为裁剪节点添加一个黑色带透明（看起了是灰色）的底板  </span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//模版如果要在其他地方使用要记得retain！  </span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//第一种：以下模型是drawnode遮罩  </span>
</span><span class='line'>    <span class="c1">//CCDrawNode* front=CCDrawNode::create();  </span>
</span><span class='line'>    <span class="c1">//ccColor4F yellow = {1, 1, 0, 1};  </span>
</span><span class='line'>    <span class="c1">//CCPoint rect[4]={ccp(-30,30),ccp(30,30),ccp(30,-30),ccp(-30,-30)};  </span>
</span><span class='line'>    <span class="c1">//front-&gt;drawPolygon(rect, 4, yellow, 0, yellow);  </span>
</span><span class='line'>    <span class="c1">//front-&gt;setPosition(ccp(visibleSize.width/2, visibleSize.height/2));  </span>
</span><span class='line'>    <span class="c1">//clip-&gt;setStencil(front);  </span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//第二种：以下模型是带图像遮罩  </span>
</span><span class='line'>    <span class="n">CCNode</span><span class="o">*</span> <span class="n">nodef</span><span class="o">=</span><span class="n">CCNode</span><span class="o">::</span><span class="n">create</span><span class="p">();</span><span class="c1">//创建模版  </span>
</span><span class='line'>    <span class="n">CCSprite</span><span class="o">*</span> <span class="n">close</span><span class="o">=</span><span class="n">CCSprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;CloseSelected.png&quot;</span><span class="p">);</span><span class="c1">//这里使用的是close的那个图标，所以注意观察效果图2  </span>
</span><span class='line'>    <span class="n">nodef</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">close</span><span class="p">);</span><span class="c1">//在模版上添加精灵  </span>
</span><span class='line'>    <span class="n">nodef</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'>    <span class="n">clip</span><span class="o">-&gt;</span><span class="n">setStencil</span><span class="p">(</span><span class="n">nodef</span><span class="p">);</span><span class="c1">//设置模版  </span>
</span><span class='line'>
</span><span class='line'>    <span class="n">tip</span> <span class="o">=</span> <span class="n">CCSprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;tip.png&quot;</span><span class="p">);</span><span class="c1">//一些引导提示  </span>
</span><span class='line'>    <span class="n">tip</span><span class="o">-&gt;</span><span class="n">setScale</span><span class="p">(</span><span class="mf">0.5f</span><span class="p">);</span>
</span><span class='line'>    <span class="n">tip</span><span class="o">-&gt;</span><span class="n">setRotation</span><span class="p">(</span><span class="mi">60</span><span class="p">);</span>
</span><span class='line'>    <span class="n">tip</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="mi">70</span><span class="p">,</span><span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="o">+</span><span class="mi">50</span><span class="p">));</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">tip</span><span class="p">,</span><span class="n">kTagTip</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">tip</span><span class="o">-&gt;</span><span class="n">runAction</span><span class="p">(</span><span class="n">CCRepeatForever</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">CCSequence</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">CCScaleBy</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="mf">0.25f</span><span class="p">,</span><span class="mf">0.95f</span><span class="p">),</span><span class="n">CCScaleTo</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="mf">0.25f</span><span class="p">,</span><span class="mf">0.5</span><span class="p">),</span><span class="nb">NULL</span><span class="p">)));</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">setTouchEnabled</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span><span class="c1">//触摸有效，落点正确时移除裁剪节点和提示，相关处理请看源码  </span>
</span></code></pre></td></tr></table></div></figure>


<h3>4.效果</h3>

<p>两种效果：</p>

<div align="center"><img src="http://img.blog.csdn.net/20131206102326578" alt="" border="0" title="1" /><br></br></div>




<div align="center"><img src="http://img.blog.csdn.net/20131206102337937" alt="" border="0" title="2" /><br></br></div>


<h3>5.源码</h3>

<p><a href="http://download.csdn.net/detail/jackyvincefu/6667189">下载地址</a><p class='post-footer'>&nbsp;原文地址：<a href='http://fusijie.github.io/blog/2013/12/06/play-cocos2dx-29/'><a href="http://fusijie.github.io/blog/2013/12/06/play-cocos2dx-29/">http://fusijie.github.io/blog/2013/12/06/play-cocos2dx-29/</a></a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之二十八】cocos2d-x的消息和数据传递]]></title>
    <link href="http://fusijie.github.io/blog/2013/12/03/play-cocos2dx-28/"/>
    <updated>2013-12-03T09:57:00+08:00</updated>
    <id>http://fusijie.github.io/blog/2013/12/03/play-cocos2dx-28</id>
    <content type="html"><![CDATA[<p>如何在层间或者场景间进行消息传递，大概是每个初学者都要面对的问题吧。这里介绍cocos2d-x的一种消息/数据传递方式，内置的观察者模式，也称消息通知中心，CCNotificationCenter。</p>

<h3>1.CCNotificationCenter</h3>

<p>CCNotificationCenter是cocos2d-x提供的一个消息中心，类似于观察者模式，是一个单例类，用于辅助控制消息传递。大概工作原理如下图。</p>

<!-- more -->




<div align="center"><img src="http://img.blog.csdn.net/20131203084104765?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="CCNotificationCenter" /><br></br></div>


<p>这里以A，B通讯为例，A，B可以是层间或者场景间。假如A要向B发送带数据的消息。那么</p>

<p><em>（1）B向小心中心注册一个bMsg的消息，告知消息中心，如果消息中心接收到bMsg，必须通知B，以便B采取相应的措施。</em></p>

<p><em>（2）A向消息中心发送bMsg消息。</em></p>

<p><em>（3）消息中心接收到bMsg，查询有谁在它这里注册了这个消息，发现是B，就通知B有人发送了bMsg。</em></p>

<p><em>（4）当然这个消息带有A要传递的数据，而B也不知道到底是谁给它发了bMsg这条消息，除非在传递的数据中指出。</em></p>

<h3>2.相关API</h3>

<figure class='code'><figcaption><span>CCNotificationCenter API</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="c1">//获得消息通知中心的一个单例对象  </span>
</span><span class='line'>  <span class="k">static</span> <span class="n">CCNotificationCenter</span> <span class="o">*</span><span class="n">sharedNotificationCenter</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//销毁通知中心的单例对象  </span>
</span><span class='line'>  <span class="k">static</span> <span class="kt">void</span> <span class="n">purgeNotificationCenter</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//添加观察者  </span>
</span><span class='line'>  <span class="kt">void</span> <span class="n">addObserver</span><span class="p">(</span><span class="n">CCObject</span> <span class="o">*</span><span class="n">target</span><span class="p">,</span>
</span><span class='line'>                  <span class="n">SEL_CallFuncO</span> <span class="n">selector</span><span class="p">,</span>
</span><span class='line'>                  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span>
</span><span class='line'>                  <span class="n">CCObject</span> <span class="o">*</span><span class="n">obj</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//移除观察者  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">removeObserver</span><span class="p">(</span><span class="n">CCObject</span> <span class="o">*</span><span class="n">target</span><span class="p">,</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//移除所有观察者  </span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">removeAllObservers</span><span class="p">(</span><span class="n">CCObject</span> <span class="o">*</span><span class="n">target</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//发送消息  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">postNotification</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//发送带数据的消息  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">postNotification</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="n">CCObject</span> <span class="o">*</span><span class="n">object</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>观察者的意思即是等待获取消息的对象，比如上图的B。</p>

<h3>3.原理</h3>

<p>CCNotificationCenter的实现比较简单，它的内部维护了一个CCArray数组，数组的元素是CCNotificationObserver类型的对象，CCNotificationObserver封装了回调的执行者，回调函数，消息名称以及传递的数据。每次注册，也就是添加观察者，其实就是把这个CCNotificationObserver对象加入通知中心的CCArray数组，而每次的消息发送就是将消息传递给通知中心，由通知中心遍历这个数组，找到一致的消息，调用这些回调函数。其实这样看起来，就像是A在调用B的函数。具体的就自己看下源码吧。</p>

<h3>4.示例</h3>

<p>这里做了一个场景，包含了2个层，目的是层A向层B发送带数据的消息，层B收到后打印出这条数据。</p>

<figure class='code'><figcaption><span>CCNotificationCenter的示例</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="c1">//ALayer  </span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">ALayer</span><span class="o">::</span><span class="n">init</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">bool</span> <span class="n">bRet</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span>
</span><span class='line'>      <span class="k">do</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">CC_BREAK_IF</span><span class="p">(</span><span class="o">!</span><span class="n">CCLayer</span><span class="o">::</span><span class="n">init</span><span class="p">());</span>
</span><span class='line'>          <span class="n">CCSize</span> <span class="n">visibleSize</span> <span class="o">=</span> <span class="n">CCDirector</span><span class="o">::</span><span class="n">sharedDirector</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getVisibleSize</span><span class="p">();</span>
</span><span class='line'>          <span class="n">CCMenuItemImage</span> <span class="o">*</span><span class="n">pCloseItem</span> <span class="o">=</span> <span class="n">CCMenuItemImage</span><span class="o">::</span><span class="n">create</span><span class="p">(</span>
</span><span class='line'>              <span class="s">&quot;CloseNormal.png&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s">&quot;CloseSelected.png&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="k">this</span><span class="p">,</span>
</span><span class='line'>              <span class="n">menu_selector</span><span class="p">(</span><span class="n">ALayer</span><span class="o">::</span><span class="n">PostMessage</span><span class="p">));</span><span class="c1">//按钮用于点击发送消息  </span>
</span><span class='line'>
</span><span class='line'>          <span class="n">pCloseItem</span><span class="o">-&gt;</span><span class="n">setAnchorPoint</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span><span class="mf">0.5</span><span class="p">));</span>
</span><span class='line'>          <span class="n">pCloseItem</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="n">visibleSize</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">visibleSize</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'>          <span class="n">CCMenu</span><span class="o">*</span> <span class="n">pMenu</span> <span class="o">=</span> <span class="n">CCMenu</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">pCloseItem</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>          <span class="n">pMenu</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">CCPointZero</span><span class="p">);</span>
</span><span class='line'>          <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">pMenu</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">bRet</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">bRet</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="n">ALayer</span><span class="o">::</span><span class="n">PostMessage</span><span class="p">(</span><span class="n">CCObject</span><span class="o">*</span> <span class="n">pSender</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">CCString</span><span class="o">*</span> <span class="n">str</span><span class="o">=</span><span class="n">CCString</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;Hello BLayer!&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">CCNotificationCenter</span><span class="o">::</span><span class="n">sharedNotificationCenter</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">postNotification</span><span class="p">(</span><span class="s">&quot;BMessage&quot;</span><span class="p">,</span><span class="n">str</span><span class="p">);</span><span class="c1">//发送带str的消息BMessage  </span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//BLayer  </span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">BLayer</span><span class="o">::</span><span class="n">init</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">bool</span> <span class="n">bRet</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span>
</span><span class='line'>      <span class="k">do</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">CC_BREAK_IF</span><span class="p">(</span><span class="o">!</span><span class="n">CCLayer</span><span class="o">::</span><span class="n">init</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">CCNotificationCenter</span><span class="o">::</span><span class="n">sharedNotificationCenter</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">addObserver</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="n">callfuncO_selector</span><span class="p">(</span><span class="n">BLayer</span><span class="o">::</span><span class="n">getMessage</span><span class="p">),</span><span class="s">&quot;BMessage&quot;</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span><span class="c1">//注册BMessage，如果接收到了，执行getMessage  </span>
</span><span class='line'>
</span><span class='line'>          <span class="n">bRet</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">bRet</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="n">BLayer</span><span class="o">::</span><span class="n">getMessage</span><span class="p">(</span><span class="n">CCObject</span><span class="o">*</span> <span class="n">obj</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">CCString</span><span class="o">*</span> <span class="n">str</span><span class="o">=</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="n">CCString</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">obj</span><span class="p">);</span><span class="c1">//打印出传递的数据  </span>
</span><span class='line'>      <span class="n">CCLog</span><span class="p">(</span><span class="n">str</span><span class="o">-&gt;</span><span class="n">getCString</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">BLayer</span><span class="o">::~</span><span class="n">BLayer</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">CCNotificationCenter</span><span class="o">::</span><span class="n">sharedNotificationCenter</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">purgeNotificationCenter</span><span class="p">();</span><span class="c1">//释放通知中心单例对象  </span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>5.注意</h3>

<p>使用CCNotificationCenter需要注意以下几点：</p>

<p><em>（1）一个对象可以注册多个消息，一个消息也可以由多个消息注册。</em></p>

<p><em>（2）传递参数，A可以向B传递参数，而B在注册的时候也可以带一个参数，如果这两个数据不是指向同一对象的话，消息不会传递。也就是说要么A传递NULL对象，要么B注册时带NULL对象，要么都不是NULL但必须是同一对象，消息传递才会成功。以下是发送消息执行的判断：</em></p>

<figure class='code'><figcaption><span>消息发送的判断</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">strcmp</span><span class="p">(</span><span class="n">name</span><span class="p">,</span><span class="n">observer</span><span class="o">-&gt;</span><span class="n">getName</span><span class="p">())</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">observer</span><span class="o">-&gt;</span><span class="n">getObject</span><span class="p">()</span> <span class="o">==</span> <span class="n">object</span> <span class="o">||</span> <span class="n">observer</span><span class="o">-&gt;</span><span class="n">getObject</span><span class="p">()</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="n">object</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>（3）局部变量的传递，注意到上例，传递的是CCString的一个局部变量（但还是要autorelease），从CCNotificationCenter的实现上来看，这是没有问题的，因为数据是在postNotification被调用的，也就是整个函数体并没结束，数据不会被销毁。</em></p>

<h3>6.效果图</h3>

<div align="center"><img src="http://img.blog.csdn.net/20131204150850171" alt="" border="0" title="效果" /><br></br></div>


<h3>7.源码下载</h3>

<p><a href="http://download.csdn.net/detail/jackyvincefu/6647453">下载地址</a></p>

<p class='post-footer'>&nbsp;原文地址：<a href='http://fusijie.github.io/blog/2013/12/03/play-cocos2dx-28/'>http://fusijie.github.io/blog/2013/12/03/play-cocos2dx-28/</a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之二十七】CCSequence不能执行CCRepeatForever]]></title>
    <link href="http://fusijie.github.io/blog/2013/11/28/play-cocos2dx-27/"/>
    <updated>2013-11-28T09:25:00+08:00</updated>
    <id>http://fusijie.github.io/blog/2013/11/28/play-cocos2dx-27</id>
    <content type="html"><![CDATA[<p>之前在遇到这么一个问题，在CCSequence中加入CCRepeatForever，发现其他动作执行没问题，就是CCRepeatForever无法执行。代码并没有问题，很奇怪。</p>

<h3>1.示例</h3>

<figure class='code'><figcaption><span>示例</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="n">CCBlink</span><span class="o">*</span> <span class="n">blink</span><span class="o">=</span><span class="n">CCBlink</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="mf">0.5f</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span><span class="c1">//创建闪烁动画，duration=0.5s  </span>
</span><span class='line'>    <span class="n">CCAnimation</span><span class="o">*</span> <span class="n">animation</span><span class="o">=</span><span class="n">CCAnimation</span><span class="o">::</span><span class="n">create</span><span class="p">();</span>
</span><span class='line'>    <span class="n">animation</span><span class="o">-&gt;</span><span class="n">addSpriteFrameWithFileName</span><span class="p">(</span><span class="s">&quot;CloseNormal.png&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">animation</span><span class="o">-&gt;</span><span class="n">addSpriteFrameWithFileName</span><span class="p">(</span><span class="s">&quot;CloseSelected.png&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">animation</span><span class="o">-&gt;</span><span class="n">setDelayPerUnit</span><span class="p">(</span><span class="mf">1.0f</span><span class="p">);</span><span class="c1">//帧间间隔1s  </span>
</span><span class='line'>    <span class="n">CCAnimate</span><span class="o">*</span> <span class="n">animate</span><span class="o">=</span><span class="n">CCAnimate</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">animation</span><span class="p">);</span><span class="c1">//创建帧动画  </span>
</span><span class='line'>    <span class="n">CCRepeatForever</span><span class="o">*</span> <span class="n">repeat</span><span class="o">=</span><span class="n">CCRepeatForever</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">animate</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CCSequence</span><span class="o">*</span> <span class="n">sequence</span><span class="o">=</span><span class="n">CCSequence</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">blink</span><span class="p">,</span><span class="n">repeat</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span><span class="c1">//创建连续动画  </span>
</span><span class='line'>    <span class="n">CCSprite</span><span class="o">*</span> <span class="n">close</span><span class="o">=</span><span class="n">CCSprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;CloseNormal.png&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">close</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="mi">240</span><span class="p">,</span><span class="mi">160</span><span class="p">));</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">close</span><span class="p">);</span>
</span><span class='line'>    <span class="n">close</span><span class="o">-&gt;</span><span class="n">runAction</span><span class="p">(</span><span class="n">sequence</span><span class="p">);</span><span class="c1">//执行连续动画  </span>
</span></code></pre></td></tr></table></div></figure>


<p>结果精灵闪烁10次以后，帧动画不执行了。</p>

<!-- more -->


<h3>2.原因</h3>

<p>先了解一下CCSequence的创建和执行原理。</p>

<p><strong>2.1.CCSequence的创建</strong></p>

<p>创建CCSequence调用</p>

<figure class='code'><figcaption><span>创建CCSequence</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="n">CCSequence</span><span class="o">*</span> <span class="n">CCSequence</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">CCFiniteTimeAction</span> <span class="o">*</span><span class="n">pAction1</span><span class="p">,</span> <span class="p">...)</span>
</span></code></pre></td></tr></table></div></figure>


<p>内部调用了createWithVariableList，从实现可以看出这是一个递归调用。</p>

<figure class='code'><figcaption><span>createWithVariableList</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="c1">//获取动作列表，创建CCSequence  </span>
</span><span class='line'>    <span class="n">CCSequence</span><span class="o">*</span> <span class="n">CCSequence</span><span class="o">::</span><span class="n">createWithVariableList</span><span class="p">(</span><span class="n">CCFiniteTimeAction</span> <span class="o">*</span><span class="n">pAction1</span><span class="p">,</span> <span class="n">va_list</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">CCFiniteTimeAction</span> <span class="o">*</span><span class="n">pNow</span><span class="p">;</span><span class="c1">//当前动作  </span>
</span><span class='line'>      <span class="n">CCFiniteTimeAction</span> <span class="o">*</span><span class="n">pPrev</span> <span class="o">=</span> <span class="n">pAction1</span><span class="p">;</span><span class="c1">//第一个动作  </span>
</span><span class='line'>      <span class="kt">bool</span> <span class="n">bOneAction</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span><span class="c1">//只有一个动作的标志位  </span>
</span><span class='line'>
</span><span class='line'>      <span class="k">while</span> <span class="p">(</span><span class="n">pAction1</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">pNow</span> <span class="o">=</span> <span class="n">va_arg</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="n">CCFiniteTimeAction</span><span class="o">*</span><span class="p">);</span><span class="c1">//获取当前动作  </span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">pNow</span><span class="p">)</span><span class="c1">//如果存在  </span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">pPrev</span> <span class="o">=</span> <span class="n">createWithTwoActions</span><span class="p">(</span><span class="n">pPrev</span><span class="p">,</span> <span class="n">pNow</span><span class="p">);</span><span class="c1">//用前两个动作创建CCSequence并赋给第一个动作  </span>
</span><span class='line'>              <span class="n">bOneAction</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span><span class="c1">//置false  </span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">else</span><span class="c1">//如果不存在  </span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="c1">// If only one action is added to CCSequence, make up a CCSequence by adding a simplest finite time action.  </span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="n">bOneAction</span><span class="p">)</span><span class="c1">//如果只有一个动作  </span>
</span><span class='line'>              <span class="p">{</span>
</span><span class='line'>                  <span class="n">pPrev</span> <span class="o">=</span> <span class="n">createWithTwoActions</span><span class="p">(</span><span class="n">pPrev</span><span class="p">,</span> <span class="n">ExtraAction</span><span class="o">::</span><span class="n">create</span><span class="p">());</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span><span class="c1">//跳出循环  </span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">((</span><span class="n">CCSequence</span><span class="o">*</span><span class="p">)</span><span class="n">pPrev</span><span class="p">);</span><span class="c1">//返回第一个动作  </span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>假如有3个动作要被串联，则先把第1个和第2个串联一个CCSequence，再把这个CCSequence和第3个动作串联成最终的CCSequence，然后返回。从CCSequence的成员变量可以看到：</p>

<figure class='code'><figcaption><span>动作对象指针成员变量</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="n">CCFiniteTimeAction</span> <span class="o">*</span><span class="n">m_pActions</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="c1">//表明只包含2个动作对象指针</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用递归多少会降低程序的运行效率，但是却可以换来代码的简洁性，同样的CCSpawn也是这么实现的。
在createWithTwoActions中，调用了initWithTwoActions函数，实现了把两个动作串成一个CCSequence，关键代码如下：</p>

<figure class='code'><figcaption><span>initWithTwoActions</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="kt">float</span> <span class="n">d</span> <span class="o">=</span> <span class="n">pActionOne</span><span class="o">-&gt;</span><span class="n">getDuration</span><span class="p">()</span> <span class="o">+</span> <span class="n">pActionTwo</span><span class="o">-&gt;</span><span class="n">getDuration</span><span class="p">();</span><span class="c1">//获取两个动作的duration  </span>
</span><span class='line'>    <span class="n">CCActionInterval</span><span class="o">::</span><span class="n">initWithDuration</span><span class="p">(</span><span class="n">d</span><span class="p">);</span><span class="c1">//赋给新的CCSequence  </span>
</span><span class='line'>
</span><span class='line'>    <span class="n">m_pActions</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">pActionOne</span><span class="p">;</span><span class="c1">//同时把两个动作赋给m_pActions指针数组  </span>
</span><span class='line'>    <span class="n">pActionOne</span><span class="o">-&gt;</span><span class="n">retain</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">m_pActions</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">pActionTwo</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pActionTwo</span><span class="o">-&gt;</span><span class="n">retain</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>2.2.duration</strong></p>

<p>从示例可以看出，闪烁动画blink的duration是0.5s，那CCRepeatForever呢？1s？当然不是，1s只是帧动画animate的帧间间隔，每个帧动画包含2帧，而CCRepeatForever的duration是0。因此，当示例中的闪烁动画blink和重复动画repeat串联成CCSequence sequence的时候，sequence的duration就变成0.5+0=0.5s，这很重要。</p>

<p><strong>2.3.m_split</strong></p>

<p>CCSequence中有这么一个成员变量</p>

<figure class='code'><figcaption><span>m_split</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="kt">float</span> <span class="n">m_split</span><span class="p">;</span><span class="c1">//记录了第一个动画时长占总时长的比例，也就是2个动画的时长分界  </span>
</span></code></pre></td></tr></table></div></figure>


<p>当执行runAction的时候，CCSequence会调用</p>

<figure class='code'><figcaption><span>startWithTarget</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="kt">void</span> <span class="n">CCSequence</span><span class="o">::</span><span class="n">startWithTarget</span><span class="p">(</span><span class="n">CCNode</span> <span class="o">*</span><span class="n">pTarget</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">CCActionInterval</span><span class="o">::</span><span class="n">startWithTarget</span><span class="p">(</span><span class="n">pTarget</span><span class="p">);</span>
</span><span class='line'>      <span class="n">m_split</span> <span class="o">=</span> <span class="n">m_pActions</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">getDuration</span><span class="p">()</span> <span class="o">/</span> <span class="n">m_fDuration</span><span class="p">;</span><span class="c1">//获取第一个动画占总时长的比例  </span>
</span><span class='line'>      <span class="n">m_last</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>而这里由于blink占了0.5s，repeat占了0s，总时长0.5s，所以m_split是0.5/0.5=1。blink占满了整个CCSequence，所以CCSequence无法执行repeat。</p>

<p>这时候再来看CCSequence::update(float dt)函数的执行，就会恍然大悟了。</p>

<figure class='code'><figcaption><span>update</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="kt">int</span> <span class="n">found</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="c1">//当前播放动作索引  </span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">new_t</span> <span class="o">=</span> <span class="mf">0.0f</span><span class="p">;</span><span class="c1">//新播放进度  </span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span> <span class="n">t</span> <span class="o">&lt;</span> <span class="n">m_split</span> <span class="p">)</span> <span class="p">{</span><span class="c1">//播放进度&lt;分界进度  </span>
</span><span class='line'>      <span class="n">found</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="c1">//设置当前播放的是第一个动作  </span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="n">m_split</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">)</span><span class="c1">//如果第一个动作时长占比!=0  </span>
</span><span class='line'>          <span class="n">new_t</span> <span class="o">=</span> <span class="n">t</span> <span class="o">/</span> <span class="n">m_split</span><span class="p">;</span><span class="c1">//计算出第一个动作新的播放进度  </span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="n">new_t</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="c1">//设置第一个已播放完毕  </span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span><span class="c1">//播放进度&gt;=分界进度  </span>
</span><span class='line'>      <span class="n">found</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="c1">//设置当前播放的是第二个动作  </span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="n">m_split</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">)</span><span class="c1">//如果第一个动作时长占比==1  </span>
</span><span class='line'>          <span class="n">new_t</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="c1">//设置第二个动作已完成  </span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="n">new_t</span> <span class="o">=</span> <span class="p">(</span><span class="n">t</span><span class="o">-</span><span class="n">m_split</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">m_split</span> <span class="p">);</span><span class="c1">//计算出第二个动作新的播放进度  </span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3.注意</h3>

<p><em>（1）CCSpawn也会有这个问题，所以CCSpawn也无法执行加入其中的CCRepeatForever动作。</em></p>

<p><em>（2）CCRepeatForever的反转动作也是无效了，一个不会停止的动作从什么地方开始反转？当然你可以先把动作反转了再加入CCRepeatForever中，这是没问题的。</em></p>

<h3>4.解决方案</h3>

<p><em>（1）对于同时动作，不使用CCSpawn，采用分别执行</em></p>

<figure class='code'><figcaption><span>分别执行</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="n">close</span><span class="o">-&gt;</span><span class="n">runAction</span><span class="p">(</span><span class="n">blink</span><span class="p">);</span>
</span><span class='line'>  <span class="n">close</span><span class="o">-&gt;</span><span class="n">runAction</span><span class="p">(</span><span class="n">repeat</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>（2）对于连续动作，不直接往CCSequence中加入CCRepeatForever，而是把CCRepeatForever放入瞬时动作CCCallFunc中，再把CCCallFunc加入CCSequence中执行。</em></p>

<figure class='code'><figcaption><span>CCSequence串联</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="n">close</span><span class="o">=</span><span class="n">CCSprite</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;CloseNormal.png&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">CCBlink</span><span class="o">*</span> <span class="n">blink</span><span class="o">=</span><span class="n">CCBlink</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="mf">0.5f</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'>  <span class="n">CCCallFunc</span><span class="o">*</span> <span class="n">callFunc</span><span class="o">=</span><span class="n">CCCallFunc</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="n">callfunc_selector</span><span class="p">(</span><span class="n">TestScene</span><span class="o">::</span><span class="n">repeatFunc</span><span class="p">));</span><span class="c1">//创建CCCallFunc对象  </span>
</span><span class='line'>  <span class="n">CCSequence</span><span class="o">*</span> <span class="n">sequence</span><span class="o">=</span><span class="n">CCSequence</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">blink</span><span class="p">,</span><span class="n">callFunc</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span><span class="c1">//把CCCallFunc对象加入CCSequence中  </span>
</span><span class='line'>  <span class="n">close</span><span class="o">-&gt;</span><span class="n">setPosition</span><span class="p">(</span><span class="n">ccp</span><span class="p">(</span><span class="mi">240</span><span class="p">,</span><span class="mi">160</span><span class="p">));</span>
</span><span class='line'>  <span class="k">this</span><span class="o">-&gt;</span><span class="n">addChild</span><span class="p">(</span><span class="n">close</span><span class="p">);</span>
</span><span class='line'>  <span class="n">close</span><span class="o">-&gt;</span><span class="n">runAction</span><span class="p">(</span><span class="n">sequence</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="n">TestScene</span><span class="o">::</span><span class="n">repeatFunc</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">CCAnimation</span><span class="o">*</span> <span class="n">animation</span><span class="o">=</span><span class="n">CCAnimation</span><span class="o">::</span><span class="n">create</span><span class="p">();</span>
</span><span class='line'>      <span class="n">animation</span><span class="o">-&gt;</span><span class="n">addSpriteFrameWithFileName</span><span class="p">(</span><span class="s">&quot;CloseNormal.png&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">animation</span><span class="o">-&gt;</span><span class="n">addSpriteFrameWithFileName</span><span class="p">(</span><span class="s">&quot;CloseSelected.png&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">animation</span><span class="o">-&gt;</span><span class="n">setDelayPerUnit</span><span class="p">(</span><span class="mf">1.0f</span><span class="p">);</span>
</span><span class='line'>      <span class="n">CCAnimate</span><span class="o">*</span> <span class="n">animate</span><span class="o">=</span><span class="n">CCAnimate</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">animation</span><span class="p">);</span>
</span><span class='line'>      <span class="n">CCRepeatForever</span><span class="o">*</span> <span class="n">repeat</span><span class="o">=</span><span class="n">CCRepeatForever</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="n">animate</span><span class="p">);</span>
</span><span class='line'>      <span class="n">close</span><span class="o">-&gt;</span><span class="n">runAction</span><span class="p">(</span><span class="n">repeat</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>（3）对于CCAnimation帧动画，可以设置循环属性，而不使用CCRepeatForever。</em></p>

<figure class='code'><figcaption><span>setLoops</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="n">animation</span><span class="o">-&gt;</span><span class="n">setLoops</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>5.总结</h3>

<p>虽然CCRepeatForever也同样继承于CCActionInterval，理论上是延时动作的子类，但是和一般的延时动作又有很大的不同，所以平时在使用的时候必须很小心，不能当成一般的CCActionInterval使用。而在cocos2d-x动作的分类上是不是应该把它从CCAction继承出来会比较好一点？<p class='post-footer'>&nbsp;原文地址：<a href='http://fusijie.github.io/blog/2013/11/28/play-cocos2dx-27/'><a href="http://fusijie.github.io/blog/2013/11/28/play-cocos2dx-27/">http://fusijie.github.io/blog/2013/11/28/play-cocos2dx-27/</a></a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之二十六】数据结构CCDictionary]]></title>
    <link href="http://fusijie.github.io/blog/2013/11/26/play-cocos2dx-26/"/>
    <updated>2013-11-26T09:00:00+08:00</updated>
    <id>http://fusijie.github.io/blog/2013/11/26/play-cocos2dx-26</id>
    <content type="html"><![CDATA[<p>CCDictionary在cocos2d-x中被大量的应用，比如CCTexureCache，CCSpriteFramCache等等。</p>

<h3>1.实现原理</h3>

<p><strong>1.1.uthash</strong></p>

<p>CCDictionary是使用uthash实现的，而过时的CCMutableDictionary则是使用STL实现，就效率而言CCDictionary至少提升了两倍，而且CCDictionary并没有使用C++模版，因此也很容易绑定到脚本。</p>

<p>uthash是一个C/C++的哈希表实现，它以宏定义的方式实现了哈希表，不仅加快了运行速度，而且与key类型无关。它的github在<a href="https://github.com/troydhanson/uthash">这里</a>。cocos2d-x的头文件在\cocos2d-x-2.2.0\cocos2dx\support\data_support\uthash.h。</p>

<!-- more -->


<p>如果想在C++中直接使用也很简单，userguide在<a href="http://troydhanson.github.io/uthash/userguide.html">这里</a>。可以很方便地进行增加，删除，查找，计数，迭代，排序等操作。</p>

<p><strong>1.2.键（key）</strong></p>

<p>uthash支持4种标准类型的键：整型，字符串，指针和结构体，不过到了CCDictionary就只支持整型和字符串型了。</p>

<figure class='code'><figcaption><span>CCDictType</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="k">enum</span> <span class="n">CCDictType</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">kCCDictUnknown</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="n">kCCDictStr</span><span class="p">,</span>
</span><span class='line'>      <span class="n">kCCDictInt</span>
</span><span class='line'>  <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2.CCDictElement</h3>

<p>在了解CCDictionary之前还要看一下CCDictElement，很明显，CCDictElement是CCDictionary的一个元素，包含了一个key-value。key支持整型和字符串，使用的时候要注意在同一个CCDictionary中key类型必须要一致，value可以不一致。</p>

<h3>3.API</h3>

<p><strong>3.1.创建</strong></p>

<figure class='code'><figcaption><span>创建</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="c1">//创建一个CCDictionary  </span>
</span><span class='line'>    <span class="k">static</span> <span class="n">CCDictionary</span><span class="o">*</span> <span class="n">create</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">//用一个已存在的CCDictionary来创建一个新的CCDictionary  </span>
</span><span class='line'>    <span class="k">static</span> <span class="n">CCDictionary</span><span class="o">*</span> <span class="n">createWithDictionary</span><span class="p">(</span><span class="n">CCDictionary</span><span class="o">*</span> <span class="n">srcDict</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//用一个plist来创建CCDictionary  </span>
</span><span class='line'>    <span class="k">static</span> <span class="n">CCDictionary</span><span class="o">*</span> <span class="n">createWithContentsOfFile</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">pFileName</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//返回一个非autorelease对象的CCDictionary，它讷讷感够确保在新线程中使用  </span>
</span><span class='line'>    <span class="c1">//但是你必须手动管理它的生命周期，当你不再需要它的时候，必须调用CC_SAFE_RELEASE  </span>
</span><span class='line'>    <span class="k">static</span> <span class="n">CCDictionary</span><span class="o">*</span> <span class="n">createWithContentsOfFileThreadSafe</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">pFileName</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>3.2.查找</strong></p>

<figure class='code'><figcaption><span>查找</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="c1">//返回指定字符串类型key的value，如果CCDictionary的key是整型，会出现断言  </span>
</span><span class='line'>    <span class="n">CCObject</span><span class="o">*</span> <span class="n">objectForKey</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">key</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//返回指定整型key的value，如果CCDictionary的key是字符串型，会出现断言  </span>
</span><span class='line'>    <span class="n">CCObject</span><span class="o">*</span> <span class="n">objectForKey</span><span class="p">(</span><span class="n">intptr_t</span> <span class="n">key</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//返回指定字符串类型key的CCString，这里假定value是CCString型，如果不是或者未找到，则返回空串  </span>
</span><span class='line'>    <span class="k">const</span> <span class="n">CCString</span><span class="o">*</span> <span class="n">valueForKey</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">key</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//返回指定整型类型key的CCString，这里假定value是CCString型，如果不是或者未找到，则返回空串  </span>
</span><span class='line'>    <span class="k">const</span> <span class="n">CCString</span><span class="o">*</span> <span class="n">valueForKey</span><span class="p">(</span><span class="n">intptr_t</span> <span class="n">key</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>3.3.增加</strong></p>

<figure class='code'><figcaption><span>增加</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="c1">//插入一个key-value，如果是第一次调用，那么CCDictionary的key类型会被确定为字符串型，之后就不能插入整型key  </span>
</span><span class='line'>    <span class="c1">//如果已存在该key，则旧key-value会被释放和移除，被新的替代  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">setObject</span><span class="p">(</span><span class="n">CCObject</span><span class="o">*</span> <span class="n">pObject</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">key</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//插入一个key-value，如果是第一次调用，那么CCDictionary的key类型会被确定为整型，之后就不能插入字符串型key  </span>
</span><span class='line'>    <span class="c1">//如果已存在该key，则旧key-value会被释放和移除，被新的替代  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">setObject</span><span class="p">(</span><span class="n">CCObject</span><span class="o">*</span> <span class="n">pObject</span><span class="p">,</span> <span class="n">intptr_t</span> <span class="n">key</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>3.4.移除</strong></p>

<figure class='code'><figcaption><span>移除</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="c1">//移除指定key  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">removeObjectForKey</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">key</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">removeObjectForKey</span><span class="p">(</span><span class="n">intptr_t</span> <span class="n">key</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//移除一个CCArray中keys  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">removeObjectsForKeys</span><span class="p">(</span><span class="n">CCArray</span><span class="o">*</span> <span class="n">pKeyArray</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//通过元素来移除value  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">removeObjectForElememt</span><span class="p">(</span><span class="n">CCDictElement</span><span class="o">*</span> <span class="n">pElement</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//移除所有的key-value  </span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">removeAllObjects</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>3.5.其他</strong></p>

<figure class='code'><figcaption><span>其他</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="c1">//返回一个随机元素，这个使用得注意，因为value可以不一样，所以返回类型每次都可能不同，在类型转换的时候要非常小心  </span>
</span><span class='line'>    <span class="n">CCObject</span><span class="o">*</span> <span class="n">randomObject</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">//返回一个包含所有key的CCArray  </span>
</span><span class='line'>    <span class="n">CCArray</span><span class="o">*</span> <span class="n">allKeys</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">//返回指定value的所有key，因为value是可以相同的，内部使用==比较两个value是否相同   </span>
</span><span class='line'>    <span class="n">CCArray</span><span class="o">*</span> <span class="n">allKeysForObject</span><span class="p">(</span><span class="n">CCObject</span><span class="o">*</span> <span class="n">object</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//返回元素个数  </span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">count</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">//把CCDictionary写到一个plist中，写入的value要求是字符串型  </span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">writeToFile</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">fullPath</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4.示例</h3>

<figure class='code'><figcaption><span>示例</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="c1">// Create a dictionary, return an autorelease object.  </span>
</span><span class='line'>    <span class="n">CCDictionary</span><span class="o">*</span> <span class="n">pDict</span> <span class="o">=</span> <span class="n">CCDictionary</span><span class="o">::</span><span class="n">create</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Insert objects to dictionary  </span>
</span><span class='line'>    <span class="n">CCString</span><span class="o">*</span> <span class="n">pValue1</span> <span class="o">=</span> <span class="n">CCString</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;100&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CCString</span><span class="o">*</span> <span class="n">pValue2</span> <span class="o">=</span> <span class="n">CCString</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;120&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CCInteger</span><span class="o">*</span> <span class="n">pValue3</span> <span class="o">=</span> <span class="n">CCInteger</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</span><span class='line'>    <span class="n">pDict</span><span class="o">-&gt;</span><span class="n">setObject</span><span class="p">(</span><span class="n">pValue1</span><span class="p">,</span> <span class="s">&quot;key1&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">pDict</span><span class="o">-&gt;</span><span class="n">setObject</span><span class="p">(</span><span class="n">pValue2</span><span class="p">,</span> <span class="s">&quot;key2&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">pDict</span><span class="o">-&gt;</span><span class="n">setObject</span><span class="p">(</span><span class="n">pValue3</span><span class="p">,</span> <span class="s">&quot;key3&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Get the object for key  </span>
</span><span class='line'>    <span class="n">CCString</span><span class="o">*</span> <span class="n">pStr1</span> <span class="o">=</span> <span class="p">(</span><span class="n">CCString</span><span class="o">*</span><span class="p">)</span><span class="n">pDict</span><span class="o">-&gt;</span><span class="n">objectForKey</span><span class="p">(</span><span class="s">&quot;key1&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CCLog</span><span class="p">(</span><span class="s">&quot;{ key1: %s }&quot;</span><span class="p">,</span> <span class="n">pStr1</span><span class="o">-&gt;</span><span class="n">getCString</span><span class="p">());</span>
</span><span class='line'>    <span class="n">CCInteger</span><span class="o">*</span> <span class="n">pInteger</span> <span class="o">=</span> <span class="p">(</span><span class="n">CCInteger</span><span class="o">*</span><span class="p">)</span><span class="n">pDict</span><span class="o">-&gt;</span><span class="n">objectForKey</span><span class="p">(</span><span class="s">&quot;key3&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CCLog</span><span class="p">(</span><span class="s">&quot;{ key3: %d }&quot;</span><span class="p">,</span> <span class="n">pInteger</span><span class="o">-&gt;</span><span class="n">getValue</span><span class="p">());</span>
</span><span class='line'>    <span class="n">CCString</span><span class="o">*</span> <span class="n">pStr3</span><span class="o">=</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="n">CCString</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">pDict</span><span class="o">-&gt;</span><span class="n">randomObject</span><span class="p">());</span><span class="c1">//这里有问题了，因为value有不同类型，所以随机返回时类型处理要小心  </span>
</span><span class='line'>    <span class="n">CCLog</span><span class="p">(</span><span class="s">&quot;{ random key: %s }&quot;</span><span class="p">,</span><span class="n">pStr3</span><span class="o">-&gt;</span><span class="n">getCString</span><span class="p">());</span>  <span class="c1">//如果返回的是整型pValue3，那么会出现断言  </span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">pDict</span><span class="o">-&gt;</span><span class="n">writeToFile</span><span class="p">(</span><span class="s">&quot;pdic.plist&quot;</span><span class="p">))</span>  <span class="c1">//整型的value无法写入，会提示This type cannot appear in property list  </span>
</span><span class='line'>      <span class="n">CCLog</span><span class="p">(</span><span class="s">&quot;Write to file success!&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Resource/pdic.plist</p>

<figure class='code'><figcaption><span>pdic.plist</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'>  <span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>key1<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>100<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>key2<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>120<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>key3<span class="nt">&lt;/key&gt;</span>  <span class="cp">&lt;!key3对应整型数据无法写入/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/plist&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>5.CCDICT_FOREACH</h3>

<p><strong>5.1.概况</strong></p>

<p>宏定义，用于遍历CCDictionary的value。</p>

<figure class='code'><figcaption><span>CCDICT_FOREACH宏定义</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="err">#</span><span class="n">define</span> <span class="n">CCDICT_FOREACH</span><span class="p">(</span><span class="n">__dict__</span><span class="p">,</span> <span class="n">__el__</span><span class="p">)</span> <span class="err">\</span>
</span><span class='line'>    <span class="n">CCDictElement</span><span class="o">*</span> <span class="n">pTmp</span><span class="err">##</span><span class="n">__dict__</span><span class="err">##</span><span class="n">__el__</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="err">\</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">__dict__</span><span class="p">)</span> <span class="err">\</span>
</span><span class='line'>    <span class="n">HASH_ITER</span><span class="p">(</span><span class="n">hh</span><span class="p">,</span> <span class="p">(</span><span class="n">__dict__</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">m_pElements</span><span class="p">,</span> <span class="n">__el__</span><span class="p">,</span> <span class="n">pTmp</span><span class="err">##</span><span class="n">__dict__</span><span class="err">##</span><span class="n">__el__</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>5.2.示例</strong></p>

<figure class='code'><figcaption><span>CCDICT_FOREACH示例</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>    <span class="n">CCDictElement</span><span class="o">*</span> <span class="n">pElement</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CCDICT_FOREACH</span><span class="p">(</span><span class="n">dict</span><span class="p">,</span> <span class="n">pElement</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="k">const</span> <span class="kt">char</span><span class="o">*</span><span class="n">key</span> <span class="o">=</span> <span class="n">pElement</span><span class="o">-&gt;</span><span class="n">getStrKey</span><span class="p">();</span>
</span><span class='line'>      <span class="c1">// You certainly know the type of value, so we assume that it&#39;s a CCSprite.  </span>
</span><span class='line'>      <span class="n">CCSprite</span><span class="o">*</span> <span class="n">pSprite</span> <span class="o">=</span> <span class="p">(</span><span class="n">CCSprite</span><span class="o">*</span><span class="p">)</span><span class="n">pElement</span><span class="o">-&gt;</span><span class="n">getObject</span><span class="p">();</span>
</span><span class='line'>      <span class="c1">// ......  </span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p class='post-footer'>&nbsp;原文地址：<a href='http://fusijie.github.io/blog/2013/11/26/play-cocos2dx-26/'>http://fusijie.github.io/blog/2013/11/26/play-cocos2dx-26/</a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p>

]]></content>
  </entry>
  
</feed>
