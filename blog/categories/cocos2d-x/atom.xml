<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cocos2d-x | Jacky's Blog]]></title>
  <link href="http://www.fusijie.com/blog/categories/cocos2d-x/atom.xml" rel="self"/>
  <link href="http://www.fusijie.com/"/>
  <updated>2014-08-22T00:00:33+08:00</updated>
  <id>http://www.fusijie.com/</id>
  <author>
    <name><![CDATA[FuSijie]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之三十七】在Cocos2d-x中集成安卓版微信SDK]]></title>
    <link href="http://www.fusijie.com/blog/2014/08/21/play-cocos2dx-37/"/>
    <updated>2014-08-21T00:26:00+08:00</updated>
    <id>http://www.fusijie.com/blog/2014/08/21/play-cocos2dx-37</id>
    <content type="html"><![CDATA[<h3>1.概述</h3>

<p>微信的火热程度已不必说了，如果能在Cocos2d-x中集成微信SDK，让游戏能分享给好友或者朋友圈，那对游戏推广将会是非常有利的。好了，本文就是手把手地教大伙如何在Cocos2d-x中集成微信SDK。</p>

<h3>2.环境</h3>

<ul>
<li>OS: Mac OSX</li>
<li>IDE: Xcode v5.11 and Eclipse</li>
<li>Android SDK:4.0</li>
<li>Adnroid NDK:r9d</li>
<li>Cocos2d-x 3.2release</li>
</ul>


<h3>3.创建Cocos2d-x工程</h3>

<p>这里不再详述，网上的资料多如牛毛了。这里我按自己习惯的方式来。</p>

<!-- more -->


<p>（1）命令行创建Cocos2dxWechat项目</p>

<pre><code>$ cocos new -p com.fusijie.cocos2dxwechat -l cpp -d . Cocos2dxWechat
</code></pre>

<p>（2）交叉编译生成so文件</p>

<pre><code>$ cd Cocos2dxWechat/proj.android/
$ ./build_native.py
</code></pre>

<p>（3）导入Eclipse生成APK</p>

<p>导入libcocos2dx项目和Cocos2dxWechat项目到Eclipse中。在真机中成功运行Cocos2dxWechat.apk。</p>

<h3>4.申请创建微信应用</h3>

<p>这一步主要是在微信开放平台上申请创建移动应用，获取AppID。微信开放平台的网址是：<a href="https://open.weixin.qq.com/">https://open.weixin.qq.com/</a></p>

<p>（1）注册帐号，进入管理中心，点击创建移动应用。</p>

<p>（2）第一步是填写应用名，描述，图标等等。如下图。</p>

<div align="center"><img src="http://www-fusijie-com.qiniudn.com/playcocos2dx37_1.png" alt="" border="0" title="" /><br></br></div>


<p>（3）填写应用官网，勾选Android应用，填写签名，包名等等。如下图。</p>

<div align="center"><img src="http://www-fusijie-com.qiniudn.com/playcocos2dx37_2.png" alt="" border="0" title="" /><br></br></div>


<p><strong>注意：</strong></p>

<p>这里需要特别注意的是应用签名这一项。在第三步的时候，真机中成功运行Cocos2dxWechat.apk之后，我们需要从微信开放平台下载一个签名生成软件<a href="https://open.weixin.qq.com/cgi-bin/frame?t=resource/res_main_tmpl&amp;verify=1&amp;lang=zh_CN&amp;token=2788af648d5164d0feec470a8bfd42f9833ae887">GenSignature</a>（资源下载->Android资源下载）。</p>

<p>安装签名生成后，打开软件输入游戏包名获取即可。</p>

<div align="center"><img src="http://www-fusijie-com.qiniudn.com/playcocos2dx37_3.png" alt="" border="0" title="" /><br></br></div>


<p>这里的签名和游戏的包名和keystore是相关联的，如果修改了包名或者更换了keystore，必须同步更新微信开放平台管理中心的信息，防止失效。本示例采用的是debug签名。在完成以上工作后，提交审核即可。说是7天，实际上一般1～2天就审核过了。</p>

<h3>5.集成微信SDK</h3>

<p>刚才都是铺垫，这里开始才是进入主题了。要在Cocos2d-x调用微信安卓SDK，Jni跑不掉的。这里只演示如何进行分享到朋友圈和分享给好友，微信SDK还有很多高级的功能，如支付，收藏等等接口，有需要自行<a href="https://open.weixin.qq.com/cgi-bin/frame?t=resource/res_main_tmpl&amp;verify=1&amp;lang=zh_CN&amp;token=2788af648d5164d0feec470a8bfd42f9833ae887">参考文档（移动应用开发）</a>进行开发。</p>

<p>这里主要分成3部分来解释：</p>

<ul>
<li>微信SDK下载，jar包导入</li>
<li>Android代码</li>
<li>C++代码</li>
</ul>


<p>（1）下载微信SDK</p>

<p><a href="https://open.weixin.qq.com/cgi-bin/frame?t=resource/res_main_tmpl&amp;verify=1&amp;lang=zh_CN&amp;token=2788af648d5164d0feec470a8bfd42f9833ae887">资源下载->Android资源下载</a></p>

<p>（2）打开下载的Android_SDK.zip。解压，将lib目录下的libammsdk.jar拷到Cocos2dxWechat项目下的libs目录。</p>

<p>（3）右键单击工程，选择Build Path中的Configure Build Path&hellip;，选中Libraries这个tab，并通过Add Jars&hellip;导入工程libs目录下的libammsdk.jar文件。</p>

<div align="center"><img src="http://www-fusijie-com.qiniudn.com/playcocos2dx37_4.png" alt="" border="0" title="" /><br></br></div>


<p>（4）在AppActivity中添加成员变量</p>

<p>``` java 增加成员变量</p>

<pre><code>private static final String APP_ID = "wx1234567890";//AppID，从第四步获取
private static IWXAPI api;//微信API接口
private static AppActivity instance;//类静态实例，为了方便后面静态函数的调用
</code></pre>

<p>```</p>

<p>（5）注册到微信</p>

<p>打开AppActivity，在onCreate()中调用regToWX()注册到微信</p>

<p>``` java 注册到微信</p>

<pre><code>protected void onCreate(Bundle savedInstanceState) {
    // TODO Auto-generated method stub
    super.onCreate(savedInstanceState);

    instance = this;
    regToWX();
}

private void regToWX(){
    api = WXAPIFactory.createWXAPI(this, APP_ID, true);
    api.registerApp(APP_ID);
}
</code></pre>

<p>```</p>

<p>（6）由于这里采用的分享示例传递了一张icon，所以需要额外的一个bitmap的解析类Util类，这个类可以到微信官方SDK demo下载，也可以在本示例中下载（早期的SDK版本这个类是集成在微信SDK中）。icon放在res目录下的drawable目录，我这里偷个懒直接使用了应用icon。</p>

<p>（7）分享给好友</p>

<p>``` java 分享给好友</p>

<pre><code>public static void sendMsgToFriend(){

    if(api.openWXApp())
    {
        WXWebpageObject webpage = new WXWebpageObject();
        webpage.webpageUrl = "http://www.fusijie.com";
        WXMediaMessage msg = new WXMediaMessage(webpage);
        msg.title = "Tittle";
        msg.description = "Description";

        Bitmap thumb = BitmapFactory.decodeResource(instance.getResources(), R.drawable.icon);
        msg.thumbData = Util.bmpToByteArray(thumb, true);

        SendMessageToWX.Req req = new SendMessageToWX.Req();
        req.transaction = buildTransaction("webpage");
        req.message = msg;
        req.scene = SendMessageToWX.Req.WXSceneSession;
        api.sendReq(req);
    }
    else
    {
         Toast.makeText(instance, "未安装微信", Toast.LENGTH_SHORT).show();
    }
}
</code></pre>

<p>```</p>

<p>（8）分享到朋友圈</p>

<p>``` java 分享到朋友圈</p>

<pre><code>public static void sendMsgToTimeLine(){

    if(api.openWXApp())
    {
        if(api.getWXAppSupportAPI() &gt;= 0x21020001)
        {               
            WXWebpageObject webpage = new WXWebpageObject();
            webpage.webpageUrl = "http://www.fusijie.com";
            WXMediaMessage msg = new WXMediaMessage(webpage);
            msg.title = "Tittle";
            msg.description = "Description";

            Bitmap thumb = BitmapFactory.decodeResource(instance.getResources(), R.drawable.icon);
            msg.thumbData = Util.bmpToByteArray(thumb, true);

            SendMessageToWX.Req req = new SendMessageToWX.Req();
            req.transaction = buildTransaction("webpage");
            req.message = msg;
            req.scene = SendMessageToWX.Req.WXSceneTimeline;
            api.sendReq(req);
        }
        else{
            Toast.makeText(instance, "微信版本过低", Toast.LENGTH_SHORT).show();
        }

    }
    else
    {
         Toast.makeText(instance, "未安装微信", Toast.LENGTH_SHORT).show();
    }
}
</code></pre>

<p>```</p>

<p>其中buildTransaction()用于生成一个唯一的会话标识符。</p>

<p>``` java buildTransaction</p>

<pre><code>private static String buildTransaction(final String type) {
    return (type == null) ? String.valueOf(System.currentTimeMillis()) : type + System.currentTimeMillis();
}
</code></pre>

<p>```</p>

<p>代码不难，所以不再逐行解释，可以参考<a href="https://open.weixin.qq.com/zh_CN/htmledition/res/dev/document/sdk/android/index.html">SDK文档</a>。</p>

<p>（9）JNI调用</p>

<p>在Classes目录下新建一个WeixinShare类，主要包含2个静态函数：</p>

<p>``` cpp Jni调用分享给好友和朋友圈</p>

<pre><code>void WeiXinShare::sendToFriend()
{
#if (CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID) //判断当前是否为Android平台
JniMethodInfo minfo;

bool isHave = JniHelper::getStaticMethodInfo(minfo,"com/fusijie/umengdemo/WeChatDemo","sendMsgToFriend", "()V");

if (!isHave) {
    log("jni:sendMsgToFriend is null");
}else{
    //调用此函数
    minfo.env-&gt;CallStaticVoidMethod(minfo.classID, minfo.methodID);
}
#endif
</code></pre>

<p>}</p>

<pre><code>void WeiXinShare::sendToTimeLine()
{
#if (CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID) //判断当前是否为Android平台
JniMethodInfo minfo;

bool isHave = JniHelper::getStaticMethodInfo(minfo,"com/fusijie/umengdemo/WeChatDemo","sendMsgToTimeLine", "()V");

if (!isHave) {
    log("jni:sendMsgToTimeLine is null");
}else{
    //调用此函数
    minfo.env-&gt;CallStaticVoidMethod(minfo.classID, minfo.methodID);
}
#endif
</code></pre>

<p>}</p>

<p>```</p>

<p>（10）Cocos2d-x使用</p>

<p>这个就比较简单了，只要包含这个WeiXinShare类，调用这两个静态函数即可。</p>

<p>``` cpp 主程序调用</p>

<pre><code>void HelloWorld::menuCloseCallback(Ref* pSender)
{
#if (CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID)
//WeiXinShare::sendToFriend();
WeiXinShare::sendToTimeLine();
#endif
}
</code></pre>

<p>```</p>

<p>（11）Android.mk的修改</p>

<p>最后不要忘记修改Android.mk文件。</p>

<pre><code>LOCAL_SRC_FILES := hellocpp/main.cpp \
               ../../Classes/AppDelegate.cpp \
               ../../Classes/HelloWorldScene.cpp \
               ../../Classes/WeiXinShare.cpp
</code></pre>

<p>（12）重新交叉编译，打包为APK即可</p>

<h3>6.效果</h3>

<p><strong>分享给好友</strong></p>

<div align="center"><img src="http://www-fusijie-com.qiniudn.com/playcocos2dx37_5.png" alt="" border="0" title="" /><br></br></div>


<p><strong>分享到朋友圈</strong></p>

<div align="center"><img src="http://www-fusijie-com.qiniudn.com/playcocos2dx37_6.png" alt="" border="0" title="" /><br></br></div>


<h3>7.总结</h3>

<p>本文写的比较详细，但是也忽略了比如如何接收微信的请求及返回值的说明以及如何进行混淆等等，算是一个初级教程吧。主要是面向对jni调用，第三方安卓sdk集成不太了解的朋友。这里虽然只是针对微信sdk的部分功能集成进行说明，但是道理都是共通的，如何集成微博分享，如何集成第三方广告等等，用类似的方法都可以实现。</p>

<p>本demo的下载地址：<a href="https://github.com/fusijie/Cocos2dx-Wechat">我的Github</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之三十六】Earth Warrior 3D 大揭秘]]></title>
    <link href="http://www.fusijie.com/blog/2014/07/10/play-cocos2dx-36/"/>
    <updated>2014-07-10T00:13:00+08:00</updated>
    <id>http://www.fusijie.com/blog/2014/07/10/play-cocos2dx-36</id>
    <content type="html"><![CDATA[<p>3D游戏现在玩起来门槛还是挺高的。不过如果在Cocos2d-x引擎加入3D扩展，实现2.5D游戏效果又会怎么样？</p>

<h3>1.概述</h3>

<p>先上大会现场演示图：</p>

<div align="center"><img src="http://www-fusijie-com.qiniudn.com/4196_140316183412_1.JPG" alt="" border="0" title="" /><br></br></div>




<!-- more -->


<p>Apk下载：<a href="http://pan.baidu.com/s/1ntM75bV">http://pan.baidu.com/s/1ntM75bV</a></p>

<p>源码下载：<a href="https://github.com/chukong/EarthWarrior3D.git">https://github.com/chukong/EarthWarrior3D.git</a>，给个star不费电。。。</p>

<p>开发环境：Cocos2d-x v3.0 + Sprite3D扩展</p>

<p>适用平台：Mac/iOS/Android</p>

<h3>2.Sprite3D扩展</h3>

<p><strong>2.1. Sprite3D</strong></p>

<p>sprite3D扩展目前可以支持加载静态obj模型。</p>

<p>``` cpp Sprite3D使用</p>

<pre><code>auto model = Sprite3D::create("3dmodel.obj", "texture.png"); 
</code></pre>

<p>```</p>

<p><strong>2.2. Toon Shading</strong></p>

<p>Cocos2d-x精灵不能做发光效果，而Sprite3D中加入了发光函数，指定outline width和color就行了。</p>

<p>``` cpp 设置边缘发光</p>

<pre><code>model-&gt;setOutline(1.5, Color3B(0,0,0)); // 设置发光宽度1.5，黑色
</code></pre>

<p>```</p>

<p><strong>2.3. 3D API</strong></p>

<p>3D API是Cocos2d-x v3.0就具有的属性，源码可以到Node上看。</p>

<p>``` cpp 设置位置和旋转</p>

<pre><code>node-&gt;setPosition3D(Vertex3F(x,y,z));//设置位置  
Vertex3F pos = node-&gt;getPosition3D();  
node-&gt;setRotation3D(Vertex3F(x,y,z));//设置旋转  
Vertex3F rot = node-&gt;getRotation3D();
</code></pre>

<p>```</p>

<p>其中Vertex3F当然就是指定了三维空间。而3D API同样也移植到了一些动作中，比如：</p>

<p>``` cpp 3D旋转</p>

<pre><code>node-&gt;runAction(RotateBy::create(Vertex3F(x,y,z)));  
</code></pre>

<p>```</p>

<p>完全没问题。</p>

<h3>3.EarthWarrior</h3>

<p>Classes/3d文件夹包含了Sprite3D。其余文件为游戏逻辑控制，游戏总共三个场景</p>

<p><strong>3.1. 主菜单界面（MainMenuScene）</strong>
包含：主菜单场景（MainMenuScene），飞机模型（Plane），License和Credits层（LicenseLayer）。</p>

<div align="center"><img src="http://www-fusijie-com.qiniudn.com/20140328095139203.png" alt="" border="0" title="" /><br></br></div>


<p>关键点：</p>

<p><em>①主界面3D飞机的实现</em></p>

<p>``` cpp 主界面3D飞机的实现</p>

<pre><code>//Plane.cpp  
_Model = Sprite3D::create("playerv002.obj", "playerv002_256.png");  
if(_Model){  
    _Model-&gt;setScale(55);  
    ((Sprite3D*)_Model)-&gt;setOutline(0.035, Color3B::BLACK);  
    _Model-&gt;setRotation3D(Vertex3F(originX,originY,originZ));  
    this-&gt;setRotation3D(Vertex3F(originX, originY, originZ));  
    this-&gt;addChild(_Model);  
    this-&gt;scheduleUpdate();  
}  
</code></pre>

<p>```</p>

<p><em>②对数学感兴趣的可以研究一下scheduleUpdate怎样让飞机晃啊晃。。。粒子系统这里就不再重复了。</em></p>

<p>``` cpp 设置飞机摇晃</p>

<pre><code>void Plane::update(float dt)  
{  
    pRate+=0.01;  
    _Model-&gt;setRotation3D(Vertex3F(0-pXA*sin(pXW*pRate),0,0-pZA*sin(pZW*pRate)));  
}  
</code></pre>

<p>```</p>

<p><strong>3.2. 载入界面（LoadingScene）</strong></p>

<p>包含：载入场景（LoadingScene）,粒子管理器(ParticleManager)</p>

<div align="center"><img src="http://www-fusijie-com.qiniudn.com/20140328095149734.png" alt="" border="0" title="" /><br></br></div>


<p>关键点：</p>

<p><em>①Loading界面实现资源的预加载，包括音乐，纹理，粒子效果，其中纹理使用异步加载，粒子效果在ParticleManager（单例类）中加载。</em></p>

<p><em>②同时Loading界面也实现了游戏元素的预创建并保存在全局池中，避免游戏过程中的卡顿现象和反复create的低效，包括四类敌机和导弹Missile，在update中实现每帧创建一个，避免LoadingScene的卡顿。</em></p>

<p><em>③cocos Logo的旋转动画</em></p>

<p>```cpp cocos Logo旋转动画</p>

<pre><code>void LoadingScene::InitCoco()  
{  
    Size visibleSize = Director::getInstance()-&gt;getVisibleSize();  
    auto coco = Sprite3D::create("coconut.obj", "coco.png");  
    if(coco)  
    {  
        coco-&gt;setPosition(Point(visibleSize.width/2, visibleSize.height/2-150));  
        coco-&gt;setOutline(10,Color3B(0,0,0));  
        addChild(coco,1);  
        coco-&gt;runAction(RepeatForever::create(RotateBy::create(0.8f,Vertex3F(0,360,0))));  
    }  
} 
</code></pre>

<p>```</p>

<p><strong>3.3. 游戏界面（HelloWorldScene）</strong></p>

<p>包含：游戏层（GameLayer），游戏元素基类（GameEntity），飞机类（AirCraft），玩家类（Player），敌机类（Enemies，又包括Fodder，FodderLeader，BigDude，Boss四类敌机），子弹类（Bullet，又包括PlayerBullet，Missile两类子弹），效果管理类（EffectManager），爆炸类（Explosion，又包括SmallExplosion，BigExplosion，BulletExplosion），游戏控制层（GameController，又包括BulletController，EnemyController和GameController），游戏结束层（GameOverLayer）</p>

<div align="center"><img src="http://www-fusijie-com.qiniudn.com/20140328095145093.png" alt="" border="0" title="" /><br></br></div>


<p>关键点：</p>

<p><em>①玩家和敌机的子弹控制统一在BulletController::spawnBullet中处理。如上述游戏元素保存在全局池中，可回收利用，避免反复创建，spawnBullet会先从这个池中取出，如果该池为空才会创建对于的子弹。</em></p>

<p><em>②敌机的处理也是采用相同的方式，在EnemyController::spawnEnemy中处理，如果该池为空才会创建对于的敌机。</em></p>

<p><em>③GameLayer::gameMaster管理敌机的出现的频率。</em></p>

<p><em>④GameController::update管理游戏的碰撞检测。</em></p>

<p>除了一些数学上的计算比较羞涩意外，整个游戏的逻辑还是比较简单的。。。这里就不细说了，大家直接看源码吧。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之三十五】《我叫MT offline》Demo]]></title>
    <link href="http://www.fusijie.com/blog/2014/02/25/play-cocos2dx-35/"/>
    <updated>2014-02-25T19:43:00+08:00</updated>
    <id>http://www.fusijie.com/blog/2014/02/25/play-cocos2dx-35</id>
    <content type="html"><![CDATA[<h3>1.写在前面</h3>

<p><strong>这是怎样一个游戏？</strong></p>

<p>这是一个最好的时代。软件跑在硬件之前，而创意跑在软件之前。除去那些跨时代的作品（现在还没出，比如体感，识别等等和硬件强相关的游戏），现在的手游对技术的要求门槛已经大大降低了。这是个创意决定市场的时代。</p>

<p>（1）比如早些时候的愤怒小鸟，植物僵尸，水果忍者，这些是智能机刚刚诞生的时候出来的，可以说是借iphone引领的触屏之风顺势而行火了一把，这种机会可遇不可求。</p>

<p>（2）再如飞机大战，FlappyBird，这些是利用怀旧风，无差别竞技以及用户口碑营销堆起来的游戏，这靠的要么后台硬有干爹，要么祖坟正运气好，如果都没有，想火也很难。</p>

<p>（3）又如卡牌，COC，横版格斗，这些靠的是真正的创意。由此引来的一堆跟风之作就能看出来，几千万的月流水也证明了这一点，第一个想到创意，第一个抢到市场就是赢家。但是再来山寨就没意思了。</p>

<p><em>MT就是这样一款一出现就让人眼前一亮的游戏，我期待手游市场天天都能出现不一样的作品，能抓住用户的游戏，而不是反复的换皮圈钱关服走人。</em></p>

<!-- more -->


<p><strong>我为什么要写这么一个demo？</strong></p>

<p>对于一个游戏狂热份子，当《我叫MT》出来的时候，新奇的玩法，酷炫的卡牌，流畅的动画，以及WOW情结，让我找不到理由拒绝它（虽然到现在蛋疼的用户体验和反人类设计还有不少）。每个游戏都有自己的生命周期，这些是跑不掉的，或许卓越的钱还没有赚够，但我希望这款游戏最后能有一个体面的结局。</p>

<p>从MT ios一区开始，玩到现在也近一年半了。它陪伴我历经了很多事情，如人饮水冷暖自知。每个程序员都有一颗做游戏的心。在决定进入游戏行业后，我决定写个MT的demo出来，算是感谢也算是怀念。说来也巧，当初找来各种版本的《我叫MT》反编译拿游戏资源为的只是为了收集所有的卡牌图片，结果后面发现2.3以后的版本都做了资源加密处理。所以手上只有2.3版的资源，这个demo就按着2.3版做。</p>

<p><strong>《我叫MT offline》这个游戏能做什么？</strong></p>

<p>其实它什么也做不了，只是游戏的整体框架以及所有动画的demo，由于写的比较赶，很多功能都没有来得及实现，代码也写的比较粗糙。接下来我会继续完善它，我的最终目的是把它改成单机版的《我叫MT offline》。它的工作量太大了，而且体力活占大部分，所以代码模块化复用和游戏内存优化显得很重要。如果不用赔60亿我会考虑把源码推上<a href="https://github.com/fusijie">Github</a>。</p>

<p>游戏采用VS2012+cocos2d-x v2.2.0开发。</p>

<h3>2.游戏结构和效果</h3>

<p><strong>公告</strong></p>

<div align="center"><img src="http://www.fusijie.com/images/Blog/mt/announcement.png" alt="" border="0" title="4" /><br></br></div>


<p><strong>游戏</strong></p>

<center><embed src="http://player.youku.com/player.php/sid/XNjc3ODI3NjY0/v.swf" allowFullScreen="true" quality="high" width="480" height="400" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"></embed></center>


<p>录了个视频，我会尽快放出apk。</p>

<p><strong>开幕故事</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/story.gif">http://www.fusijie.com/images/Blog/mt/story.gif</a></p>

<p><strong>游戏主场景</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/mainui.gif">http://www.fusijie.com/images/Blog/mt/mainui.gif</a></p>

<p><strong>英雄</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/card.gif">http://www.fusijie.com/images/Blog/mt/card.gif</a></p>

<p><strong>进化</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/evolve.gif">http://www.fusijie.com/images/Blog/mt/evolve.gif</a></p>

<p><strong>碎片</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/chip.gif">http://www.fusijie.com/images/Blog/mt/chip.gif</a></p>

<p><strong>升级</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/levelup.gif">http://www.fusijie.com/images/Blog/mt/levelup.gif</a></p>

<p><strong>奖励</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/task.gif">http://www.fusijie.com/images/Blog/mt/task.gif</a></p>

<p><strong>技能学院</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/colleage.gif">http://www.fusijie.com/images/Blog/mt/colleage.gif</a></p>

<p><strong>副本列表</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/instance.gif">http://www.fusijie.com/images/Blog/mt/instance.gif</a></p>

<p><strong>副本战斗</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/battle.gif">http://www.fusijie.com/images/Blog/mt/battle.gif</a></p>

<p><strong>竞技场</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/arena.gif">http://www.fusijie.com/images/Blog/mt/arena.gif</a></p>

<p><strong>商店</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/store.gif">http://www.fusijie.com/images/Blog/mt/store.gif</a></p>

<p><strong>单次抽奖</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/raffleone.gif">http://www.fusijie.com/images/Blog/mt/raffleone.gif</a></p>

<p><strong>十连抽</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/raffleten.gif">http://www.fusijie.com/images/Blog/mt/raffleten.gif</a></p>

<p><strong>好友</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/friend.gif">http://www.fusijie.com/images/Blog/mt/friend.gif</a></p>

<p><strong>攻略</strong></p>

<p><a href="http://www.fusijie.com/images/Blog/mt/more.gif">http://www.fusijie.com/images/Blog/mt/more.gif</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之三十四】绘图：CCDrawingPrimitives和CCDrawNode]]></title>
    <link href="http://www.fusijie.com/blog/2014/02/08/play-cocos2dx-34/"/>
    <updated>2014-02-08T16:10:00+08:00</updated>
    <id>http://www.fusijie.com/blog/2014/02/08/play-cocos2dx-34</id>
    <content type="html"><![CDATA[<p>最近忙出翔了，这年过的也揪心。好久没来更新博客了，今天就来写一写cocos2d-x中图形的绘制。</p>

<h3>1.概述</h3>

<p>其实cocos2d-x封装了大量的opengl的绘图函数，我们可以很轻松的在游戏中调用。但是实际上我们很少会这么做，因为编码绘图的方式效率实在太低了，尤其是诸如一些高阶贝塞尔曲线之类的，官方也不建议这么做，使用图像能更有效的提高绘图效率，同时也会更为的美观，也减少了一些精灵遮挡问题和边缘锯齿问题。cocos2d-x中绘图主要有两种方式：CCDrawingPrimitives和CCDrawNode。它们都在cocos2dx\draw_nodes目录下。</p>

<!-- more -->


<h3>2.CCDrawingPrimitives（原生绘图）</h3>

<p><strong>2.1.特点</strong></p>

<p>CCDrawingPrimitives必须在节点的draw函数中调用，draw函数每帧被调用一次，主要做一些绘制的工作。但这并不意味着它就是静态不可改变的，我们完全可以通过修改描绘内容的方式来动态绘图。比如可以直接在用触摸的方式在屏幕上绘图。</p>

<p>另外，使用CCDrawingPrimitives绘图默认的Z-Order是0，所以可能会被其他节点覆盖，因为它无法设置Z-Order，所以只能通过设置其他节点的Z-Order为负值使得绘图在最前端得以看见。</p>

<p><strong>2.2.API</strong></p>

<p>``` cpp CCDrawingPrimitives API</p>

<pre><code>//绘制一个给定x，y值的点  
void CC_DLL ccDrawPoint( const CCPoint&amp; point );  

//绘制一组点  
void CC_DLL ccDrawPoints( const CCPoint *points, unsigned int numberOfPoints );  

//绘制一条给定起始点和目标点的直线  
void CC_DLL ccDrawLine( const CCPoint&amp; origin, const CCPoint&amp; destination );  

//绘制一个给定起始点和目标点的矩形  
void CC_DLL ccDrawRect( CCPoint origin, CCPoint destination );  

//绘制一个给定起始点和目标点和颜色的矩形  
void CC_DLL ccDrawSolidRect( CCPoint origin, CCPoint destination, ccColor4F color );  

//绘制一个给定一组点的多边形，可以是闭合或开放  
void CC_DLL ccDrawPoly( const CCPoint *vertices, unsigned int numOfVertices, bool closePolygon );  

//绘制一个给定一组点和颜色的多边形  
void CC_DLL ccDrawSolidPoly( const CCPoint *poli, unsigned int numberOfPoints, ccColor4F color );  

//绘制一个给定中心，半径，分段数的圆  
void CC_DLL ccDrawCircle( const CCPoint&amp; center, float radius, float angle, unsigned int segments, bool drawLineToCenter, float scaleX, float scaleY);  
void CC_DLL ccDrawCircle( const CCPoint&amp; center, float radius, float angle, unsigned int segments, bool drawLineToCenter);  

//绘制一个带一个控制点的贝塞尔曲线（二次）  
void CC_DLL ccDrawQuadBezier(const CCPoint&amp; origin, const CCPoint&amp; control, const CCPoint&amp; destination, unsigned int segments);  

//绘制一个带两个控制点的贝塞尔曲线（高阶）  
void CC_DLL ccDrawCubicBezier(const CCPoint&amp; origin, const CCPoint&amp; control1, const CCPoint&amp; control2, const CCPoint&amp; destination, unsigned int segments);  

//绘制默认曲率的基数样条  
void CC_DLL ccDrawCatmullRom( CCPointArray *arrayOfControlPoints, unsigned int segments );  

//绘制指定曲率的基数样条  
void CC_DLL ccDrawCardinalSpline( CCPointArray *config, float tension,  unsigned int segments );  

//设置绘制颜色，4个byte型  
void CC_DLL ccDrawColor4B( GLubyte r, GLubyte g, GLubyte b, GLubyte a );  

//设置绘制颜色，4个float型  
void CC_DLL ccDrawColor4F( GLfloat r, GLfloat g, GLfloat b, GLfloat a );  

//设置点大小，默认为1  
void CC_DLL ccPointSize( GLfloat pointSize );  
</code></pre>

<p>```</p>

<p><strong>2.3.示例</strong></p>

<p>代码使用的是TestCpp中代码。</p>

<div align="center"><img src="http://img.blog.csdn.net/20140207170619906?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="" /><br></br></div>


<h3>3.CCDrawNode（绘图节点）</h3>

<p><strong>3.1.特点</strong></p>

<p>CCDrawNode从CCNode继承而来，是一个图形绘制的节点类，它提供了几个常用的点线面函数方便绘图，其实在之前的游戏遮罩一文中就有写过。相较于CCDrawingPrimitives，这里更推荐使用CCDrawNode。</p>

<p><em>（1）它将绘图封装为普通节点的方式进行处理，符合cocos2d-x树状编程的思想，同时也避免了一些遮盖的问题。</em></p>

<p><em>（2）不需要在draw函数中调用。</em></p>

<p><em>（3）使用批处理绘图，提高了绘图效率。</em></p>

<p><strong>3.2.API</strong></p>

<p>``` cpp CCDrawNode API</p>

<pre><code>//绘制一个指定位置，大小，颜色的点  
void drawDot(const CCPoint &amp;pos, float radius, const ccColor4F &amp;color);  

//绘制一个指定起点终点，大小，颜色的点  
void drawSegment(const CCPoint &amp;from, const CCPoint &amp;to, float radius, const ccColor4F &amp;color);  

//绘制一个指定点，填充颜色，边框颜色的，边框宽度的多边形  
void drawPolygon(CCPoint *verts, unsigned int count, const ccColor4F &amp;fillColor, float borderWidth, const ccColor4F &amp;borderColor);  
</code></pre>

<p>```</p>

<p><strong>3.3.示例</strong></p>

<p>代码也是TestCpp中的代码。</p>

<div align="center"><img src="http://img.blog.csdn.net/20140207170658078?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="" /><br></br></div>


<h3>4.源码下载</h3>

<p>可以自己看TestCpp示例，也可以从<a href="http://download.csdn.net/detail/jackyvincefu/6903357">这里</a>下载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之三十三】游戏嵌入Webview网页]]></title>
    <link href="http://www.fusijie.com/blog/2013/12/26/play-cocos2dx-33/"/>
    <updated>2013-12-26T14:11:00+08:00</updated>
    <id>http://www.fusijie.com/blog/2013/12/26/play-cocos2dx-33</id>
    <content type="html"><![CDATA[<p>手游《我叫MT》一开始会弹出一个游戏公告，有玩过的肯定都蛮熟悉的，这就是webview，就是一个网页。由于webview和平台相关，这里就介绍下cocos2d-x如何嵌入andorid的webview控件，在cocos2d-x中显示网页。</p>

<h3>1.Jni</h3>

<p>Jni这里我就不再多说了。可用参考<a href="http://en.wikipedia.org/wiki/Java_Native_Interface">wikipedia</a>，或者<a href="http://blog.csdn.net/jackystudio/article/details/12150907">微信飞机大战的移植篇</a>。通过Jni，可以实现在cocos2d-x中调用Android的API，当然也可以进行传值。</p>

<h3>2.Android使用webview</h3>

<p>直接上代码。主要是处理布局和webview使用的问题。这里采用代码布局。以下操作在android的主类（cocos2dxActivity）中处理。</p>

<!-- more -->


<p><strong>2.1.添加成员变量</strong></p>

<p>整个布局的结构是最底层一个FrameLayout，ImageView控件放置在FrameLayout上。然后之上是一个LinearLayout用来放置关闭按钮，LinearLayout往下是Webview控件。</p>

<p>``` java 成员变量</p>

<pre><code>static Test test  = null;//Test实例  
WebView m_webView;//WebView控件  
ImageView m_imageView;//ImageView控件  
FrameLayout m_webLayout;//FrameLayout布局  
LinearLayout m_topLayout;//LinearLayout布局  
Button m_backButton;//关闭按钮  
</code></pre>

<p>```</p>

<p><strong>2.2.OnCreate中添加FrameLayout布局</strong></p>

<p>``` java 添加FrameLayout布局</p>

<pre><code>protected void onCreate(Bundle savedInstanceState){  
    super.onCreate(savedInstanceState);  
    test=this;  

    //初始化一个空布局  
    m_webLayout = new FrameLayout(this);  
    FrameLayout.LayoutParams lytp = new FrameLayout.LayoutParams(800,640);  
    lytp .gravity = Gravity.CENTER;  
    addContentView(m_webLayout, lytp);  
}
</code></pre>

<p>```</p>

<p><strong>2.3.返回实例</strong></p>

<p>``` java 返回实例</p>

<pre><code>public static Test getInstance() {  
    Log.v("TestJacky","getInstance");  
    return test;  
}  
</code></pre>

<p>```</p>

<p><strong>2.4.显示webview</strong></p>

<p>``` java 显示webview</p>

<pre><code>public void openWebview() {  
    Log.v("TestJacky", "openWebView");  
    this.runOnUiThread(new Runnable() {//在主线程里添加别的控件  
        public void run() {     
            //初始化webView  
            m_webView = new WebView(test);  
            //设置webView能够执行javascript脚本  
            m_webView.getSettings().setJavaScriptEnabled(true);              
            //设置可以支持缩放  
            m_webView.getSettings().setSupportZoom(true);//设置出现缩放工具  
            m_webView.getSettings().setBuiltInZoomControls(true);  
            //载入URL  
            m_webView.loadUrl("http://m.blog.csdn.net/blog/jackyvincefu/");  
            //使页面获得焦点  
            m_webView.requestFocus();  
            //如果页面中链接，如果希望点击链接继续在当前browser中响应  
            m_webView.setWebViewClient(new WebViewClient(){         
                public boolean shouldOverrideUrlLoading(WebView view, String url) {     
                    if(url.indexOf("tel:")&lt;0){  
                        view.loadUrl(url);   
                }  
                return true;         
            }      
        });  

        //背景图  
        m_imageView = new ImageView(test);  
        m_imageView.setImageResource(R.drawable.bkgnd);  
        m_imageView.setScaleType(ImageView.ScaleType.FIT_XY);  
        //初始化线性布局 里面加按钮和webView  
        m_topLayout = new LinearLayout(test);        
        m_topLayout.setOrientation(LinearLayout.VERTICAL);  
        //初始化返回按钮  
        m_backButton = new Button(test);  
        m_backButton.setBackgroundResource(R.drawable.btn);  
        LinearLayout.LayoutParams lypt=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);  
        lypt.gravity=Gravity.RIGHT;  
        m_backButton.setLayoutParams(lypt);              
        m_backButton.setOnClickListener(new OnClickListener() {                      
            public void onClick(View v) {  
                removeWebView();  
            }  
        });  
        //把image加到主布局里  
        m_webLayout.addView(m_imageView);  
        //把webView加入到线性布局  
        m_topLayout.addView(m_backButton);  
        m_topLayout.addView(m_webView);                  
        //再把线性布局加入到主布局  
        m_webLayout.addView(m_topLayout);  
        }  
    });  
}
</code></pre>

<p>```</p>

<p><strong>2.5.移除webview</strong></p>

<p>``` java 移除webview</p>

<pre><code>public void removeWebView() {                
    m_webLayout.removeView(m_imageView);  
    m_imageView.destroyDrawingCache();  

    m_webLayout.removeView(m_topLayout);  
    m_topLayout.destroyDrawingCache();  

    m_topLayout.removeView(m_webView);  
    m_webView.destroy();  

    m_topLayout.removeView(m_backButton);  
    m_backButton.destroyDrawingCache();  
}  
</code></pre>

<p>```</p>

<p><strong>2.6.重写返回键</strong></p>

<p>``` java 重写返回键</p>

<pre><code>public boolean onKeyDown(int keyCoder,KeyEvent event)  
{  
    //如果网页能回退则后退，如果不能后退移除WebView  
    if(m_webView.canGoBack() &amp;&amp; keyCoder == KeyEvent.KEYCODE_BACK){  
        m_webView.goBack();  
    }else{  
        removeWebView();  
    }  
    return false;        
}  
</code></pre>

<p>```</p>

<h3>3.cocos2d-x使用Jni</h3>

<p>这里直接使用HelloWorld的示例，修改了close按钮的回调函数。</p>

<p><strong>3.1.jni头文件</strong></p>

<p>``` cpp jni头文件</p>

<pre><code>#if (CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID)  
#include &lt;jni.h&gt;  
#include "platform/android/jni/JniHelper.h"  
#endif  
</code></pre>

<p>```</p>

<p><strong>3.2.Jni调用打开webview</strong></p>

<p>``` cpp Jni调用打开webview</p>

<pre><code>void HelloWorld::menuCloseCallback(CCObject* pSender)  
{  
    #if (CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID)  
    JniMethodInfo minfo;  
    //getStaticMethodInfo，判断Java静态函数是否存在，并且把信息保存到minfo里  
    //参数1：JniMethodInfo  
    //参数2：Java类包名+类名  
    //参数3：Java函数名称  
    //参数4：函数参数类型和返回值类型  
    bool isHave = JniHelper::getStaticMethodInfo(minfo,"com/jacky/test/Test","getInstance","()Lcom/jacky/test/Test;");  
    jobject jobj;//存对象  
    if (isHave) {  
        //这里的调用getInstance，返回Test类的对象。  
        jobj = minfo.env-&gt;CallStaticObjectMethod(minfo.classID, minfo.methodID);  

        isHave = JniHelper::getMethodInfo(minfo,"com/jacky/test/Test","openWebview","()V");  
        if (isHave) {  
            //调用openWebview, 参数1：Test对象   参数2：方法ID  
            minfo.env-&gt;CallVoidMethod(jobj, minfo.methodID);  
        }  
    }  
    #else  
        CCDirector::sharedDirector()-&gt;end();  
    #if (CC_TARGET_PLATFORM == CC_PLATFORM_IOS)  
        exit(0);  
    #endif  
    #endif  
}  
</code></pre>

<p>```</p>

<h3>4.效果图</h3>

<p>爪机截屏的。</p>

<div align="center"><img src="http://img.blog.csdn.net/20131226095754125?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="" /><br></br></div>




<div align="center"><img src="http://img.blog.csdn.net/20131226095821781?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="" /><br></br></div>




<div align="center"><img src="http://img.blog.csdn.net/20131226095849921?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamFja3lzdHVkaW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" border="0" title="" /><br></br></div>


<p><em>ps：这里没有处理多次打开webview的情况。可以采用Jni方法来通知cocos2d-x，也可以直接在主类中设置一个成员变量标志位，调用openWebview时设置为true，removeWebView时设置为false，在调用openWebview时检测这个标志位来决定是否打开即可。</em></p>

<h3>5.源码下载</h3>

<p>包含win32，android代码，拿掉了android交叉编译生成的obj，保留so和apk文件。</p>

<p><a href="http://download.csdn.net/detail/jackyvincefu/6770315">下载地址</a></p>
]]></content>
  </entry>
  
</feed>
