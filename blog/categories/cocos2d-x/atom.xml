<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cocos2d-x | Jacky's Blog]]></title>
  <link href="http://www.jacky.tk/blog/categories/cocos2d-x/atom.xml" rel="self"/>
  <link href="http://www.jacky.tk/"/>
  <updated>2013-11-10T10:19:55+08:00</updated>
  <id>http://www.jacky.tk/</id>
  <author>
    <name><![CDATA[FuSijie]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之十二】plist解析工具：Anti_TexturePacker]]></title>
    <link href="http://www.jacky.tk/blog/2013/10/19/play-cocos2dx-12/"/>
    <updated>2013-10-19T09:49:00+08:00</updated>
    <id>http://www.jacky.tk/blog/2013/10/19/play-cocos2dx-12</id>
    <content type="html"><![CDATA[<p>原创作品，转载请标明：<a href="http://blog.csdn.net/jackystudio/article/details/12867863">http://blog.csdn.net/jackystudio</a></p>

<p>之前拿了一些别人的图片素材，是用TexturePacker打包合成的，结果写程序的时候不知道每个合成前小png图的名字是什么，只能一个一个从plist文件中找，然后猜测对应的名字，再进行显示，如果不对，还要继续猜。。。坑爹啊，效率大大降低了，时间都耗在找图片名字上了。后来决定动手写一个解析plist的软件，就叫它Anti_TexturePacker吧。</p>

<p>Anti_TexurePacker软件基于VS 2008 MFC Dialog。</p>

<h3>1.PNG图的显示</h3>

<p>这个还好，VS2008提供了GDI+，所以可以直接用它显示。关键是屏幕尺寸有限，如果打包后的PNG图很大的话，不能直接显示，又懒得做滚动条，所以直接采用缩放的方式了。缩放比例较大的话，可能会出现捕获点计算不精确，不过效果还是不错的，没有尺寸限制。</p>

<!-- more -->


<pre><code>CDC* pDC =GetDC();  
Graphics graphics( pDC-&gt;m_hDC);  
Image image(m_PNGFileName.GetString(), FALSE);  
graphics.DrawImage(&amp;image,ORIGIN_DRAW_X,ORIGIN_DRAW_Y,(int)(m_RealWidth*m_ScaleRatio),(int)(m_RealHeight*m_ScaleRatio)); 
</code></pre>

<p>要注意PNG图的显示要放在OnPaint中执行，这样窗口进行重绘的时候才会保证PNG图的正常显示。</p>

<h3>2.plist文件的读取</h3>

<p>看一下plist的格式：</p>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_12/7.jpg" alt="" border="0" title="xml" /><br></br></div>


<p>这样一看，就知道了标准的plist文件中，我们需要的是第7，10，14，20，23，27&hellip;行。抓出规律，读取到CStringArray。</p>

<pre><code>    int i=1;
    int needName=7;
    int needConfig=10;
    int needrotate=14;
    if(!bFileExist)//如果文件存在且可读
    {
        return FALSE;
    }
    CString strline;
    FileContainer.RemoveAll();
    //将PlistFile文件数据读到FileContainer
    while(PlistFile.ReadString(strline))
    {
        if (i==needName)
        {
            FileContainer.Add(strline);
            needName+=13;
        }
        if (i==needConfig)
        {
            FileContainer.Add(strline);
            needConfig+=13;
        }
        if (i==needrotate)
        {
            FileContainer.Add(strline);
            needrotate+=13;
        }
        i++;
    }
    PlistFile.Close();
</code></pre>

<p>然后再解析出CCStringArray中的名字和对应的坐标，尺寸，是否旋转赋值到一个结构体（包含Name，Width，Height，OriginX，OriginY，isRotate）。创建一个CList来储存这些结构体。</p>

<pre><code>while(i&lt;iFileLines)
{
    strline = FileContainer.GetAt(i++);
    strline.TrimLeft();//删除左边的空格
    if (i%3==1)//第1行，储存名字
    {
        str=strline.Mid(5,strline.GetLength()-11);
        t_pngcfg.strName=str;
    }
    else if(i%3==2)//第2行，储存坐标和尺寸
    {
        CString strTemp;
        str=strline.Mid(10,strline.GetLength()-21);
        AfxExtractSubString(strTemp,str,0,',');
        t_pngcfg.originX=_ttoi(strTemp);
        AfxExtractSubString(strTemp,str,1,',');
        strTemp=strTemp.Left(strTemp.GetLength()-1);
        t_pngcfg.originY=_ttoi(strTemp);
        AfxExtractSubString(strTemp,str,2,',');
        strTemp=strTemp.Right(strTemp.GetLength()-1);
        t_pngcfg.width=_ttoi(strTemp);
        AfxExtractSubString(strTemp,str,3,',');
        t_pngcfg.height=_ttoi(strTemp);
    }
    else //第3行，存储旋转属性
    {
        str=strline.Mid(1,strline.GetLength()-3);
        if (str=="true")
        {
            t_pngcfg.isRotate=true;
        }
        else if (str=="false")
        {
            t_pngcfg.isRotate=false;
        }
        m_list.AddTail(t_pngcfg);
    }
}
</code></pre>

<p>因为plist文件最后还有一个metadata字段，所以后面进行遍历的时候减掉这一个。</p>

<h3>3.随鼠标移动的PNG图片名字的获取</h3>

<p>在OnMouseMove中进行处理显示。</p>

<pre><code>CPoint ptInPNG;  
ptInPNG.x=(point.x-ORIGIN_DRAW_X)/m_ScaleRatio;  
ptInPNG.y=(point.y-ORIGIN_DRAW_Y)/m_ScaleRatio;  

int count=m_plistFile.m_list.GetCount();  
for (int i=0;i&lt;count-1;i++)  
{  
    PNGCfg t_pngcfg=m_plistFile.m_list.GetAt(m_plistFile.m_list.FindIndex(i));  
    if (isPtInRect(ptInPNG,t_pngcfg))  
    {  
        showStastus(t_pngcfg.strName);  
    }  
}  
</code></pre>

<h3>4.单击PNG图拷贝名字到剪切板</h3>

<p>在OnLButtonDown中进行处理拷贝。</p>

<pre><code>if(OpenClipboard()) //首先打开一个剪切板，如果成功则返回非0值  
{
    HANDLE hClip;//声明一个句柄  
    char *pBuf;  
    EmptyClipboard();//置空这个剪切板，且得到剪切板的所有权  
    hClip=GlobalAlloc(GMEM_MOVEABLE,t_pngcfg.strName.GetLength()+1);  
    //申请锁定一块存放数据的内存区域  
    pBuf=(char *)GlobalLock(hClip);//得到指向内存区域的第一个字节指针  
    strcpy(pBuf,(char*)_bstr_t(t_pngcfg.strName.GetBuffer()));//将文本框的值拷贝到内存中  
    GlobalUnlock(hClip);//解除内存锁定  
    SetClipboardData(CF_TEXT,hClip);//设置数据到剪切板中  
    CloseClipboard();//关闭剪切板  
}  
</code></pre>

<h3>5.效果图</h3>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_12/1.jpg" alt="" border="0" title="1" /><br></br></div>


<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_12/2.jpg" alt="" border="0" title="2" /><br></br></div>


<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_12/3.jpg" alt="" border="0" title="3" /><br></br></div>


<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_12/4.jpg" alt="" border="0" title="4" /><br></br></div>


<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_12/5.jpg" alt="" border="0" title="5" /><br></br></div>


<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_12/6.jpg" alt="" border="0" title="6" /><br></br></div>


<h3>6.下载地址</h3>

<p>v.1.2版</p>

<p>更新说明：</p>

<p><em>1.增加PNG剪裁为小PNG功能</em></p>

<p><em>2.修正列表显示</em></p>

<p><a href="http://download.csdn.net/detail/jackyvincefu/6440769">下载地址</a></p>

<p>v1.1版</p>

<p>更新说明：</p>

<p><em>1.修复旋转属性显示错误bug</em></p>

<p><em>2.修复png相对路径无法显示bug</em></p>

<p><em>3.增加双击列表显示红框功能</em></p>

<p><em>4.简化操作</em></p>

<p><em>5.修改icon</em></p>

<p><a href="http://download.csdn.net/detail/jackyvincefu/6429297">下载地址</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之十一】定时器schedule]]></title>
    <link href="http://www.jacky.tk/blog/2013/10/18/play-cocos2dx-11/"/>
    <updated>2013-10-18T08:08:00+08:00</updated>
    <id>http://www.jacky.tk/blog/2013/10/18/play-cocos2dx-11</id>
    <content type="html"><![CDATA[<p>原创作品，转载请标明：<a href="http://blog.csdn.net/jackystudio/article/details/12848473">http://blog.csdn.net/jackystudio</a></p>

<p>如果我们想定时执行一个动作怎么办？CCScheduler帮了我们一个大忙。</p>

<h3>1.概况</h3>

<p>CCNode内部封装了一个</p>

<pre><code>CCScheduler *m_pScheduler;  
</code></pre>

<p>正是通过它我们可以很轻松地完成一些定时功能，所以定时器是节点所具备的功能。</p>

<p>定时器分为2种，一种是更新定时器，执行的频率是每帧执行一次，另一种则是自定义回调函数的定时器（最小值是一帧），关于回调函数和函数指针的相关基础可参见<a href="http://blog.csdn.net/jackystudio/article/details/11720325">这里</a>。</p>

<!-- more -->


<h3>2.API</h3>

<pre><code>//更新定时器，每帧调用1次。每个节点只能有1个被调度的update函数  
void scheduleUpdate(void);  
//卸载更新定时器  
void unscheduleUpdate(void);  

//自定义定时器，如果重复调用，那调用间隔会更新，而不会再次调用  
//interval，调用时间间隔，如果为0，建议使用scheduleUpdate  
//repeat，回调函数会被执行repeat+1次，kCCRepeatForever是无限次调用  
//delay，第一次执行前的延时  
void schedule(SEL_SCHEDULE selector, float interval, unsigned int repeat, float delay);  
void schedule(SEL_SCHEDULE selector, float interval);  
void scheduleOnce(SEL_SCHEDULE selector, float delay);  
void schedule(SEL_SCHEDULE selector);  
//卸载自定义定时器  
void unschedule(SEL_SCHEDULE selector);  
void unscheduleAllSelectors(void);  

//恢复所有定时器和动作，OnEnter调用  
void resumeSchedulerAndActions(void);  
//暂停所有定时器和动作，OnExit调用  
void pauseSchedulerAndActions(void);  

//scheduleUpdate每帧调用  
virtual void update(float delta);  
</code></pre>

<h3>3.示例</h3>

<p><strong>3.1.更新定时器</strong></p>

<pre><code>//开启定时器  
this-&gt;scheduleUpdate();  

//虚函数update  
void HelloWorld::update(float delta)  
{  
    CCLog("%f",delta);  
}  

//输出，这里设置了60fps，调用间隔1/60s  
0.016667  
0.016676  
0.016657  
0.016669  
</code></pre>

<p><strong>3.2.自定义定时器</strong></p>

<pre><code>//开启定时器，延时2s执行，执行3+1次，执行间隔1s  
this-&gt;schedule(schedule_selector(HelloWorld::log),1,3,2);  

//回调函数  
void HelloWorld::log(float dt)  
{  
    CCLog("schedule");  
}  

//输出  
2.004532  
1.005827  
1.000238  
1.001019  
</code></pre>

<h3>4.schedule_selector和SEL_SCHEDULE</h3>

<p>看到上面的schedule_selector了吧，这又是个什么玩意？看看它的宏定义。</p>

<pre><code>#define schedule_selector(_SELECTOR) (SEL_SCHEDULE)(&amp;_SELECTOR)  
</code></pre>

<p>原来是把函数指针转化为SEL_SCHEDULE型指针，那SEL_SCHEDULE又是什么？</p>

<pre><code>typedef void (CCObject::*SEL_SCHEDULE)(float);  
</code></pre>

<p>也没啥，就是定义了一个带有float参数函数指针。所以我们在使用自定义Schedule的时候，回调函数一定要记得带上一个float参数，它记录了两次执行的间隔。如果忘了，可是会出现类型转换错误的异常。这种方式在callfunc_selector，menu_selector等也以同样的方式出现。</p>

<h3>5.谁来调用回调函数</h3>

<p>但是有没有发现，如果这个回调函数是个全局函数或者static函数也就算了，偏偏它是个成员函数，成员函数需要实例来调用，可是从调用方法来看，好像没传入调用对象？</p>

<pre><code>this-&gt;schedule(schedule_selector(HelloWorld::log),1,3,2);  
</code></pre>

<p>是的，还记得一开头说的CCNode内部封装的m_pScheduler吗？</p>

<pre><code>CCScheduler *m_pScheduler;  
</code></pre>

<p>原来CCNode帮我们实现了：</p>

<pre><code>void CCNode::schedule(SEL_SCHEDULE selector, float interval, unsigned int repeat, float delay)  
{  
    CCAssert( selector, "Argument must be non-nil");  
    CCAssert( interval &gt;=0, "Argument must be positive");  

    m_pScheduler-&gt;scheduleSelector(selector, this, interval , repeat, delay, !m_bRunning);  
}  
</code></pre>

<p>原来this这个时候被传入了，同时传入的参数还有m_bRunning，m_bRunning表示节点是否在运行中（是否在舞台上），OnEnter的时候赋值true，OnExit的时候赋值false，所以在执行定时器的时候还必须确保节点有在运行。</p>

<p>这样确实用起来怪怪的，所以在cocos2d-x v3.0版本中，参数和函数指针用一个宏打包起来了~</p>

<p>至于CCSchedule内部是怎么实现的，以及CCTimer的触发回调，有兴趣的就自己看看源码吧，我也写不来，源码有点长啊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之十】cocos2d-x坐标系]]></title>
    <link href="http://www.jacky.tk/blog/2013/10/17/play-cocos2dx-10/"/>
    <updated>2013-10-17T14:43:00+08:00</updated>
    <id>http://www.jacky.tk/blog/2013/10/17/play-cocos2dx-10</id>
    <content type="html"><![CDATA[<p>原创作品，转载请标明：<a href="http://blog.csdn.net/jackystudio/article/details/12830971">http://blog.csdn.net/jackystudio</a></p>

<p>cocos2d-x采用的是笛卡尔平面坐标系，也就是平面上两条垂直线构成的坐标系，平面上任意一点都可以用（x，y）来表示。</p>

<p><em>（1）就坐标系方向而言，cocos2d-x分为屏幕坐标系和OpenGL坐标系。</em></p>

<p><em>（2）就节点本身而言，cocos2d-x分为绝对坐标系和相对坐标系。</em></p>

<h3>1.屏幕坐标系</h3>

<p>屏幕坐标系，也叫UIKit坐标系，原点在屏幕左上，x轴向右，y轴向下。cocos2d-x的屏幕触摸事件传入的位置坐标就是采用了屏幕坐标系。以320*480的屏幕为例，如图坐标值为屏幕坐标系。</p>

<!-- more -->




<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_10/1.jpg" alt="" border="0" title="屏幕坐标系" /><br></br></div>


<h3>2.OpenGL坐标系</h3>

<p>OpenGL坐标系原点在屏幕的左下，x轴向右，y轴向上。cocos2d-x的元素采用的就是OpenGL坐标系。同样的上例，如图坐标值为OpenGL坐标系。</p>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_10/2.jpg" alt="" border="0" title="OpenGL坐标系" /><br></br></div>


<h3>3.屏幕坐标系和OpenGL坐标系的转换</h3>

<p>它们的转换导演类（CCDirector）已经封装好了两个函数供我们使用。</p>

<pre><code>//UIKit To OpenGL  
CCPoint convertToGL(const CCPoint&amp; obPoint);  
//OpenGL To UIKit  
CCPoint convertToUI(const CCPoint&amp; obPoint);  
</code></pre>

<h3>4.绝对坐标系</h3>

<p>绝对坐标系也叫世界坐标系，从名字可以看来，绝对坐标系是一个恒坐标系，不参考也不依赖于其他坐标系。在cocos2d-x中它使用的是OpenGL坐标系。不过因为我们多在CCLayer上放置游戏元素，所以一般比较少直接用到绝对坐标系。</p>

<h3>5.相对坐标系</h3>

<p>cocos2d-x元素是有层次关系的，节点使用的是相对父节点的位置坐标，也就是相对坐标系（也叫本地坐标系），屏幕绘制的时候，cocos2d-x会自动将相对坐标系转换为绝对坐标系，渲染到屏幕的绝对位置上。</p>

<h3>6.锚点</h3>

<p>在举例之前有必要先了解一下锚点这个概念。锚点是对节点而言的，它是节点的一个属性，表明了节点位置的一个参考基准点，同样放置一个物体在(300,300)这个位置，不同的锚点会产生不同的效果。节点的默认锚点位置在(0.5,0.5)。锚点和节点的位置值没有关系，锚点只是影响了节点在屏幕上渲染的位置。如下图，虽然精灵的在屏幕上渲染的位置不一样，但是它们的position值是一样的，都是(300,300)。锚点只会影响它本身在父节点中的渲染位置，而不会影响其子节点的相对它本身的位置。</p>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_10/3.jpg" alt="" border="0" title="锚点" /><br></br></div>


<h3>7.绝对坐标系和相对坐标系的关系</h3>

<p>我们先看一个例子，为了方便演示，节点的锚点都设置为(0,0)。</p>

<pre><code>CCSprite* big=CCSprite::create("big.png");  
big-&gt;setAnchorPoint(ccp(0,0));  
big-&gt;setPosition(ccp(50,50));//设置在相对父节点的(50,50)位置  
this-&gt;addChild(big);//屏幕是父节点  
CCSprite* little=CCSprite::create("little.png");  
little-&gt;setAnchorPoint(ccp(0,0));  
little-&gt;setPosition(ccp(50,50));//设置在相对父节点的(50,50)位置  
big-&gt;addChild(little);//big是父节点  
</code></pre>

<p>效果如下：</p>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_10/4.jpg" alt="" border="0" title="绝对坐标系和相对坐标系的关系" /><br></br></div>


<h3>7.绝对坐标系和相对坐标系的转换</h3>

<p>CCNode提供给我们相对坐标系和绝对坐标系的转换函数。</p>

<pre><code>CCPoint convertToNodeSpace(const CCPoint&amp; worldPoint);  //将世界坐标转换为对象节点内坐标，忽略锚点，以当前父节点左下角坐标为标准  
CCPoint convertToWorldSpace(const CCPoint&amp; nodePoint);  //将对象节点内坐标转换为事件坐标，忽略锚点，以当前父节点左下角坐标为标准  
CCPoint convertToNodeSpaceAR(const CCPoint&amp; worldPoint);//将世界坐标转换为基于锚点的对象节点内坐标
CCPoint convertToWorldSpaceAR(const CCPoint&amp; nodePoint);//将局域锚点的对象节点内坐标转换为世界坐标  
</code></pre>

<p>如果要获取big和little的绝对坐标</p>

<pre><code>CCPoint wp1=this-&gt;convertToWorldSpace(big-&gt;getPosition());//wp1(50,50)  
CCPoint wp2=big-&gt;convertToWorldSpace(little-&gt;getPosition());//wp2(100,100)  
</code></pre>

<p>如果要把绝对坐标转换为big和little的相对坐标</p>

<pre><code>CCPoint np1=big-&gt;convertToNodeSpace(ccp(200,200));//np1(150,150)  
CCPoint np2=little-&gt;convertToNodeSpace(ccp(200,200));//np2(100,100)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之九】动作类CCAction]]></title>
    <link href="http://www.jacky.tk/blog/2013/10/16/play-cocos2dx-09/"/>
    <updated>2013-10-16T14:33:00+08:00</updated>
    <id>http://www.jacky.tk/blog/2013/10/16/play-cocos2dx-09</id>
    <content type="html"><![CDATA[<p>原创作品，转载请标明：<a href="http://blog.csdn.net/jackystudio/article/details/12770909">http://blog.csdn.net/jackystudio</a></p>

<p>精灵也出来了，但是不会动的精灵是木有用的。。。CCAction就是负责来解决精灵运动的问题。</p>

<h3>1.概况</h3>

<p>CCAction直接从CCObject继承而来，注意它代表的是一个动作，是动词。精灵执行了这个动作，而不是名词。CCAction本身并没有什么功能，主要是定义了一些通用函数和虚函数让子类实现多态性。</p>

<!-- more -->




<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_09/1.jpg" alt="" border="0" title="CCAction" /><br></br></div>


<h3>2.接口</h3>

<pre><code>//返回一个描述  
const char* description();  

//返回动作是否结束  
virtual bool isDone(void);  

//在动作开始前调用，需要设置目标精灵  
virtual void startWithTarget(CCNode *pTarget);  

//每帧调用，time在0~1之间，0代表动作刚开始，0.5代表动作执行一半，1代表动作结束  
virtual void update(float time);  

//返回/设置目标节点  
CCNode* getTarget(void);  
void setTarget(CCNode *pTarget);  

//获取/设置上一个节点  
CCNode* getOriginalTarget(void);  
void setOriginalTarget(CCNode *pOriginalTarget);  

//获取/设置标签  
int getTag(void);  
void setTag(int nTag);  

//创建动作静态方法  
static CCAction* create();  
</code></pre>

<h3>3.CCFollow</h3>

<p>CCFollow跟随动作，继承于CCAction，可以实现节点跟随另一个节点动作。它内部封装了一个boundary，也就是跟随范围，初始为CCRectZero。</p>

<pre><code>//创建一个CCFollow对象，create实际上调用了initWithTarget  
static CCFollow* create(CCNode *pFollowedNode, const CCRect&amp; rect = CCRectZero);  
bool initWithTarget(CCNode *pFollowedNode, const CCRect&amp; rect = CCRectZero);  
</code></pre>

<h3>4.CCSpeed</h3>

<p>CCSpeed可调整速度动作类，内部封装了一个速度值，CCSpeed使用很简单，就是传入一个动作和速度，在内部重新copy一个新的动作返回。</p>

<pre><code>//创建一个可变速度动作类，传入速度值  
static CCSpeed* create(CCActionInterval* pAction, float fSpeed);  
</code></pre>

<h3>5.CCFiniteTimeAction</h3>

<p>CCFiniteTimeAction有限次动作执行类，继承于CCAction，它有两个子类CCActionInstant和CCActionInterval，前者代表瞬时动作，也就是这个动作基本不需要时间马上就能完成，而后者代表延时，这个动作需要一段时间来运行。它的子类说明看上图吧。
相比CCAction，它多了一个m_fDuration属性，表示持续时间。</p>

<pre><code>//获取/设置动作持续时间  
float getDuration(void);  
void setDuration(float duration);  

//反转动作，类似于倒带效果，返回一个新的动作  
virtual CCFiniteTimeAction* reverse(void);  
</code></pre>

<p>好了，游戏的基本元素就写到这里，写API文档很蛋疼的说。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之八】精灵类CCSprite]]></title>
    <link href="http://www.jacky.tk/blog/2013/10/15/play-cocos2dx-08/"/>
    <updated>2013-10-15T17:17:00+08:00</updated>
    <id>http://www.jacky.tk/blog/2013/10/15/play-cocos2dx-08</id>
    <content type="html"><![CDATA[<p>精灵类CCSprite可以说是游戏的主角了，也是我们平时最常用到的类。</p>

<h3>1.概况</h3>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_08/1.jpg" alt="" border="0" title="CCSprite" /><br></br></div>


<!-- more -->


<p>CCSprite本质上就是一个二维图片，是静态的。游戏中的动画只不过是让一张张静态图片快速更换达到的动态效果。CCSprite继承于CCNodeRGBA，并实现了CCTextureProtocol的接口。因此CCNodeRGBA所具有的RGB和透明值这些属性和接口CCSprite都有，而CCTextureProtocol是一个抽象类，定义了和纹理相关的两个标准接口：</p>

<pre><code>//返回当前使用的纹理  
virtual CCTexture2D* getTexture(void) = 0;  

//设置一个新的纹理，它会被retain  
virtual void setTexture(CCTexture2D *texture) = 0;  
</code></pre>

<h3>2.常用接口</h3>

<p><strong>2.1.初始化</strong></p>

<pre><code>//初始化函数  
virtual bool init(void);  

//用CCTexture2D纹理来初始化，精灵大小即是纹理大小  
virtual bool initWithTexture(CCTexture2D *pTexture);  

///用CCTexture2D纹理和大小来初始化  
virtual bool initWithTexture(CCTexture2D *pTexture, const CCRect&amp; rect);  

//用CCTexture2D纹理，大小，旋转来初始化  
virtual bool initWithTexture(CCTexture2D *pTexture, const CCRect&amp; rect, bool rotated);  

//用CCSpriteFrame精灵帧来初始化  
virtual bool initWithSpriteFrame(CCSpriteFrame *pSpriteFrame);  

//用CCSpriteFrame精灵帧名来初始化  
virtual bool initWithSpriteFrameName(const char *pszSpriteFrameName);  

//用外部文件初始化，外部文件会先被创建为纹理，再用纹理初始化精灵  
virtual bool initWithFile(const char *pszFilename);  

//用外部文件和大小来初始化  
virtual bool initWithFile(const char *pszFilename, const CCRect&amp; rect);  
</code></pre>

<p><strong>2.2.继承自CCTextureProtocol</strong></p>

<pre><code>//设置/获取纹理  
virtual void setTexture(CCTexture2D *texture);  
virtual CCTexture2D* getTexture(void);  

//设置/获取颜色描绘时混合方案  
void setBlendFunc(ccBlendFunc blendFunc);  
ccBlendFunc getBlendFunc(void);  
</code></pre>

<p><strong>2.3.继承自CCNode</strong></p>

<p>参见CCNode。</p>

<pre><code>virtual void setScaleX(float fScaleX);  
virtual void setScaleY(float fScaleY);  
virtual void setPosition(const CCPoint&amp; pos);  
virtual void setRotation(float fRotation);  
virtual void setRotationX(float fRotationX);  
virtual void setRotationY(float fRotationY);  
virtual void setSkewX(float sx);  
virtual void setSkewY(float sy);  
virtual void removeChild(CCNode* pChild, bool bCleanup);  
virtual void removeAllChildrenWithCleanup(bool bCleanup);  
virtual void reorderChild(CCNode *pChild, int zOrder);  
virtual void addChild(CCNode *pChild);  
virtual void addChild(CCNode *pChild, int zOrder);  
virtual void addChild(CCNode *pChild, int zOrder, int tag);  
virtual void sortAllChildren();  
virtual void setScale(float fScale);  
virtual void setVertexZ(float fVertexZ);  
virtual void setAnchorPoint(const CCPoint&amp; anchor);//默认(0.5,0.5)  
virtual void ignoreAnchorPointForPosition(bool value);  
virtual void setVisible(bool bVisible);  
virtual void draw(void);  
</code></pre>

<p><strong>2.4.继承自CCNodeRGBA</strong></p>

<pre><code>//设置颜色  
virtual void setColor(const ccColor3B&amp; color3);  

//传递颜色  
virtual void updateDisplayedColor(const ccColor3B&amp; parentColor);  

//设置透明度  
virtual void setOpacity(GLubyte opacity);  

//设置/返回透明度是否跟随颜色值变化而变化  
virtual void setOpacityModifyRGB(bool modify);  
virtual bool isOpacityModifyRGB(void);  

//传递透明度  
virtual void updateDisplayedOpacity(GLubyte parentOpacity);  
</code></pre>

<p><strong>2.5.批节点</strong></p>

<pre><code>//更新4属性：x,y,rotation,scale  
virtual void updateTransform(void);  

//如果精灵是由批节点CCSpriteBatchNode渲染的，则返回批节点  
virtual CCSpriteBatchNode* getBatchNode(void);  
//设置批节点，不推荐使用  
virtual void setBatchNode(CCSpriteBatchNode *pobSpriteBatchNode);  
</code></pre>

<p><strong>2.6.纹理</strong></p>

<pre><code>//设置纹理区域  
virtual void setTextureRect(const CCRect&amp; rect);  
virtual void setTextureRect(const CCRect&amp; rect, bool rotated, const CCSize&amp; untrimmedSize);  
virtual void setVertexRect(const CCRect&amp; rect);  
</code></pre>

<p><strong>2.7.精灵帧和动画</strong></p>

<pre><code>//设置新的精灵帧  
virtual void setDisplayFrame(CCSpriteFrame *pNewFrame);  

//返回精灵帧是否在使用  
virtual bool isFrameDisplayed(CCSpriteFrame *pFrame);  

//返回当期使用精灵帧  
virtual CCSpriteFrame* displayFrame(void);  

//设置动画和显示索引  
virtual void setDisplayFrameWithAnimationName(const char *animationName, int frameIndex);  
</code></pre>

<p><strong>2.8.Setter和Getter方法</strong></p>

<p>设置/获取CCSprite属性。</p>

<pre><code>//设置获取是否更新  
virtual bool isDirty(void);  
virtual void setDirty(bool bDirty);  

//返回坐标、顶点、颜色信息  
ccV3F_C4B_T2F_Quad getQuad(void);  

//返回纹理旋转  
bool isTextureRectRotated(void);  

//返回/设置地图集索引  
unsigned int getAtlasIndex(void);  
void setAtlasIndex(unsigned int uAtlasIndex);  

//返回精灵区域，单位为点  
const CCRect&amp; getTextureRect(void);  

//如果采用批渲染，返回/设置纹理地图集  
CCTextureAtlas* getTextureAtlas(void);  
inline void setTextureAtlas(CCTextureAtlas *pobTextureAtlas);  

//获取偏移  
const CCPoint&amp; getOffsetPosition(void);  

//设置返回翻转  
bool isFlipX(void);  
void setFlipX(bool bFlipX);  
bool isFlipY(void);  
void setFlipY(bool bFlipY);  
</code></pre>
]]></content>
  </entry>
  
</feed>
