<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cocos2d-x | Jacky's Blog]]></title>
  <link href="http://www.jacky.tk/blog/categories/cocos2d-x/atom.xml" rel="self"/>
  <link href="http://www.jacky.tk/"/>
  <updated>2013-11-06T14:15:18+08:00</updated>
  <id>http://www.jacky.tk/</id>
  <author>
    <name><![CDATA[FuSijie]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之十】cocos2d-x坐标系]]></title>
    <link href="http://www.jacky.tk/blog/2013/10/17/play-cocos2dx-10/"/>
    <updated>2013-10-17T14:43:00+08:00</updated>
    <id>http://www.jacky.tk/blog/2013/10/17/play-cocos2dx-10</id>
    <content type="html"><![CDATA[<p>原创作品，转载请标明：<a href="http://blog.csdn.net/jackystudio/article/details/12830971">http://blog.csdn.net/jackystudio</a></p>

<p>cocos2d-x采用的是笛卡尔平面坐标系，也就是平面上两条垂直线构成的坐标系，平面上任意一点都可以用（x，y）来表示。</p>

<p><em>（1）就坐标系方向而言，cocos2d-x分为屏幕坐标系和OpenGL坐标系。</em></p>

<p><em>（2）就节点本身而言，cocos2d-x分为绝对坐标系和相对坐标系。</em></p>

<h3>1.屏幕坐标系</h3>

<p>屏幕坐标系，也叫UIKit坐标系，原点在屏幕左上，x轴向右，y轴向下。cocos2d-x的屏幕触摸事件传入的位置坐标就是采用了屏幕坐标系。以320*480的屏幕为例，如图坐标值为屏幕坐标系。</p>

<!-- more -->




<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_10/1.jpg" alt="" border="0" title="屏幕坐标系" /><br></br></div>


<h3>2.OpenGL坐标系</h3>

<p>OpenGL坐标系原点在屏幕的左下，x轴向右，y轴向上。cocos2d-x的元素采用的就是OpenGL坐标系。同样的上例，如图坐标值为OpenGL坐标系。</p>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_10/2.jpg" alt="" border="0" title="OpenGL坐标系" /><br></br></div>


<h3>3.屏幕坐标系和OpenGL坐标系的转换</h3>

<p>它们的转换导演类（CCDirector）已经封装好了两个函数供我们使用。</p>

<pre><code>//UIKit To OpenGL  
CCPoint convertToGL(const CCPoint&amp; obPoint);  
//OpenGL To UIKit  
CCPoint convertToUI(const CCPoint&amp; obPoint);  
</code></pre>

<h3>4.绝对坐标系</h3>

<p>绝对坐标系也叫世界坐标系，从名字可以看来，绝对坐标系是一个恒坐标系，不参考也不依赖于其他坐标系。在cocos2d-x中它使用的是OpenGL坐标系。不过因为我们多在CCLayer上放置游戏元素，所以一般比较少直接用到绝对坐标系。</p>

<h3>5.相对坐标系</h3>

<p>cocos2d-x元素是有层次关系的，节点使用的是相对父节点的位置坐标，也就是相对坐标系（也叫本地坐标系），屏幕绘制的时候，cocos2d-x会自动将相对坐标系转换为绝对坐标系，渲染到屏幕的绝对位置上。</p>

<h3>6.锚点</h3>

<p>在举例之前有必要先了解一下锚点这个概念。锚点是对节点而言的，它是节点的一个属性，表明了节点位置的一个参考基准点，同样放置一个物体在(300,300)这个位置，不同的锚点会产生不同的效果。节点的默认锚点位置在(0.5,0.5)。锚点和节点的位置值没有关系，锚点只是影响了节点在屏幕上渲染的位置。如下图，虽然精灵的在屏幕上渲染的位置不一样，但是它们的position值是一样的，都是(300,300)。锚点只会影响它本身在父节点中的渲染位置，而不会影响其子节点的相对它本身的位置。</p>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_10/3.jpg" alt="" border="0" title="锚点" /><br></br></div>


<h3>7.绝对坐标系和相对坐标系的关系</h3>

<p>我们先看一个例子，为了方便演示，节点的锚点都设置为(0,0)。</p>

<pre><code>CCSprite* big=CCSprite::create("big.png");  
big-&gt;setAnchorPoint(ccp(0,0));  
big-&gt;setPosition(ccp(50,50));//设置在相对父节点的(50,50)位置  
this-&gt;addChild(big);//屏幕是父节点  
CCSprite* little=CCSprite::create("little.png");  
little-&gt;setAnchorPoint(ccp(0,0));  
little-&gt;setPosition(ccp(50,50));//设置在相对父节点的(50,50)位置  
big-&gt;addChild(little);//big是父节点  
</code></pre>

<p>效果如下：</p>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_10/4.jpg" alt="" border="0" title="绝对坐标系和相对坐标系的关系" /><br></br></div>


<h3>7.绝对坐标系和相对坐标系的转换</h3>

<p>CCNode提供给我们相对坐标系和绝对坐标系的转换函数。</p>

<pre><code>CCPoint convertToNodeSpace(const CCPoint&amp; worldPoint);  //将世界坐标转换为对象节点内坐标，忽略锚点，以当前父节点左下角坐标为标准  
CCPoint convertToWorldSpace(const CCPoint&amp; nodePoint);  //将对象节点内坐标转换为事件坐标，忽略锚点，以当前父节点左下角坐标为标准  
CCPoint convertToNodeSpaceAR(const CCPoint&amp; worldPoint);//将世界坐标转换为基于锚点的对象节点内坐标
CCPoint convertToWorldSpaceAR(const CCPoint&amp; nodePoint);//将局域锚点的对象节点内坐标转换为世界坐标  
</code></pre>

<p>如果要获取big和little的绝对坐标</p>

<pre><code>CCPoint wp1=this-&gt;convertToWorldSpace(big-&gt;getPosition());//wp1(50,50)  
CCPoint wp2=big-&gt;convertToWorldSpace(little-&gt;getPosition());//wp2(100,100)  
</code></pre>

<p>如果要把绝对坐标转换为big和little的相对坐标</p>

<pre><code>CCPoint np1=big-&gt;convertToNodeSpace(ccp(200,200));//np1(150,150)  
CCPoint np2=little-&gt;convertToNodeSpace(ccp(200,200));//np2(100,100)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之九】动作类CCAction]]></title>
    <link href="http://www.jacky.tk/blog/2013/10/16/play-cocos2dx-09/"/>
    <updated>2013-10-16T14:33:00+08:00</updated>
    <id>http://www.jacky.tk/blog/2013/10/16/play-cocos2dx-09</id>
    <content type="html"><![CDATA[<p>原创作品，转载请标明：<a href="http://blog.csdn.net/jackystudio/article/details/12770909">http://blog.csdn.net/jackystudio</a></p>

<p>精灵也出来了，但是不会动的精灵是木有用的。。。CCAction就是负责来解决精灵运动的问题。</p>

<h3>1.概况</h3>

<p>CCAction直接从CCObject继承而来，注意它代表的是一个动作，是动词。精灵执行了这个动作，而不是名词。CCAction本身并没有什么功能，主要是定义了一些通用函数和虚函数让子类实现多态性。</p>

<!-- more -->




<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_09/1.jpg" alt="" border="0" title="CCAction" /><br></br></div>


<h3>2.接口</h3>

<pre><code>//返回一个描述  
const char* description();  

//返回动作是否结束  
virtual bool isDone(void);  

//在动作开始前调用，需要设置目标精灵  
virtual void startWithTarget(CCNode *pTarget);  

//每帧调用，time在0~1之间，0代表动作刚开始，0.5代表动作执行一半，1代表动作结束  
virtual void update(float time);  

//返回/设置目标节点  
CCNode* getTarget(void);  
void setTarget(CCNode *pTarget);  

//获取/设置上一个节点  
CCNode* getOriginalTarget(void);  
void setOriginalTarget(CCNode *pOriginalTarget);  

//获取/设置标签  
int getTag(void);  
void setTag(int nTag);  

//创建动作静态方法  
static CCAction* create();  
</code></pre>

<h3>3.CCFollow</h3>

<p>CCFollow跟随动作，继承于CCAction，可以实现节点跟随另一个节点动作。它内部封装了一个boundary，也就是跟随范围，初始为CCRectZero。</p>

<pre><code>//创建一个CCFollow对象，create实际上调用了initWithTarget  
static CCFollow* create(CCNode *pFollowedNode, const CCRect&amp; rect = CCRectZero);  
bool initWithTarget(CCNode *pFollowedNode, const CCRect&amp; rect = CCRectZero);  
</code></pre>

<h3>4.CCSpeed</h3>

<p>CCSpeed可调整速度动作类，内部封装了一个速度值，CCSpeed使用很简单，就是传入一个动作和速度，在内部重新copy一个新的动作返回。</p>

<pre><code>//创建一个可变速度动作类，传入速度值  
static CCSpeed* create(CCActionInterval* pAction, float fSpeed);  
</code></pre>

<h3>5.CCFiniteTimeAction</h3>

<p>CCFiniteTimeAction有限次动作执行类，继承于CCAction，它有两个子类CCActionInstant和CCActionInterval，前者代表瞬时动作，也就是这个动作基本不需要时间马上就能完成，而后者代表延时，这个动作需要一段时间来运行。它的子类说明看上图吧。
相比CCAction，它多了一个m_fDuration属性，表示持续时间。</p>

<pre><code>//获取/设置动作持续时间  
float getDuration(void);  
void setDuration(float duration);  

//反转动作，类似于倒带效果，返回一个新的动作  
virtual CCFiniteTimeAction* reverse(void);  
</code></pre>

<p>好了，游戏的基本元素就写到这里，写API文档很蛋疼的说。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之八】精灵类CCSprite]]></title>
    <link href="http://www.jacky.tk/blog/2013/10/15/play-cocos2dx-08/"/>
    <updated>2013-10-15T17:17:00+08:00</updated>
    <id>http://www.jacky.tk/blog/2013/10/15/play-cocos2dx-08</id>
    <content type="html"><![CDATA[<p>精灵类CCSprite可以说是游戏的主角了，也是我们平时最常用到的类。</p>

<h3>1.概况</h3>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_08/1.jpg" alt="" border="0" title="CCSprite" /><br></br></div>


<!-- more -->


<p>CCSprite本质上就是一个二维图片，是静态的。游戏中的动画只不过是让一张张静态图片快速更换达到的动态效果。CCSprite继承于CCNodeRGBA，并实现了CCTextureProtocol的接口。因此CCNodeRGBA所具有的RGB和透明值这些属性和接口CCSprite都有，而CCTextureProtocol是一个抽象类，定义了和纹理相关的两个标准接口：</p>

<pre><code>//返回当前使用的纹理  
virtual CCTexture2D* getTexture(void) = 0;  

//设置一个新的纹理，它会被retain  
virtual void setTexture(CCTexture2D *texture) = 0;  
</code></pre>

<h3>2.常用接口</h3>

<p><strong>2.1.初始化</strong></p>

<pre><code>//初始化函数  
virtual bool init(void);  

//用CCTexture2D纹理来初始化，精灵大小即是纹理大小  
virtual bool initWithTexture(CCTexture2D *pTexture);  

///用CCTexture2D纹理和大小来初始化  
virtual bool initWithTexture(CCTexture2D *pTexture, const CCRect&amp; rect);  

//用CCTexture2D纹理，大小，旋转来初始化  
virtual bool initWithTexture(CCTexture2D *pTexture, const CCRect&amp; rect, bool rotated);  

//用CCSpriteFrame精灵帧来初始化  
virtual bool initWithSpriteFrame(CCSpriteFrame *pSpriteFrame);  

//用CCSpriteFrame精灵帧名来初始化  
virtual bool initWithSpriteFrameName(const char *pszSpriteFrameName);  

//用外部文件初始化，外部文件会先被创建为纹理，再用纹理初始化精灵  
virtual bool initWithFile(const char *pszFilename);  

//用外部文件和大小来初始化  
virtual bool initWithFile(const char *pszFilename, const CCRect&amp; rect);  
</code></pre>

<p><strong>2.2.继承自CCTextureProtocol</strong></p>

<pre><code>//设置/获取纹理  
virtual void setTexture(CCTexture2D *texture);  
virtual CCTexture2D* getTexture(void);  

//设置/获取颜色描绘时混合方案  
void setBlendFunc(ccBlendFunc blendFunc);  
ccBlendFunc getBlendFunc(void);  
</code></pre>

<p><strong>2.3.继承自CCNode</strong></p>

<p>参见CCNode。</p>

<pre><code>virtual void setScaleX(float fScaleX);  
virtual void setScaleY(float fScaleY);  
virtual void setPosition(const CCPoint&amp; pos);  
virtual void setRotation(float fRotation);  
virtual void setRotationX(float fRotationX);  
virtual void setRotationY(float fRotationY);  
virtual void setSkewX(float sx);  
virtual void setSkewY(float sy);  
virtual void removeChild(CCNode* pChild, bool bCleanup);  
virtual void removeAllChildrenWithCleanup(bool bCleanup);  
virtual void reorderChild(CCNode *pChild, int zOrder);  
virtual void addChild(CCNode *pChild);  
virtual void addChild(CCNode *pChild, int zOrder);  
virtual void addChild(CCNode *pChild, int zOrder, int tag);  
virtual void sortAllChildren();  
virtual void setScale(float fScale);  
virtual void setVertexZ(float fVertexZ);  
virtual void setAnchorPoint(const CCPoint&amp; anchor);//默认(0.5,0.5)  
virtual void ignoreAnchorPointForPosition(bool value);  
virtual void setVisible(bool bVisible);  
virtual void draw(void);  
</code></pre>

<p><strong>2.4.继承自CCNodeRGBA</strong></p>

<pre><code>//设置颜色  
virtual void setColor(const ccColor3B&amp; color3);  

//传递颜色  
virtual void updateDisplayedColor(const ccColor3B&amp; parentColor);  

//设置透明度  
virtual void setOpacity(GLubyte opacity);  

//设置/返回透明度是否跟随颜色值变化而变化  
virtual void setOpacityModifyRGB(bool modify);  
virtual bool isOpacityModifyRGB(void);  

//传递透明度  
virtual void updateDisplayedOpacity(GLubyte parentOpacity);  
</code></pre>

<p><strong>2.5.批节点</strong></p>

<pre><code>//更新4属性：x,y,rotation,scale  
virtual void updateTransform(void);  

//如果精灵是由批节点CCSpriteBatchNode渲染的，则返回批节点  
virtual CCSpriteBatchNode* getBatchNode(void);  
//设置批节点，不推荐使用  
virtual void setBatchNode(CCSpriteBatchNode *pobSpriteBatchNode);  
</code></pre>

<p><strong>2.6.纹理</strong></p>

<pre><code>//设置纹理区域  
virtual void setTextureRect(const CCRect&amp; rect);  
virtual void setTextureRect(const CCRect&amp; rect, bool rotated, const CCSize&amp; untrimmedSize);  
virtual void setVertexRect(const CCRect&amp; rect);  
</code></pre>

<p><strong>2.7.精灵帧和动画</strong></p>

<pre><code>//设置新的精灵帧  
virtual void setDisplayFrame(CCSpriteFrame *pNewFrame);  

//返回精灵帧是否在使用  
virtual bool isFrameDisplayed(CCSpriteFrame *pFrame);  

//返回当期使用精灵帧  
virtual CCSpriteFrame* displayFrame(void);  

//设置动画和显示索引  
virtual void setDisplayFrameWithAnimationName(const char *animationName, int frameIndex);  
</code></pre>

<p><strong>2.8.Setter和Getter方法</strong></p>

<p>设置/获取CCSprite属性。</p>

<pre><code>//设置获取是否更新  
virtual bool isDirty(void);  
virtual void setDirty(bool bDirty);  

//返回坐标、顶点、颜色信息  
ccV3F_C4B_T2F_Quad getQuad(void);  

//返回纹理旋转  
bool isTextureRectRotated(void);  

//返回/设置地图集索引  
unsigned int getAtlasIndex(void);  
void setAtlasIndex(unsigned int uAtlasIndex);  

//返回精灵区域，单位为点  
const CCRect&amp; getTextureRect(void);  

//如果采用批渲染，返回/设置纹理地图集  
CCTextureAtlas* getTextureAtlas(void);  
inline void setTextureAtlas(CCTextureAtlas *pobTextureAtlas);  

//获取偏移  
const CCPoint&amp; getOffsetPosition(void);  

//设置返回翻转  
bool isFlipX(void);  
void setFlipX(bool bFlipX);  
bool isFlipY(void);  
void setFlipY(bool bFlipY);  
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之七】场景类CCScene和布景类CCLayer]]></title>
    <link href="http://www.jacky.tk/blog/2013/10/14/play-cocos2dx-07/"/>
    <updated>2013-10-14T22:21:00+08:00</updated>
    <id>http://www.jacky.tk/blog/2013/10/14/play-cocos2dx-07</id>
    <content type="html"><![CDATA[<p>原创作品，转载请标明：<a href="http://blog.csdn.net/jackystudio/article/details/12708811">http://blog.csdn.net/jackystudio</a></p>

<p>场景类CCScene和布景类CCLayer都是作为一个容器来使用，这里简单地看下它们的实现：</p>

<h3>1.场景类：CCScene</h3>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_07/1.jpg" alt="" border="0" title="CCScene" /><br></br></div>




<!-- more -->


<p>CCScene类继承于CCNode，它的实现很简单，就是基本上没添加什么内容。。。它只是作为一个容器（父节点）的抽象概念存在。对比CCNode差别有：</p>

<p>（1）构造函数中设置了不使用锚点定位，而是使用了坐标原点，即使设置了锚点也不起作用。</p>

<p>m_bIgnoreAnchorPointForPosition是CCNode的属性，用于CCScene和CCLayer。</p>

<pre><code>m_bIgnoreAnchorPointForPosition = true;  
</code></pre>

<p>（2）在init中设置场景的大小。节点的初始化大小为CCSizeZero，也就是没有大小。CCScene初始化时设置了场景的大小，即窗口大小。</p>

<pre><code>this-&gt;setContentSize(pDirector-&gt;getWinSize());  
</code></pre>

<h3>2.布景类：CCLayer</h3>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_07/2.jpg" alt="" border="0" title="CCLayer" /><br></br></div>


<p>CCLayer相对CCScene而言会比较麻烦一点，因为他不仅要作为容器使用，而且还要实现一些游戏功能，所以它继承了CCTouchDelegate，CCAccelerometerDelegate和CCKeypadDelegate，这三个类是用来处理触摸事件，重力感应事件和键盘事件的，默认初始化都是不可用，需要手动设置开启。</p>

<p>（1）CCLayer和CCScene的初始化差不多，也是构造函数中设置不使用锚点定位，init函数中设置了层的大小，即窗口大小。</p>

<p>（2）常用接口：</p>

<pre><code>//初始化函数，添加精灵就在这里进行  
virtual bool init();  

//分配内存，标记autoRelease  
static CCLayer *create(void);  

//层进入回调  
virtual void onEnter();  
//层退出回调  
virtual void onExit();  
//如果层进入带效果，效果完成时回调  
virtual void onEnterTransitionDidFinish();  

//触摸事件(单点和多点)  
virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);  
virtual void ccTouchMoved(CCTouch *pTouch, CCEvent *pEvent);  
virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);  
virtual void ccTouchCancelled(CCTouch *pTouch, CCEvent *pEvent);  
virtual void ccTouchesBegan(CCSet *pTouches, CCEvent *pEvent);  
virtual void ccTouchesMoved(CCSet *pTouches, CCEvent *pEvent);  
virtual void ccTouchesEnded(CCSet *pTouches, CCEvent *pEvent);  
virtual void ccTouchesCancelled(CCSet *pTouches, CCEvent *pEvent);  

//重力感应相关  
virtual void didAccelerate(CCAcceleration* pAccelerationValue);  
void registerScriptAccelerateHandler(int nHandler);  
void unregisterScriptAccelerateHandler(void);  

//注册触摸分发，默认是addStandardDelegate  
virtual void registerWithTouchDispatcher(void);  

//设置/获取释放触摸可用  
virtual bool isTouchEnabled();  
virtual void setTouchEnabled(bool value);  

//设置/获取触摸模式  
virtual void setTouchMode(ccTouchesMode mode);  
virtual int getTouchMode();  

//设置/获取触摸优先级，默认为0  
virtual void setTouchPriority(int priority);  
virtual int getTouchPriority();  

//设置/获取是否接收重力感应事件  
virtual bool isAccelerometerEnabled();  
virtual void setAccelerometerEnabled(bool value);  
virtual void setAccelerometerInterval(double interval);  

//设置/获取是否接收键盘事件  
virtual bool isKeypadEnabled();  
virtual void setKeypadEnabled(bool value);  

//返回键和菜单键的回调，需要设置接收键盘事件  
virtual void keyBackClicked(void);  
virtual void keyMenuClicked(void);  
</code></pre>

<h3>3.颜色布景层：CCLayerRGBA，CCLayerColor和CCLayerGradient</h3>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_07/3.jpg" alt="" border="0" title="颜色布景层" /><br></br></div>


<p>（1）CCLayerRGBA和CCNodeRGBA差不多，也是用于设置RGB值和Blend值，同时可以传递到子节点。它的相关接口参见CCNodeRGBA。</p>

<p>（2）CCLayerColor只是一个单纯的可以绘制颜色的层。可以带入长宽参数，绘制一个矩形的布景层。</p>

<p>（3）CCLayerGradient继承于CClayerColor，是一个带有渐变效果的布景层。</p>

<h3>4.多层布景层：CCLayerMultiplex</h3>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_07/4.jpg" alt="" border="0" title="CCLayerMultiplex" /><br></br></div>


<p>CCLayerMultiplex继承与CCLayer，相当于一个层容器，他可以包含多个层，但是同一时间只能显示一个CCLayer。《我叫MT》的第一个界面菜单那一块就是这么处理的。CCLayerMultiplex最重要的函数就是：</p>

<pre><code>//切换布景层  
pLayerMultiplex-&gt;switchTo(item-&gt;getTag());  
pLayerMultiplex-&gt;switchToAndReleaseMe(item-&gt;getTag());  
</code></pre>

<p>两者的差别在于是否释放当前处于活动的布景层。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【玩转cocos2d-x之六】节点类CCNode]]></title>
    <link href="http://www.jacky.tk/blog/2013/10/14/play-cocos2dx-06/"/>
    <updated>2013-10-14T22:06:00+08:00</updated>
    <id>http://www.jacky.tk/blog/2013/10/14/play-cocos2dx-06</id>
    <content type="html"><![CDATA[<p>原创作品，转载请标明：<a href="http://blog.csdn.net/jackystudio/article/details/12703741">http://blog.csdn.net/jackystudio/</a></p>

<p>节点类CCNode可以说是游戏元素的祖宗了，基本上我们看得到的游戏元素都是以它为原型进行扩展的。像CCScene，CCLayer，CCSprite，CCMenu，CCSpriteBatchNode等等都是从CCNode继承而来。另外如果我们要自定义精灵，那么从CCNode继承也是一个很不错的选择。</p>

<h3>1.概况</h3>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_06/1.jpg" alt="" border="0" title="CCNode" /><br></br></div>




<!-- more -->


<p>CCNode直接从CCObject继承而来，有如下几个特点：</p>

<p><em>（1）可以包含其他CCNode节点，可以进行添加/获取/删除子节点操作。</em></p>

<p><em>（2）可以执行周期性的回调任务。</em></p>

<p><em>（3）可以执行动作。</em></p>

<p>一些子类化的节点提供了更为丰富的特性和功能。</p>

<h3>2.属性</h3>

<pre><code>Features of CCNode:  
- position   //位置，默认(0,0)  
- scale (x, y)   //缩放，默认(1,1)  
- rotation (in degrees, clockwise)   //旋转，默认为0  
- skew   //倾斜，默认为0  
- CCCamera (an interface to gluLookAt )  //CCCamera，视点转换，每个节点都有，默认指向节点中心  
- CCGridBase (to do mesh transformations)//CCGridBase，网类转变  
- anchor point   //锚点，默认(0,0)  
- size   //尺寸，默认(0,0)  
- visible//可见  
- z-order//z轴值  
- openGL z position  //OpenGL z值  
</code></pre>

<h3>3.接口</h3>

<p><strong>3.1.初始化</strong></p>

<pre><code>//初始化函数，成功返回true  
virtual bool init();  

//分配内存空间，调用init并添加autoRelease标记  
static CCNode * create(void);  

//返回描述字符串  
const char* description(void);  
</code></pre>

<p><strong>3.2.图形属性</strong></p>

<pre><code>//设置/获取Z轴顺序，Z轴大的覆盖Z轴小的  
virtual void setZOrder(int zOrder);  
virtual void _setZOrder(int z);  
virtual int getZOrder();  

//设置/获取OpenGL Z轴顶点  
virtual void setVertexZ(float vertexZ);  
virtual float getVertexZ();  

//设置/获取缩放值  
virtual void setScaleX(float fScaleX);  
virtual float getScaleX();  
virtual void setScaleY(float fScaleY);  
virtual float getScaleY();  
virtual void setScale(float scale);  
virtual float getScale();  
virtual void setScale(float fScaleX,float fScaleY);  

//设置/获取位置  
virtual void setPosition(const CCPoint &amp;position);  
virtual const CCPoint&amp; getPosition();  
virtual void setPosition(float x, float y);  
virtual void getPosition(float* x, float* y);  
virtual void  setPositionX(float x);  
virtual float getPositionX(void);  
virtual void  setPositionY(float y);  
virtual float getPositionY(void);  

//设置/获取倾斜角度  
virtual void setSkewX(float fSkewX);  
virtual float getSkewX();  
virtual void setSkewY(float fSkewY);  
virtual float getSkewY();  

//设置/获取锚点  
virtual void setAnchorPoint(const CCPoint&amp; anchorPoint);  
virtual const CCPoint&amp; getAnchorPoint();  
virtual const CCPoint&amp; getAnchorPointInPoints();  

//设置/获取大小  
virtual void setContentSize(const CCSize&amp; contentSize);  
virtual const CCSize&amp; getContentSize() const;  

//设置/获取可见性  
virtual void setVisible(bool visible);  
virtual bool isVisible();  

//设置/获取旋转角度  
virtual void setRotation(float fRotation);  
virtual float getRotation();  
virtual void setRotationX(float fRotaionX);  
virtual float getRotationX();  
virtual void setRotationY(float fRotationY);  
virtual float getRotationY();  
</code></pre>

<p><strong>3.3.节点操作</strong></p>

<pre><code>//添加/获取子节点，可以带Z轴顺序（默认为0）和标签  
virtual void addChild(CCNode * child);  
virtual void addChild(CCNode * child, int zOrder);  
virtual void addChild(CCNode* child, int zOrder, int tag);  
CCNode * getChildByTag(int tag);  
virtual CCArray* getChildren();  
unsigned int getChildrenCount(void) const;  

//设置/获取父节点  
virtual void setParent(CCNode* parent);  
virtual CCNode* getParent();  

//从父节点中移除自身，默认cleanup为true  
virtual void removeFromParent();  
virtual void removeFromParentAndCleanup(bool cleanup);  

//移除子节点  
virtual void removeChild(CCNode* child);  
virtual void removeChild(CCNode* child, bool cleanup);  
virtual void removeChildByTag(int tag);  
virtual void removeChildByTag(int tag, bool cleanup);  

//移除所有节点  
virtual void removeAllChildren();  
virtual void removeAllChildrenWithCleanup(bool cleanup);  

//重新设置节点顺序  
virtual void reorderChild(CCNode * child, int zOrder);  
</code></pre>

<p><strong>3.4.标签和用户数据</strong></p>

<pre><code>//设置/获取tag  
virtual int getTag() const;  
virtual void setTag(int nTag);  

//设置/获取userdata，它是一个指针可以指向你想要的任意数据块，不过记得要释放  
virtual void* getUserData();  
virtual void setUserData(void *pUserData);  

//设置/获取CCObject，和上面一样，只是数据换成了CCObject对象  
virtual CCObject* getUserObject();  
virtual void setUserObject(CCObject *pUserObject);  
</code></pre>

<p><strong>3.5.事件回调</strong></p>

<pre><code>//事件回调
//节点开始进入触发  
virtual void onEnter();  
//节点完成进入触发  
virtual void onEnterTransitionDidFinish();  
//节点退出触发  
virtual void onExit();  
//如果节点退出有过渡动画，动画开始时触发  
virtual void onExitTransitionDidStart();  
//停止动画和调度器  
virtual void cleanup(void);  
</code></pre>

<p><strong>3.6.动作</strong></p>

<pre><code>//获取/设置动作管理器
virtual void setActionManager(CCActionManager* actionManager);  
virtual CCActionManager* getActionManager();  

//运行动作  
CCAction* runAction(CCAction* action);  

//停止动作  
void stopAllActions(void);  
void stopAction(CCAction* action);  
void stopActionByTag(int tag);  
CCAction* getActionByTag(int tag);  

//获取正在运行动作数  
unsigned int numberOfRunningActions(void);  
</code></pre>

<p><strong>3.7.调度器和定时器</strong></p>

<pre><code>//获取/设置调度器  
virtual void setScheduler(CCScheduler* scheduler);  
virtual CCScheduler* getScheduler();  

//检测某个调度器是否有在运行  
bool isScheduled(SEL_SCHEDULE selector);  

//开启update调度  
void scheduleUpdate(void);  
//设置调度优先级  
void scheduleUpdateWithPriority(int priority);  
//关闭update调度器  
void unscheduleUpdate(void);  

//开启/关闭/恢复/暂停调度器  
void schedule(SEL_SCHEDULE selector, float interval, unsigned int repeat, float delay);  
void schedule(SEL_SCHEDULE selector, float interval);  
void scheduleOnce(SEL_SCHEDULE selector, float delay);  
void schedule(SEL_SCHEDULE selector);  
void unschedule(SEL_SCHEDULE selector);  
void unscheduleAllSelectors(void);  
void resumeSchedulerAndActions(void);  
void pauseSchedulerAndActions(void);  

//每帧调用函数  
virtual void update(float delta);  
</code></pre>

<p><strong>3.8.坐标转换</strong></p>

<pre><code>//坐标转换相关，这一部分后面再介绍  
CCPoint convertToNodeSpace(const CCPoint&amp; worldPoint);  
CCPoint convertToWorldSpace(const CCPoint&amp; nodePoint);  
CCPoint convertToNodeSpaceAR(const CCPoint&amp; worldPoint);  
CCPoint convertToWorldSpaceAR(const CCPoint&amp; nodePoint);  
CCPoint convertTouchToNodeSpace(CCTouch * touch);  
CCPoint convertTouchToNodeSpaceAR(CCTouch * touch);  
</code></pre>

<p><strong>3.9.其他</strong></p>

<pre><code>//获取/设置着色程序  
virtual CCGLProgram* getShaderProgram();  
virtual void setShaderProgram(CCGLProgram *pShaderProgram);  

//获取CCCamera对象  
virtual CCCamera* getCamera();  

//节点是否在运行  
virtual bool isRunning();  

//绘制节点  
virtual void draw(void);  
//递归访问节点  
virtual void visit(void);  

//返回所占矩形，节点坐标系  
CCRect boundingBox(void);  
</code></pre>

<h3>4.CCNodeRGBA</h3>

<div align="center"><img src="http://www.jacky.tk/images/Blog/Play_cocos2dx_06/2.jpg" alt="" border="0" title="CCNodeRGBA" /><br></br></div>


<p>CCNodeRGBA继承于CCNode，所以它拥有CCNode的所有特性，并且它也继承于CCRGBAProtocol。从名字看来我们就知道它是一个带有颜色和透明度的节点。</p>

<p>所以它比起CCNode就多了2个特性，Opacity和RGB值。</p>

<p>如果要给子节点传递透明度属性，那么需要设置setCascadeOpacityEnabled(true)，如果传递的过程中遇到了CCNode，那么传递会中断。颜色值的传递也是一样的道理。</p>
]]></content>
  </entry>
  
</feed>
